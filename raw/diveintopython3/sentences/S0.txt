You are here: Home ‣ Dive Into Python 3 ‣
您在这里：首页 ‣ 深入 Python 3 ‣

What’s New In “Dive Into Python 3”
《深入 Python 3》中有何新内容

❝ Isn’t this where we came in?
❝ 这不正是我们进来的地方吗

❞ — Pink Floyd, The Wall
 ❞ — 《迷墙》

a.k.a.“the minus level”
又叫做 “the minus level”

Are you already a Python programmer?Did you read the original “Dive Into Python”?Did you buy it on paper?(If so, thanks!
你读过原版的 “深入 Python” 并可能甚至买了纸版的?（谢谢

) Are you ready to take the plunge into Python 3?
）你差不多已经了解 Python 2 了

… If so, read on.
你准备好了投入到 Python 3 里面

(If none of that is true, you’d be better off starting at the beginning.)
… 如果所有这些都成立，继续读

Python 3 comes with a script called 2to3.
Python 3 提供了一个脚本叫做 2to3

Learn it.
学习它

Love it.
喜欢它

Use it.
使用它

Porting Code to Python 3 with 2to3 is a reference of all the things that the 2to3 tool can fix automatically.
用 2to3 移植代码到 Python 3 是一个有关 2to3 工具能够自动整理的所有东西的参考手册

Since a lot of those things are syntax changes, it’s a good starting point to learn about a lot of the syntax changes in Python 3.
很多这些东西都是语法的变更，因此了解 Python 3 里面许多的语法变更是一个好的起点

(print is now a function, `x` doesn’t work, &c.)
（print 现在是一个函数，`x` 不能使用，等等

Case Study: Porting chardet to Python 3 documents my (ultimately successful) effort to port a non-trivial library from Python 2 to Python 3.
案例分析：移植 chardet 到 Python 3 记录了我努力（最终成功）把一个不平常的库从 Python 2 移植到 Python 3 的过程

It may help you;
它也许能帮助你

it may not.
也许不能

There’s a fairly steep learning curve, since you need to kind of understand the library first, so you can understand why it broke and how I fixed it.
这里存在一个相当陡的学习曲线，由于你首先需要稍微理解一下这个库，那样你才可以理解为什么它会损坏以及我如何修复它的

A lot of the breakage centers around strings.
围绕字符串有很多损坏的地方

Speaking of which…
说到这个…

Strings.
字符串

Whew.
吆

Where to start.
从哪儿开始呢

Python 2 had “strings” and “Unicode strings”.
Python 2 有 “strings” 和 “Unicode strings”

Python 3 has “bytes” and “strings”.
Python 3 有 “bytes” 和 “strings”

That is, all strings are now Unicode strings, and if you want to deal with a bag of bytes, you use the new bytes type.
也就是说，现在所有字符串都是 Unicode 的字符串，那么如果你想处理一个字节包，你可以使用新的 bytes 类型

Python 3 will never implicitly convert between strings and bytes, so if you’re not sure which one you have at any given moment, your code will almost certainly break.
Python 3 从不会在 strings 和 bytes 之间进行隐式的转换，因此在任何时候如果你不确信你拥有的是什么类型，你的代码几乎无疑的将会出问题

Read the Strings chapter for more details.
阅读 Strings 的章节 了解更多细节信息

Bytes vs strings comes up again and again throughout the book.
贯穿整个这本书，Bytes 和 strings 的对比会一次又一次的出现

In Files, you’ll learn the difference between reading files in “binary” and “text” mode.
在文件这章，你将了解到通过“二进制”模式和“文本”模式读取文件的区别

Reading (and writing!) files in text mode requires an encoding parameter.
在文本模式下读取（和写入!）文件需要提供一个 encoding 参数

Some text file methods count characters, but other methods count bytes.
一些文本文件方法按照字符来计数，而另一些方法按照字节计数

If your code assumes that one character == one byte, it will break on multi-byte characters.
如果你的代码采取一个字符等于一个字节的方式，那么在多字节表示一个字符的情况下将会出问题

In HTTP Web Services, the httplib2 module fetches headers and data over HTTP.
在 HTTP Web 服务这章，httplib2 模块通过 HTTP 获取头信息和数据

HTTP headers are returned as strings, but the HTTP body is returned as bytes.
HTTP 头信息返回的是字符串，而 HTTP 正文则返回的是字节

In Serializing Python Objects, you’ll learn why the pickle module in Python 3 defines a new data format that is backwardly incompatible with Python 2.
在序列化 Python 对象这章，你将了解到为什么 Python 3 里面的 pickle 模块定义了一个和 Python 2 向后不兼容的新的数据类型

(Hint: it’s because of bytes and strings.
（提示：这就是因为字节和字符串的原因

) Also, Python 3 supports serializing objects to and from JSON, which doesn’t even have a bytes type.
） 同样 JSON 也根本不支持字节类型

I’ll show you how to hack around that.
我将向你展示如何解决这个问题

In Case study: porting chardet to Python 3, it’s just a bloody mess of bytes and strings everywhere.
在案例分析：移植 chardet 到 Python 3这章，到处都是一大堆一大堆关于字节和字符串的东西

Even if you don’t care about Unicode (oh but you will), you’ll want to read about string formatting in Python 3, which is completely different from Python 2.
即使你不关心 Unicode （但实际上你会的），你也会想阅读一下 Python 3 里面的字符串格式，这和 Python 2 里面的完全不一样

Iterators are everywhere in Python 3, and I understand them a lot better than I did five years ago when I wrote “Dive Into Python”.
迭代在 Python 3 里面无处不在，比起五年之前我写“深入Python” 的时候，我现在能更好的理解它们

You need to understand them too, because lots of functions that used to return lists in Python 2 will now return iterators in Python 3.
你也需要理解他们，因为过去经常在 Python 2 里面返回列表的很多函数，在 Python 3 里面将返回迭代

At a minimum, you should read the second half of the Iterators chapter and the second half of the Advanced Iterators chapter.
至少，你应该阅读一下迭代章节的下半部分和高级迭代章节的下半部分

By popular request, I’ve added an appendix on Special Method Names, which is kind of like the Python docs “Data Model” chapter but with more snark.
根据大家的要求，我已经添加了一个关于特殊方法名称的附录，有点像 Python 文档的 “数据模型”章节但是包含更多的内容

When I was writing “Dive Into Python”, all of the available XML libraries sucked.
当我在撰写“深入 Python”的时候，所有可用的 XML 库都很糟糕

Then Fredrik Lundh wrote ElementTree, which doesn’t suck at all.
接着 Fredrik Lundh 编写了非常优秀的 ElementTree

The Python gods wisely incorporated ElementTree into the standard library, and now it forms the basis for my new XML chapter.
Python 的专家们聪明的把 ElementTree 变成了标准库的一部分，然后现在它构成了我的新的 XML 章节的基础

The old ways of parsing XML are still around, but you should avoid them, because they suck!
解析 XML 的那些老的方式仍然可用，但是你应该避免使用它们，因为他们很糟糕

Also new in Python — not in the language but in the community — is the emergence of code repositories like The Python Package Index (PyPI).
除此之外，还有个关于 Python 的新东西 — 不是语言上的，而是社区中的 — 像 Python 包装索引(PyPI)的出现

Python comes with utilities to package your code in standard formats and distribute those packages on PyPI.
Python 提供了实用工具类用来将你的代码打包成标准格式，并分发那些包到 PyPI 中

Read Packaging Python Libraries for details.
阅读 打包 Python 库了解详细信息

© 2001–11 Mark Pilgrim
© 2001–9 Mark Pilgrim

