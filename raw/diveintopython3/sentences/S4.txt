You are here: Home ‣ Dive Into Python 3 ‣
您在这里: 主页 ‣ 深入Python 3 ‣

Difficulty level: ♦♦♢♢♢
难度等级： ♦♦♢♢♢

Comprehensions
解析

❝ Our imagination is stretched to the utmost, not, as in fiction, to imagine things which are not really there, but just to comprehend those things which are.
❝ Our imagination is stretched to the utmost, not, as in fiction, to imagine things which are not really there, but just to comprehend those things which are. ❞ — Richard Feynman

Diving In
深入

Every programming language has that one feature, a complicated thing intentionally made simple.
这一章节将围绕一个非常强大的技术向你介绍列表解析，字典解析和集合解析这三个概念

If you’re coming from another language, you could easily miss it, because your old language didn’t make that thing simple (because it was busy making something else simple instead).
但是，我要先打个岔介绍两个帮助你浏览本地文件系统的模块

Working With Files And Directories
处理文件和目录

Python 3 comes with a module called os, which stands for “operating system.” The os module contains a plethora of functions to get information on — and in some cases, to manipulate — local directories, files, processes, and environment variables.
Python 3 带有一个模块叫做 os，代表 “操作系统(operating system)

Python does its best to offer a unified API across all supported operating systems so your programs can run on any computer with as little platform-specific code as possible.
” os 模块 包含非常多的函数用于获取(和修改)本地目录、文件进程、环境变量等的信息

The Current Working Directory
当前工作目录

When you’re just getting started with Python, you’re going to spend a lot of time in the Python Shell.
当你刚刚开始学习Python的时候， 你将花大量的时间在 Python Shell上

Throughout this book, you will see examples that go like this:
 在整本书中，你将一直看见类似下面的例子:

Import one of the modules in the examples folder
在examples 目录导入某一个模块

Call a function in that module
调用模块的某一个函数

Explain the result
解释输出结果

If you don’t know about the current working directory, step 1 will probably fail with an ImportError.
如果你不知道当前工作目录， 第一步很可能会得到一个ImportError

Why?
 为什么? 因为 Python 将在导入搜索路径中查找示例模块， 但是由于examples 目录没有包含在搜索路径中，查找将失败

Because Python will look for the example module in the import search path, but it won’t find it because the examples folder isn’t one of the directories in the search path.
 你可以通过下面两个方法之一来解决这个问题:

Add the examples folder to the import search path
将examples目录加入到导入搜索路径中

Change the current working directory to the examples folder
将当前工作目录切换到examples目录

The current working directory is an invisible property that Python holds in memory at all times.
Python在任何时候都在暗地里记住了当前工作目录这个属性

There is always a current working directory, whether you’re in the Python Shell, running your own Python script from the command line, or running a Python CGI script on a web server somewhere.
无论你是在Python Shell 中，还是在命令行运行你自己的Python 脚本，抑或是在Web 服务器上运行Python CGI 脚本，当前工作目录总是存在

The os module contains two functions to deal with the current working directory.
os 模块提供了两个函数处理当前工作目录

The os module comes with Python;
os 是Python 自带的; 你可以在任何时间，任何地方导入它

Use the os.getcwd() function to get the current working directory.
使用os.getcwd() 函数获得当前工作目录

When you run the graphical Python Shell, the current working directory starts as the directory where the Python Shell executable is.
当你运行一个图形化的Python Shell 时，当前工作目录默认将是Python Shell的可执行文件所在的目录

On Windows, this depends on where you installed Python;
在Windows 上， 这个目录取决于你将Python安装在哪里; 默认位置是 c:\Python31

the default directory is c:\Python31.
如果你通过命令行运行Python Shell，当前工作目录是你运行python3时所在的目录

Use the os.chdir() function to change the current working directory.
使用os.chdir()函数改变当前工作目录

When I called the os.chdir() function, I used a Linux-style pathname (forward slashes, no drive letter) even though I’m on Windows.
运行os.chdir()函数时，即使在Windows上，我也总是使用Linux风格的路径(正斜杠，没有盘符)

This is one of the places where Python tries to paper over the differences between operating systems.
这就是Python 尝试隐藏操作系统差异的一个地方

Working With Filenames and Directory Names
处理文件名和目录名

While we’re on the subject of directories, I want to point out the os.path module.
既然我们说到了目录，我得指出 os.path 模块

os.path contains functions for manipulating filenames and directory names.
os.path 模块包含了操作文件名和目录名的函数.

The os.path.join() function constructs a pathname out of one or more partial pathnames.
os.path.join() 函数从一个或多个路径片段中构造一个路径名

In this case, it simply concatenates strings.
 在这个例子中， 它仅仅是简单的拼接字符串.

In this slightly less trivial case, calling the os.path.join() function will add an extra slash to the pathname before joining it to the filename.
这个例子稍微复杂一点， 在和文件名拼接前，join函数给路径名添加一个额外的斜杠

It’s a backslash instead of a forward slash, because I constructed this example on Windows.
由于我在Windows 上写这个例子， 这个斜杠是一个反斜杠而不是正斜杠

If you replicate this example on Linux or Mac OS X, you’ll see a forward slash instead.
如果你在Linux 或者Mac OS X上重现这个例子， 你将会看见正斜杠. 无论你使用哪种形式的斜杠，Python 都可以访问到文件

The os.path.expanduser() function will expand a pathname that uses ~ to represent the current user’s home directory.
os.path.expanduser() 用来将包含~符号（表示当前用户Home目录）的路径扩展为完整的路径

This works on any platform where users have a home directory, including Linux, Mac OS X, and Windows.
在任何有Home 目录概念的操作系统上(包括Linux，Mac OS X 和Windows)，这个函数都能工作

The returned path does not have a trailing slash, but the os.path.join() function doesn’t mind.
返回的路径不以斜杠结尾，但是os.path.join()并不介意这一点

Combining these techniques, you can easily construct pathnames for directories and files in the user’s home directory.
结合这些技术，你可以很方便的构造出用户Home 目录下的文件和目录的路径

The os.path.join() function can take any number of arguments.
 os.path.join()可以接受任何数量的参数

I was overjoyed when I discovered this, since addSlashIfNecessary() is one of the stupid little functions I always need to write when building up my toolbox in a new language.
当我发现这一点时我大喜过望， 因为在一门新的语言中构造我的工具箱时，addSlashIfNecessary()总是我不得不写的愚蠢的小函数之一

Do not write this stupid little function in Python;
不要 在Python 中写这个愚蠢的小函数，聪明的人们已经帮你考虑过这个问题了

os.path also contains functions to split full pathnames, directory names, and filenames into their constituent parts.
os.path 也包含用于分割完整路径名，目录名和文件名的函数

The split function splits a full pathname and returns a tuple containing the path and filename.
split 函数分割一个完整路径并返回目录和文件名

Remember when I said you could use multi-variable assignment to return multiple values from a function?
还记得我说过在函数返回多个值时应该使用多变量赋值 吗 ? os.path.split() 函数正是这样做的

The os.path.split() function does exactly that.
 将split函数的返回值赋值给一个二元组

You assign the return value of the split function into a tuple of two variables.
每个变量获得了返回元组中的对应元素的值

The first variable, dirname, receives the value of the first element of the tuple returned from the os.path.split() function, the file path.
第一个变量dirname，获得了os.path.split() 函数返回元组中的第一个元素，文件所在的目录

The second variable, filename, receives the value of the second element of the tuple returned from the os.path.split() function, the filename.
第二个变量filename，获得了os.path.split() 函数返回元组中的第二个元素，文件名

os.path also contains the os.path.splitext() function, which splits a filename and returns a tuple containing the filename and the file extension.
os.path 也包含os.path.splitext() 函数，它分割一个文件名并返回短文件名和扩展名

You use the same technique to assign each of them to separate variables.
可以使用同样的技术将它们的值赋值给不同的变量

Listing Directories
罗列目录内容

The glob module is another tool in the Python standard library.
glob 模块是Python标准库中的另一个工具，它可以通过编程的方法获得一个目录的内容，并且它使用熟悉的命令行下的通配符

The glob module takes a wildcard and returns the path of all files and directories matching the wildcard.
glob 模块接受一个通配符并返回所有匹配的文件和目录的路径

In this example, the wildcard is a directory path plus “*.xml”, which will match all .xml files in the examples subdirectory.
在这个例子中，通配符是一个目录名加上 “*.xml”， 它匹配examples子目录下的所有.xml 文件

Now change the current working directory to the examples subdirectory.
现在我们将当前工作目录切换到examples 目录

The os.chdir() function can take relative pathnames.
 os.chdir() 可以接受相对路径.

You can include multiple wildcards in your glob pattern.
在glob模式中你可以使用多个通配符

This example finds all the files in the current working directory that end in a .py extension and contain the word test anywhere in their filename.
这个例子在当前工作目录中找出所有扩展名为.py并且在文件名中包含单词test 的文件

Getting File Metadata
获取文件元信息

Every modern file system stores metadata about each file: creation date, last-modified date, file size, and so on.
每一个现代文件系统都对文件存储了元信息: 创建时间，最后修改时间，文件大小等等

Python provides a single API to access this metadata.
Python 单独提供了一个的API 用于访问这些元信息

You don’t need to open the file;
 你不需要打开文件

all you need is the filename.
知道文件名就足够了

The current working directory is the examples folder.
当前工作目录是examples 文件夹

feed.xml is a file in the examples folder.
feed.xml是examples 文件夹中的一个文件

Calling the os.stat() function returns an object that contains several different types of metadata about the file.
 调用os.stat() 函数返回一个包含多种文件元信息的对象

st_mtime is the modification time, but it’s in a format that isn’t terribly useful.
st_mtime 是最后修改时间，它的格式不是很有用

(Technically, it’s the number of seconds since the Epoch, which is defined as the first second of January 1st, 1970.
(技术上讲，它是从纪元，也就是1970年1月1号的第一秒钟，到现在的秒数)

The time module is part of the Python standard library.
time 模块是Python标准库的一部分

It contains functions to convert between different time representations, format time values into strings, and fiddle with timezones.
 它包含用于在不同时间格式中转换，将时间格式化成字符串以及处理时区的函数

The time.localtime() function converts a time value from seconds-since-the-Epoch (from the st_mtime property returned from the os.stat() function) into a more useful structure of year, month, day, hour, minute, second, and so on.
time.localtime() 函数将从纪元到现在的秒数这个格式表示的时间(os.stat()函数返回值的st_mtime 属性)转换成更有用的包含年、月、日、小时、分钟、秒的结构体

This file was last modified on July 13, 2009, at around 5:25 PM.
这个文件的最后修改时间是2009年7月13日下午5:25

The os.stat() function also returns the size of a file, in the st_size property.
os.stat() 函数也通过st_size 属性返回文件大小

The file feed.xml is 3070 bytes.
文件feed.xml 的大小是 3070 字节

You can pass the st_size property to the approximate_size() function.
你可以将st_size 属性作为参数传给approximate_size() 函数

Constructing Absolute Pathnames
构造绝对路径

In the previous section, the glob.glob() function returned a list of relative pathnames.
在前一节中，glob.glob() 函数返回一个相对路径的列表

The first example had pathnames like 'examples\feed.xml', and the second example had even shorter relative pathnames like 'romantest1.py'.
第一个例子的路径类似'examples\feed.xml'，而第二个例子的路径'romantest1.py'更短

As long as you stay in the same current working directory, these relative pathnames will work for opening files or getting file metadata.
只要你保持在当前工作目录中，你就可以使用这些相对路径来打开文件或者获得文件的元信息

But if you want to construct an absolute pathname — i.e.
但是当你希望构造一个从根目录开始或者是包含盘符的绝对路径时，你就需要用到os.path.realpath()函数了

List Comprehensions
列表解析

A list comprehension provides a compact way of mapping a list into another list by applying a function to each of the elements of the list.
列表解析提供了一种紧凑的方式，实现了通过对列表中每一个元素应用一个函数的方法来将一个列表映射到另一个列表.

To make sense of this, look at it from right to left.
为了理解这一点，请从右向左看

a_list is the list you’re mapping.
 a_list是你要映射的列表

The Python interpreter loops through a_list one element at a time, temporarily assigning the value of each element to the variable elem.
Python解释器逐个访问a_list的元素，并临时将元素赋值给变量elem

Python then applies the function elem * 2 and appends that result to the returned list.
 然后Python 对元素应用函数elem * 2并且将结果添加到返回列表中

A list comprehension creates a new list;
列表解析创造一个新的列表而不改变原列表

It is safe to assign the result of a list comprehension to the variable that you’re mapping.
可以安全的将列表解析的结果赋值给被映射的变量

Python constructs the new list in memory, and when the list comprehension is complete, it assigns the result to the original variable.
Python会在内存中构造新的列表，在列表解析完成后将结果赋值给原来的变量

You can use any Python expression in a list comprehension, including the functions in the os module for manipulating files and directories.
你可以在列表解析中使用任何的Python表达式， 包括os 模块中用于操作文件和目录的函数

This returns a list of all the .xml files in the current working directory.
这里返回当前目录下的所有.xml 文件

This list comprehension takes that list of .xml files and transforms it into a list of full pathnames.
列表解析接受.xml 文件列表并将其转化成全路径的列表

List comprehensions can also filter items, producing a result that can be smaller than the original list.
列表解析也可以过滤列表，生成比原列表短的结果列表

To filter a list, you can include an if clause at the end of the list comprehension.
你可以在列表解析的最后加入if子句来过滤列表

The expression after the if keyword will be evaluated for each item in the list.
对于列表中每一个元素if 关键字后面的表达式都会被计算

If the expression evaluates to True, the item will be included in the output.
如果表达式的计算结果为True，那么这个元素将会被包含在输出中

This list comprehension looks at the list of all .py files in the current directory, and the if expression filters that list by testing whether the size of each file is greater than 6000 bytes.
这个列表解析在当前目录查找所有.py 文件，而 if 表达式通过测试文件大小是否大于6000字节对列表进行过滤

There are six such files, so the list comprehension returns a list of six filenames.
有6个符合条件的文件，所以这个列表解析返回包含六个文件名的列表

All the examples of list comprehensions so far have featured simple expressions — multiply a number by a constant, call a single function, or simply return the original list item (after filtering).
到目前为止的例子中的列表解析都只是用了一些简单的表达式， 乘以一个常数、调用一个函数或者是在过滤后返回原始元素

But there’s no limit to how complex a list comprehension can be.
 然而列表解析并不限制表达式的复杂程度

This list comprehension finds all the .xml files in the current working directory, gets the size of each file (by calling the os.stat() function), and constructs a tuple of the file size and the absolute path of each file (by calling the os.path.realpath() function).
这个列表解析找到当前工作目录下的所有.xml文件， 对于每一个文件构造一个包含文件大小(通过调用os.stat()获得)和绝对路径(通过调用os.path.realpath())的元组

This comprehension builds on the previous one to call the approximate_size() function with the file size of each .xml file.
这个列表解析在前一个的基础上对每一个.xml文件的大小应用approximate_size()函数

Dictionary Comprehensions
字典解析

A dictionary comprehension is like a list comprehension, but it constructs a dictionary instead of a list.
字典解析和列表解析类似，只不过它生成字典而不是列表

This is not a dictionary comprehension;
这不是字典解析; 而是列表解析

it’s a list comprehension.
它找到所有名称中包含test的.py文件，然后构造包含文件名和文件元信息(通过调用os.stat()函数得到)的元组

Each item of the resulting list is a tuple.
结果列表的每一个元素是元组

This is a dictionary comprehension.
这是一个字典解析

The syntax is similar to a list comprehension, with two differences.
 除了两点以外，它的语法同列表解析很类似

First, it is enclosed in curly braces instead of square brackets.
首先，它被花括号而不是方括号包围; 第二，对于每一个元素它包含由冒号分隔的两个表达式，而不是列表解析的一个

Second, instead of a single expression for each item, it contains two expressions separated by a colon.
冒号前的表达式(在这个例子中是f)是字典的键;冒号后面的表达式(在这个例子中是os.stat(f))是值

A dictionary comprehension returns a dictionary.
字典解析返回结果是字典

The keys of this particular dictionary are simply the filenames returned from the call to glob.glob('*test*.py').
这个字典的键很简单，就是glob.glob('*test*.py')调用返回的文件名

The value associated with each key is the return value from the os.stat() function.
每一个键对应的值是os.stat()函数的返回值

That means we can “look up” a file by name in this dictionary to get its file metadata.
这意味着我们可以在字典中通过文件名查找到它的文件元信息

One of the pieces of metadata is st_size, the file size.
元信息的一个部分是文件大小st_size

The file alphameticstest.py is 2509 bytes long.
这个文件alphameticstest.py 的大小是2509字节

Like list comprehensions, you can include an if clause in a dictionary comprehension to filter the input sequence based on an expression which is evaluated with each item.
同列表解析一样，你可以在字典解析中包含if字句来过滤输入序列，对于每一个元素字句中的表达式都会被求值

This dictionary comprehension constructs a list of all the files in the current working directory (glob.glob('*')), gets the file metadata for each file (os.stat(f)), and constructs a dictionary whose keys are filenames and whose values are the metadata for each file.
这个字典解析获得当前目录下所有的文件的列表(glob.glob('*'))，通过os.stat(f)获得每一个文件的元信息， 然后构造一个键是文件名，值是文件元信息的字典

This dictionary comprehension builds on the previous comprehension, filters out files smaller than 6000 bytes (if meta.st_size > 6000), and uses that filtered list to construct a dictionary whose keys are the filename minus the extension (os.path.splitext(f)[0]) and whose values are the approximate size of each file (humansize.approximate_size(meta.st_size)).
这个字典解析在前一个基础上过滤掉文件小于6000字节的文件(if meta.st_size > 6000)， 并用过滤出的列表构造字典， 字典的键是文件名去掉扩展名的部分(os.path.splitext(f)[0]) ，字典的值是每个文件的人类可读的近似大小(humansize.approximate_size(meta.st_size))

As you saw in a previous example, there are six such files, thus there are six items in this dictionary.
正如你在前一个例子中所看见的，有6个这样的文件，所以字典中有6个元素

The value of each key is the string returned from the approximate_size() function.
每一个键对应的值是approximate_size()函数返回的字符串

Other Fun Stuff To Do With Dictionary Comprehensions
其他同字典解析有关的小技巧

Here’s a trick with dictionary comprehensions that might be useful someday: swapping the keys and values of a dictionary.
这里是一个可能有用的通过字典解析实现的小技巧: 交换字典的键和值

Not to be left out, sets have their own comprehension syntax as well.
同样,集合也有自己的集合解析的语法

It is remarkably similar to the syntax for dictionary comprehensions.
它和字典解析的非常相似，唯一的不同是集合只有值而没有键:值对

Set comprehensions can take a set as input.
集合解析可以接受一个集合作为参数

This set comprehension calculates the squares of the set of numbers from 0 to 9.
这个集合解析计算数字0-9这个集合的的平方

Like list comprehensions and dictionary comprehensions, set comprehensions can contain an if clause to filter each item before returning it in the result set.
同列表解析和字典解析一样， 集合解析也可以包含if 字句来在将元素放入结果集合前进行过滤

Set comprehensions do not need to take a set as input;
集合解析的输入并不一定要是集合; 可以是任何序列

Further Reading
进一步阅读

os module
os module

os — Portable access to operating system specific features
os — Portable access to operating system specific features

os.path module
os.path module

os.path — Platform-independent manipulation of file names
os.path — Platform-independent manipulation of file names

glob module
glob module

glob — Filename pattern matching
glob — Filename pattern matching

time module
time module

time — Functions for manipulating clock time
time — Functions for manipulating clock time

List comprehensions
List comprehensions

Nested list comprehensions
Nested list comprehensions

Looping techniques
Looping techniques

