You are here: Home ‣ Dive Into Python 3 ‣
当前位置: 首页 ‣ 深入 Python 3 ‣

Difficulty level: ♦♦♦♦♢
难度级别： ♦♦♦♦♢

Refactoring
重构

❝ After one has played a vast quantity of notes and more notes, it is simplicity that emerges as the crowning reward of art.
❝ After one has played a vast quantity of notes and more notes, it is simplicity that emerges as the crowning reward of art. ❞ — Frédéric Chopin

Diving In
深入

Like it or not, bugs happen.
就算是竭尽了全力编写全面的单元测试，还是会遇到错误

Despite your best efforts to write comprehensive unit tests, bugs happen.
我所说的“错误”是什么意思

What do I mean by “bug”?
错误是尚未写到的测试实例

This is a bug.
这就是错误

An empty string should raise an InvalidRomanNumeralError exception, just like any other sequence of characters that don’t represent a valid Roman numeral.
和其它无效罗马数字的一系列字符一样，空字符串将引发 InvalidRomanNumeralError 例外

After reproducing the bug, and before fixing it, you should write a test case that fails, thus illustrating the bug.
在重现该错误后，应该在修复前写出一个导致该失败情形的测试实例，这样才能描述该错误

Pretty simple stuff here.
这段代码非常简单

Call from_roman() with an empty string and make sure it raises an InvalidRomanNumeralError exception.
通过传入一个空字符串调用 from_roman() ，并确保其引发一个 InvalidRomanNumeralError 例外

The hard part was finding the bug;
难的是发现错误

now that you know about it, testing for it is the easy part.
找到了该错误之后对它进行测试是件轻松的工作

Since your code has a bug, and you now have a test case that tests this bug, the test case will fail:
由于代码有错误，且有用于测试该错误的测试实例，该测试实例将会导致失败：

Now you can fix the bug.
现在 可以修复该错误了

Only two lines of code are required: an explicit check for an empty string, and a raise statement.
只需两行代码：一行明确地对空字符串进行检查，另一行为 raise 语句

I don’t think I’ve mentioned this yet anywhere in this book, so let this serve as your final lesson in string formatting.
在本书中还尚未提到该内容，因此现在让我们讲讲 字符串格式化 最后一点内容

Starting in Python 3.1, you can skip the numbers when using positional indexes in a format specifier.
从 Python 3.1 起，在格式化标示符中使用位置索引时可以忽略数字

That is, instead of using the format specifier {0} to refer to the first parameter to the format() method, you can simply use {} and Python will fill in the proper positional index for you.
也就是说，无需使用格式化标示符 {0} 来指向 format() 方法的第一个参数，只需简单地使用 {} 而 Python 将会填入正确的位置索引

This works for any number of arguments;
该规则适用于任何数量的参数

the first {} is {0}, the second {} is {1}, and so forth.
第一个 {} 代表 {0}，第二个 {} 代表 {1}，以此类推

The blank string test case now passes, so the bug is fixed.
现在空字符串测试实例通过了测试，也就是说错误被修正了

All the other test cases still pass, which means that this bug fix didn’t break anything else.
所有其它测试实例仍然可以通过，说明该错误修正没有破坏其它部分

Stop coding.
代码编写结束

Coding this way does not make fixing bugs any easier.
用此方式编写代码将使得错误修正变得更困难

Simple bugs (like this one) require simple test cases;
简单的错误（像这个）需要简单的测试实例

complex bugs will require complex test cases.
复杂的错误将会需要复杂的测试实例

In a testing-centric environment, it may seem like it takes longer to fix a bug, since you need to articulate in code exactly what the bug is (to write the test case), then fix the bug itself.
在以测试为中心的环境中，由于必须在代码中精确地描述错误（编写测试实例），然后修正错误本身，看起来 好像 修正错误需要更多的时间

Then if the test case doesn’t pass right away, you need to figure out whether the fix was wrong, or whether the test case itself has a bug in it.
而如果测试实例无法正确地通过，则又需要找出到底是修正方案有错误，还数测试实例本身就有错误

However, in the long run, this back-and-forth between test code and code tested pays for itself, because it makes it more likely that bugs are fixed correctly the first time.
然而从长远看，这种在测试代码和经测试代码之间的来回折腾是值得的，因为这样才更有可能在第一时间修正错误

Also, since you can easily re-run all the test cases along with your new one, you are much less likely to break old code when fixing new code.
同时，由于可以对新代码轻松地重新运行 所有 测试实例，在修正新代码时破坏旧代码的机会更低

Today’s unit test is tomorrow’s regression test.
今天的单元测试就是明天的回归测试

Handling Changing Requirements
控制需求变化

Despite your best efforts to pin your customers to the ground and extract exact requirements from them on pain of horrible nasty things involving scissors and hot wax, requirements will change.
为了获取准确的需求，尽管已经竭力将客户“钉”在原地，并经历了反复剪切、粘贴的痛苦，但需求仍然会变化

Most customers don’t know what they want until they see it, and even if they do, they aren’t that good at articulating what they want precisely enough to be useful.
大多数客户在看到产品之前不知道自己想要什么，而且就算知道，他们也不擅长清晰地表述自己的想法

And even if they do, they’ll want more in the next release anyway.
而即便擅长表述，他们在下一个版本中也会提出更多要求

So be prepared to update your test cases as requirements change.
因此，必须随时准备好更新测试实例以应对需求变化

Suppose, for instance, that you wanted to expand the range of the Roman numeral conversion functions.
举个例子来说，假定我们要扩展罗马数字转换函数的能力范围

Normally, no character in a Roman numeral can be repeated more than three times in a row.
正常情况下，罗马数字中的任何一个字符在同一行中不得重复出现三次以上

But the Romans were willing to make an exception to that rule by having 4 M characters in a row to represent 4000.
但罗马人却愿意该规则有个例外：通过一行中的 4 个 M 字符来代表 4000 

If you make this change, you’ll be able to expand the range of convertible numbers from 1..3999 to 1..4999.
进行该修改后，将会把可转换数字的范围从 1..3999 拓展为 1..4999

But first, you need to make some changes to your test cases.
但首先必须对测试实例进行一些修改

[download roman8.py]
[download roman8.py]

The existing known values don’t change (they’re all still reasonable values to test), but you need to add a few more in the 4000 range.
现有的已知数值不会变（它们依然是合理的测试数值），但必须在 4000 范围之内（外）增加一些

Here I’ve included 4000 (the shortest), 4500 (the second shortest), 4888 (the longest), and 4999 (the largest).
在此，我已经添加了 4000 (最短)、 4500 (第二短)、 4888 (最长) 和 4999 (最大)

The definition of “large input” has changed.
“过大值输入” 的定义已经发生了变化

This test used to call to_roman() with 4000 and expect an error;
该测试用于通过传入 4000 调用 to_roman() 并期望引发一个错误

now that 4000-4999 are good values, you need to bump this up to 5000.
目前 4000-4999 是有效的值，必须将该值调整为 5000 

The definition of “too many repeated numerals” has also changed.
“太多重复数字”的定义也发生了变化

This test used to call from_roman() with 'MMMM' and expect an error;
该测试通过传入 'MMMM' 调用 from_roman() 并预期发生一个错误

now that MMMM is considered a valid Roman numeral, you need to bump this up to 'MMMMM'.
目前 MMMM 被认定为有效的罗马数字，必须将该条件修改为 'MMMMM' 

The sanity check loops through every number in the range, from 1 to 3999.
对范围内的每个数字进行完整循环测试，从 1 到 3999

Since the range has now expanded, this for loop need to be updated as well to go up to 4999.
由于范围已经进行了拓展，该 for 循环同样需要修改为以 4999 为上限

Now your test cases are up to date with the new requirements, but your code is not, so you expect several of the test cases to fail.
现在，测试实例已经按照新的需求进行了更新，但代码还没有，因按照预期，某些测试实例将返回失败结果

The from_roman() known values test will fail as soon as it hits 'MMMM', because from_roman() still thinks this is an invalid Roman numeral.
一旦遇到 'MMMM'，from_roman() 已知值测试将会失败，因为 from_roman() 仍将其视为无效罗马数字

The to_roman() known values test will fail as soon as it hits 4000, because to_roman() still thinks this is out of range.
一旦遇到 4000，to_roman() 已知值测试将会失败，因为 to_roman() 仍将其视为超范围数字

The roundtrip check will also fail as soon as it hits 4000, because to_roman() still thinks this is out of range.
而往返（译注：指在普通数字和罗马数字之间来回转换）检查遇到 4000 时也会失败，因为 to_roman() 仍认为其超范围

Now that you have test cases that fail due to the new requirements, you can think about fixing the code to bring it in line with the test cases.
现在，我们有了一些由新需求导致失败的测试实例，可以考虑修正代码让它与新测试实例一致起来

(When you first start coding unit tests, it might feel strange that the code being tested is never “ahead” of the test cases.
（刚开始编写单元测试的时候，被测试代码绝不会在测试实例“之前”出现确实让人感觉有点怪

While it’s behind, you still have some work to do, and as soon as it catches up to the test cases, you stop coding.
）尽管编码工作被置后安排，但还是不少要做的事情，一旦与测试实例相符，编码工作就可以结束了

After you get used to it, you’ll wonder how you ever programmed without tests.)
一旦习惯单元测试后，您可能会对自己曾在编程时不进行测试感到很奇怪

[download roman9.py]
[download roman9.py]

You don’t need to make any changes to the from_roman() function at all.
根本无需对 from_roman() 函数进行任何修改

The only change is to roman_numeral_pattern.
唯一需要修改的是 roman_numeral_pattern 

If you look closely, you’ll notice that I changed the maximum number of optional M characters from 3 to 4 in the first section of the regular expression.
仔细观察下，将会发现我已经在正则表达式的第一部分中将 M 字符的数量从 3 优化为 4 

This will allow the Roman numeral equivalents of 4999 instead of 3999.
该修改将允许等价于 4999 而不是 3999 的罗马数字

The actual from_roman() function is completely generic;
实际的 from_roman() 函数完全是通用的

it just looks for repeated Roman numeral characters and adds them up, without caring how many times they repeat.
它只查找重复的罗马数字字符并将它们加起来，而不关心它们重复了多少次

The only reason it didn’t handle 'MMMM' before is that you explicitly stopped it with the regular expression pattern matching.
之前无法处理 'MMMM' 的唯一原因是我们通过正则表达式匹配明确地阻止了它这么做

The to_roman() function only needs one small change, in the range check.
to_roman() 函数只需在范围检查中进行一个小改动

Where you used to check 0 < n < 4000, you now check 0 < n < 5000.
将之前检查 0 < n < 4000 的地方现在修改为检查 0 < n < 5000 

And you change the error message that you raise to reflect the new acceptable range (1..4999 instead of 1..3999).
同时修改 引发 的错误信息，以体现新的可接受范围 (1..4999 取代 1..3999) 

You don’t need to make any changes to the rest of the function;
无需对函数剩下部分进行任何修改

it handles the new cases already.
它已经能够应对新的实例

(It merrily adds 'M' for each thousand that it finds;
（它将对找到的每个千位增加 'M' 

given 4000, it will spit out 'MMMM'.
如果给定 4000，它将给出 'MMMM'

The only reason it didn’t do this before is that you explicitly stopped it with the range check.)
之前它不这么做的唯一原因是我们通过范围检查明确地阻止了它

You may be skeptical that these two small changes are all that you need.
所需做的就是这两处小修改，但你可能会有点怀疑

Hey, don’t take my word for it;
嗨，别光听我说，你自己看看吧

All the test cases pass.
所有测试实例均通过了

Stop coding.
代码编写结束

Comprehensive unit testing means never having to rely on a programmer who says “Trust me.”
全面单元测试的意思是：无需依赖某个程序员来说“相信我吧

Refactoring
重构

The best thing about comprehensive unit testing is not the feeling you get when all your test cases finally pass, or even the feeling you get when someone else blames you for breaking their code and you can actually prove that you didn’t.
关于全面单元测试，最美妙的事情不是在所有的测试实例通过后的那份心情，也不是别人抱怨你破坏了代码，而你通过实践 证明 自己没有时的快感

The best thing about unit testing is that it gives you the freedom to refactor mercilessly.
单元测试最美妙之处在于它给了你大刀阔斧进行重构的自由

Refactoring is the process of taking working code and making it work better.
重构是修改可运作代码，使其表现更佳的过程

Usually, “better” means “faster”, although it can also mean “using less memory”, or “using less disk space”, or simply “more elegantly”.
通常，“更佳”指的是“更快”，但它也可能指的是“占用更少内存“、”占用更少磁盘空间“或者”更加简洁”

Whatever it means to you, to your project, in your environment, refactoring is important to the long-term health of any program.
对于你的环境、你的项目来说，无论重构意味着什么，它对程序的长期健康都至关重要

Here, “better” means both “faster” and “easier to maintain.” Specifically, the from_roman() function is slower and more complex than I’d like, because of that big nasty regular expression that you use to validate Roman numerals.
本例中，“更佳”的意思既包括“更快”也包括“更易于维护”

Now, you might think, “Sure, the regular expression is big and hairy, but how else am I supposed to validate that an arbitrary string is a valid a Roman numeral?”
具体而言，因为用于验证罗马数字的正则表达式生涩冗长，该 from_roman() 函数比我所希望的更慢，也更加复杂

Answer: there’s only 5000 of them;
答案是：只针对 5000 个数进行转换

why don’t you just build a lookup table?
为什么不知建立一个查询表呢

This idea gets even better when you realize that you don’t need to use regular expressions at all.
意识到 根本不需要使用正则表达式 之后，这个主意甚至变得更加理想了

As you build the lookup table for converting integers to Roman numerals, you can build the reverse lookup table to convert Roman numerals to integers.
在建立将整数转换为罗马数字的查询表的同时，还可以建立将罗马数字转换为整数的逆向查询表

By the time you need to check whether an arbitrary string is a valid Roman numeral, you will have collected all the valid Roman numerals.
在需要检查任意字符串是否是有效罗马数字的时候，你将收集到所有有效的罗马数字

“Validating” is reduced to a single dictionary lookup.
“验证”工作简化为一个简单的字典查询

And best of all, you already have a complete set of unit tests.
最棒的是，你已经有了一整套单元测试

You can change over half the code in the module, but the unit tests will stay the same.
可以修改模块中一半以上的代码，而单元测试将会保持不变

That means you can prove — to yourself and to others — that the new code works just as well as the original.
这意味着可以向你和其他人证明：新代码运作和最初的一样好

[download roman10.py]
[download roman10.py]

Let’s break that down into digestable pieces.
让我们打断一下，进行一些剖析工作

Arguably, the most important line is the last one:
可以说，最重要的是最后一行：

You will note that is a function call, but there’s no if statement around it.
可以注意到这是一次函数调用，但没有 if 语句包裹住它

This is not an if __name__ == '__main__' block;
这不是 if __name__ == '__main__' 语块

it gets called when the module is imported.
模块被导入时 它将会被调用

(It is important to understand that modules are only imported once, then cached.
（重要的是必须明白：模块将只被导入一次，随后被缓存了

If you import an already-imported module, it does nothing.
如果导入一个已导入模块，将不会导致任何事情发生

So this code will only get called the first time you import this module.)
因此这段代码将只在第一此导入时运行

So what does the build_lookup_tables() function do?
那么，该 build_lookup_tables() 函数究竟进行了哪些操作呢?很高兴你问这个问题

This is a clever bit of programming… perhaps too clever.
这是一段聪明的程序代码……也许过于聪明了

The to_roman() function is defined above;
上面定义了 to_roman() 函数

it looks up values in the lookup table and returns them.
它在查询表中查找值并返回结果

But the build_lookup_tables() function redefines the to_roman() function to actually do work (like the previous examples did, before you added a lookup table).
而 build_lookup_tables() 函数重定义了 to_roman() 函数用于实际操作（像添加查询表之前的例子一样）

Within the build_lookup_tables() function, calling to_roman() will call this redefined version.
在 build_lookup_tables() 函数内部，对 to_roman() 的调用将会针对该重定义的版本

Once the build_lookup_tables() function exits, the redefined version disappears — it is only defined in the local scope of the build_lookup_tables() function.
一旦 build_lookup_tables() 函数退出，重定义的版本将会消失 — 它的定义只在 build_lookup_tables() 函数的作用域内生效

This line of code will call the redefined to_roman() function, which actually calculates the Roman numeral.
该行代码将调用重定义的 to_roman() 函数，该函数实际计算罗马数字

Once you have the result (from the redefined to_roman() function), you add the integer and its Roman numeral equivalent to both lookup tables.
一旦获得结果（从重定义的 to_roman() 函数），可将整数及其对应的罗马数字添加到两个查询表中

Once the lookup tables are built, the rest of the code is both easy and fast.
查询表建好后，剩下的代码既容易又快捷

After doing the same bounds checking as before, the to_roman() function simply finds the appropriate value in the lookup table and returns it.
像前面那样进行同样的边界检查之后，to_roman() 函数只需在查询表中查找并返回适当的值

Similarly, the from_roman() function is reduced to some bounds checking and one line of code.
同样，from_roman() 函数也缩水为一些边界检查和一行代码

No more regular expressions.
不再有正则表达式

No more looping.
不再有循环

O(1) conversion to and from Roman numerals.
O(1) 转换为或转换到罗马数字

But does it work?
但这段代码可以运作吗

Why yes, yes it does.
为什么可以，是的它可以

And I can prove it.
而且我可以证明

Not that you asked, but it’s fast, too!
它不仅能够回答你的问题，还运行得非常快

Like, almost 10× as fast.
好象速度提升了 10 倍

Of course, it’s not entirely a fair comparison, because this version takes longer to import (when it builds the lookup tables).
当然，这种比较并不公平，因为此版本在导入时耗时更长（在建造查询表时）

But since the import is only done once, the startup cost is amortized over all the calls to the to_roman() and from_roman() functions.
但由于只进行一次导入，启动的成本可以由对 to_roman() 和 from_roman() 函数的所有调用摊薄

Since the tests make several thousand function calls (the roundtrip test alone makes 10,000), this savings adds up in a hurry!
由于该测试进行几千次函数调用（来回单独测试上万次），节省出来的效率成本得以迅速提升

The moral of the story?
这个故事的寓意是什么

Simplicity is a virtue.
简单是一种美德

Especially when regular expressions are involved.
特别在涉及到正则表达式的时候

Unit tests can give you the confidence to do large-scale refactoring.
单元测试令你在进行大规模重构时充满自信

Summary
摘要

Unit testing is a powerful concept which, if properly implemented, can both reduce maintenance costs and increase flexibility in any long-term project.
单元测试是一个威力强大的概念，如果正确实施，不但可以降低维护成本，还可以提高长期项目的灵活性

It is also important to understand that unit testing is not a panacea, a Magic Problem Solver, or a silver bullet.
但同时还必须明白：单元测试既不是灵丹妙药，也不是解决问题的魔术，更不是银弹

Writing good test cases is hard, and keeping them up to date takes discipline (especially when customers are screaming for critical bug fixes).
编写良好的测试实例非常艰难，确保它们时刻保持最新必须成为一项纪律（特别在客户要求关键错误修正时）

Unit testing is not a replacement for other forms of testing, including functional testing, integration testing, and user acceptance testing.
单元测试不是功能测试、集成测试或用户承受能力测试等其它测试的替代品

But it is feasible, and it does work, and once you’ve seen it work, you’ll wonder how you ever got along without it.
但它是可行的、行之有效的，见识过其功用后，你将对之前曾没有用它而感到奇怪

These few chapters have covered a lot of ground, and much of it wasn’t even Python-specific.
这几章覆盖的内容很多，很大一部分都不是 Python 所特有的

There are unit testing frameworks for many languages, all of which require you to understand the same basic concepts:
许多语言都有单元测试框架，但所有框架都要求掌握同一基本概念：

Designing test cases that are specific, automated, and independent
设计测试实例是件具体、自动且独立的工作

Writing test cases before the code they are testing
在编写被测试代码 之前 编写测试实例

Writing tests that test good input and check for proper results
编写用于检查好输入并验证正确结果的测试

Writing tests that test bad input and check for proper failure responses
编写用于测试“坏”输入并做出正确失败响应的测试

Writing and updating test cases to reflect new requirements
编写并更新测试实例以反映新的需求

Refactoring mercilessly to improve performance, scalability, readability, maintainability, or whatever other -ility you’re lacking
毫不留情地重构以提升性能、可扩展性、可读性、可维护性及任何缺乏的特性

© 2001–11 Mark Pilgrim
© 2001–9 Mark Pilgrim

