Floating-point numbers are represented in computer hardware as base 2 (binary) fractions.
浮点数在计算机中表达为二进制(binary)小数

For example, the decimal fraction
例如：十进制小数:

has value 1/10 + 2/100 + 5/1000, and in the same way the binary fraction
是 1/10 + 2/100 + 5/1000 的值，同样二进制小数:

has value 0/2 + 0/4 + 1/8.
是 0/2 + 0/4 + 1/8

These two fractions have identical values, the only real difference being that the first is written in base 10 fractional notation, and the second in base 2.
这两个数值相同

Unfortunately, most decimal fractions cannot be represented exactly as binary fractions.
遗憾的是，大多数十进制小数不能精确的表达二进制小数

The problem is easier to understand at first in base 10.
这个问题更早的时候首先在十进制中发现

Consider the fraction 1/3.
考虑小数形式的 1/3，你可以来个十进制的近似值:

or, better,
或者更进一步的:

or, better,
或者更进一步的:

and so on.
诸如此类

No matter how many digits you’re willing to write down, the result will never be exactly 1/3, but will be an increasingly better approximation of 1/3.
如果你写多少位，这个结果永远不是精确的 1/3，但是可以无限接近 1/3

In the same way, no matter how many base 2 digits you’re willing to use, the decimal value 0.1 cannot be represented exactly as a base 2 fraction.
同样，无论在二进制中写多少位，十进制数 0.1 都不能精确表达为二进制小数

In base 2, 1/10 is the infinitely repeating fraction
二进制来表达 1/10 是一个无限循环小数:

Stop at any finite number of bits, and you get an approximation.
在任意无限位数值中中止，你可以得到一个近似值

On a typical machine running Python, there are 53 bits of precision available for a Python float, so the value stored internally when you enter the decimal number 0.1 is the binary fraction
在一个典型的机器上运行 Python，一共有 53 位的精度来表示一个浮点数，所以当你输入十进制的 0.1 的时候，看到是一个二进制的小数:

which is close to, but not exactly equal to, 1/10.
非常接近，但是不完全等于, 1/10.

It’s easy to forget that the stored value is an approximation to the original decimal fraction, because of the way that floats are displayed at the interpreter prompt.
这是很容易忘记，存储的值是一个近似的原小数，由于浮体的方式，显示在提示符的解释

Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine.
Python 中只打印一个小数近似的真实机器所存储的二进制近似的十进制值

If Python were to print the true decimal value of the binary approximation stored for 0.1, it would have to display
如果 Python 要打印存储的二进制近似真实的十进制值 0.1，那就要显示:

That is more digits than most people find useful, so Python keeps the number of digits manageable by displaying a rounded value instead
这么多位的数字对大多数人是没有用的，所以 Python 显示一个舍入的值:

It’s important to realize that this is, in a real sense, an illusion: the value in the machine is not exactly 1/10, you’re simply rounding the display of the true machine value.
认识到这个幻觉的真相很重要：机器不能精确表达 1/10，你可以简单的截断显示真正的机器值

This fact becomes apparent as soon as you try to do arithmetic with these values
这里还有另一个惊奇之处

Note that this is in the very nature of binary floating-point: this is not a bug in Python, and it is not a bug in your code either.
需要注意的是这在二进制浮点数是非常自然的：它不是 Python 的 bug，也不是你的代码的 bug

You’ll see the same kind of thing in all languages that support your hardware’s floating-point arithmetic (although some languages may not display the difference by default, or in all output modes).
你会看到只要你的硬件支持浮点数算法，所有的语言都会有这个现象(尽管有些语言可能默认或完全不 显示 这个差异)

Other surprises follow from this one.
还有其它意想不到的

For example, if you try to round the value 2.675 to two decimal places, you get this
例如，如果你舍入2.675到两位小数，你得到的是:

The documentation for the built-in round() function says that it rounds to the nearest value, rounding ties away from zero.
内置 round() 函数的文档说它舍入到最接近的值

Since the decimal fraction 2.675 is exactly halfway between 2.67 and 2.68, you might expect the result here to be (a binary approximation to) 2.68.
因为小数 2.675 正好是 2.67 和 2.68 的中间，你可能期望这里的结果是（二进制近似为) 2.68

It’s not, because when the decimal string 2.675 is converted to a binary floating-point number, it’s again replaced with a binary approximation, whose exact value is
但是不是的，因为当十进制字符串 2.675 转换为一个二进制浮点数时，它仍然被替换为一个二进制的近似值，其确切的值是:

Since this approximation is slightly closer to 2.67 than to 2.68, it’s rounded down.
因为这个近似值稍微接近 2.67 而不是 2.68，所以向下舍入

If you’re in a situation where you care which way your decimal halfway-cases are rounded, you should consider using the decimal module.
如果你的情况需要考虑十进制的中位数是如何被舍入的，你应该考虑使用 decimal 模块

Incidentally, the decimal module also provides a nice way to “see” the exact value that’s stored in any particular Python float
顺便说一下，decimal 模块还提供了很好的方式可以“看到”任何 Python 浮点数的精确值:

Another consequence is that since 0.1 is not exactly 1/10, summing ten values of 0.1 may not yield exactly 1.0, either:
这个问题在于存储 “0.1” 的浮点值已经达到 1/10 的最佳精度了，所以尝试截断它不能改善：它已经尽可能的好了

Binary floating-point arithmetic holds many surprises like this.
浮点数据算法产生了很多诸如此类的怪异现象

The problem with “0.1” is explained in precise detail below, in the “Representation Error” section.
在 “表现错误” 一节中，这个 “0.1” 问题详细表达了精度问题

See The Perils of Floating Point for a more complete account of other common surprises.
更完整的其它常见的怪异现象请参见 浮点数危害 

As that says near the end, “there are no easy answers.” Still, don’t be unduly wary of floating-point!
Python 浮点数操作的错误来自于浮点数硬件，大多数机器上同类的问题每次计算误差不超过 2**53 分之一

The errors in Python float operations are inherited from the floating-point hardware, and on most machines are on the order of no more than 1 part in 2**53 per operation.
对于大多数任务这已经足够让人满意了

That’s more than adequate for most tasks, but you do need to keep in mind that it’s not decimal arithmetic, and that every float operation can suffer a new rounding error.
但是你要在心中记住这不是十进制算法，每个浮点数计算可能会带来一个新的精度错误

While pathological cases do exist, for most casual use of floating-point arithmetic you’ll see the result you expect in the end if you simply round the display of your final results to the number of decimal digits you expect.
问题已经存在了，对于大多数偶发的浮点数错误，你应该比对最终显示结果是否符合你的期待

For fine control over how a float is displayed see the str.format() method’s format specifiers in Format String Syntax.
str() 通常够用了，完全的控制参见 字符串格式化 中 str.format 方法的格式化方式

14.1.
14.1. 表达错误¶

This section explains the “0.1” example in detail, and shows how you can perform an exact analysis of cases like this yourself.
这一节详细说明 “0.1” 示例，教你怎样自己去精确地分析此类案例

Basic familiarity with binary floating-point representation is assumed.
假设这里你已经对浮点数表示有基本的了解

Representation error refers to the fact that some (most, actually) decimal fractions cannot be represented exactly as binary (base 2) fractions.
Representation error 提及事实上有些(实际是大多数)十进制小数不能精确的表示为二进制小数

This is the chief reason why Python (or Perl, C, C++, Java, Fortran, and many others) often won’t display the exact decimal number you expect:
这是 Python (或 Perl，C，C++，Java，Fortran 以及其它很多)语言往往不能按你期待的样子显示十进制数值的根本原因:

Why is that?
这 是为什么

/10 and 2/10 are not exactly representable as a binary fraction.
1/10 不能精确的表示为二进制小数

Almost all machines today (July 2010) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 “double precision”.
大多数今天的机器(2000 年十一月)使用 IEEE-754 浮点数算法，大多数平台上 Python 将浮点数映射为 IEEE-754 “双精度浮点数”

 doubles contain 53 bits of precision, so on input the computer strives to convert 0.1 to the closest fraction it can of the form J/2**N where J is an integer containing exactly 53 bits.
754 双精度包含 53 位精度，所以计算机努力将输入的 0.1 转为 J/2**N 最接近的二进制小数

Rewriting
J 是一个 53 位的整数

as
为:

and recalling that J has exactly 53 bits (is >= 2**52 but < 2**53), the best value for N is 56:
J 重现时正是 53 位(是 >= 2**52 而非 < 2**53)，N 的最佳值是 56:

That is, 56 is the only value for N that leaves J with exactly 53 bits.
因此，56 是保持 J 精度的唯一 N 值

The best possible value for J is then that quotient rounded:
J 最好的近似值是整除的商:

Since the remainder is more than half of 10, the best approximation is obtained by rounding up:
因为余数大于 10 的一半，最好的近似是取上界:

Therefore the best possible approximation to 1/10 in 754 double precision is that over 2**56, or
因此在 754 双精度中 1/10 最好的近似值是是 2**56，或:

Note that since we rounded up, this is actually a little bit larger than 1/10;
要注意因为我们向上舍入，它其实比 1/10 稍大一点点

if we had not rounded up, the quotient would have been a little bit smaller than 1/10.
如果我们没有向上舍入，它会比 1/10 稍小一点

But in no case can it be exactly 1/10!
但是没办法让它恰好是 1/10

So the computer never “sees” 1/10: what it sees is the exact fraction given above, the best 754 double approximation it can get:
所以计算机永远也不 “知道” 1/10：它遇到上面这个小数，给出它所能得到的最佳的 754 双精度实数:

If we multiply that fraction by 10**30, we can see the (truncated) value of its 30 most significant decimal digits:
如果我们用 10**30 除这个小数，会看到它最大30位(截断后的)的十进制值:

meaning that the exact number stored in the computer is approximately equal to the decimal value 0.100000000000000005551115123125.
这表示存储在计算机中的实际值近似等于十进制值 0.100000000000000005551115123125

In versions prior to Python 2.7 and Python 3.1, Python rounded this value to 17 significant digits, giving ‘0.10000000000000001’.
Python 显示时取 17 位精度为 0

In current versions, Python displays a value based on the shortest decimal fraction that rounds correctly back to the true binary value, resulting simply in ‘0.1’.
10000000000000001(是的，在任何符合 754 的平台上，都会由其C库转换为这个最佳近似——你的可能不一样

