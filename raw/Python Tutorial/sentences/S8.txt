Compared with other programming languages, Python’s class mechanism adds classes with a minimum of new syntax and semantics.
Python 的类机制通过最小的新语法和语义在语言中实现了类

It is a mixture of the class mechanisms found in C++ and Modula-3.
它是 C++ 或者 Modula-3 语言中类机制的混合

Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.
就像模块一样，Python 的类并没有在用户和定义之间设立绝对的屏障，而是依赖于用户不去“强行闯入定义”的优雅

Objects can contain arbitrary amounts and kinds of data.
另一方面，类的大多数重要特性都被完整的保留下来：类继承机制允许多重继承，派生类可以覆盖(override)基类中的任何方法或类，可以使用相同的方法名称调用基类的方法

As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.
对象可以包含任意数量的私有数据

In C++ terminology, normally class members (including the data members) are public (except see below Private Variables and Class-local References), and all member functions are virtual.
用 C++ 术语来讲，所有的类成员(包括数据成员)都是公有( public )的，所有的成员函数都是虚( virtual )的

As in Modula-3, there are no shorthands for referencing the object’s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.
用 Modula-3 的术语来讲，在成员方法中没有简便的方式引用对象的成员：方法函数在定义时需要以引用的对象做为第一个参数，调用时则会隐式引用对象

As in Smalltalk, classes themselves are objects.
像在 Smalltalk 中一个，类也是对象

This provides semantics for importing and renaming.
这就提供了导入和重命名语义

Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.
不像 C++ 和 Modula-3 中那样，大多数带有特殊语法的内置操作符(算法运算符、下标等)都可以针对类的需要重新定义

(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.
在讨论类时，没有足够的得到共识的术语，我会偶尔从 Smalltalk 和 C++ 借用一些

I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)
我比较喜欢用 Modula-3 的用语，因为比起 C++，Python 的面向对象语法更像它，但是我想很少有读者听过这个

9.1.
9.1. 术语相关¶

Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object.
对象具有特性，并且多个名称(在多个作用域中)可以绑定在同一个对象上

This is known as aliasing in other languages.
这在其它语言中被称为别名

This is usually not appreciated on a first glance at Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples).
在对 Python 的第一印象中这通常会被忽略，并且当处理不可变基础类型(数字，字符串，元组)时可以被放心的忽略

However, aliasing has a possibly surprising effect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types.
 但是，在调用列表、字典这类可变对象，或者大多数程序外部类型(文件，窗体等)描述实体时，别名对 Python 代码的语义便具有(有意而为!)影响

This is usually used to the benefit of the program, since aliases behave like pointers in some respects.
这通常有助于程序的优化，因为在某些方面别名表现的就像是指针

For example, passing an object is cheap since only a pointer is passed by the implementation;
 例如，你可以轻易的传递一个对象，因为通过继承只是传递一个指针

and if a function modifies an object passed as an argument, the caller will see the change — this eliminates the need for two different argument passing mechanisms as in Pascal.
并且如果一个方法修改了一个作为参数传递的对象，调用者可以接收这一变化 —— 这消除了两种不同的参数传递机制的需要，像 Pascal 语言

9.2.
9.2. Python 作用域和命名空间¶

Before introducing classes, I first have to tell you something about Python’s scope rules.
在介绍类之前，我首先介绍一些有关 Python 作用域的规则

Class definitions play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what’s going on.
类的定义非常巧妙地运用了命名空间，要完全理解接下来的知识，需要先理解作用域和命名空间的工作原理

Incidentally, knowledge about this subject is useful for any advanced Python programmer.
另外，这一切的知识对于任何高级 Python 程序员都非常有用

Let’s begin with some definitions.
让我们从一些定义说起

A namespace is a mapping from names to objects.
命名空间 是从命名到对象的映射

Most namespaces are currently implemented as Python dictionaries, but that’s normally not noticeable in any way (except for performance), and it may change in the future.
当前命名空间主要是通过 Python 字典实现的，不过通常不关心具体的实现方式(除非出于性能考虑)，以后也有可能会改变其实现方式

Examples of namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names);
以下有一些命名空间的例子：内置命名(像 abs() 这样的函数，以及内置异常名)集，模块中的全局命名，函数调用中的局部命名

the global names in a module;
某种意义上讲对象的属性集也是一个命名空间

and the local names in a function invocation.
关于命名空间需要了解的一件很重要的事就是不同命名空间中的命名没有任何联系，例如两个不同的模块可能都会定义一个名为 maximize 的函数而不会发生混淆－－用户必须以模块名为前缀来引用它们

By the way, I use the word attribute for any name following a dot — for example, in the expression z.real, real is an attribute of the object z.
顺便提一句，我称 Python 中任何一个 “.” 之后的命名为 属性 －－例如，表达式 z.real 中的 real 是对象 z 的一个属性

Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname, modname is a module object and funcname is an attribute of it.
严格来讲，从模块中引用命名是引用属性：表达式 modname.funcname 中，modname 是一个模块对象，funcname 是它的一个属性

In this case there happens to be a straightforward mapping between the module’s attributes and the global names defined in the module: they share the same namespace!
因此，模块的属性和模块中的全局命名有直接的映射关系：它们共享同一命名空间

[1]
[1]

Attributes may be read-only or writable.
属性可以是只读或写的

In the latter case, assignment to attributes is possible.
后一种情况下，可以对属性赋值

Module attributes are writable: you can write modname.the_answer = 42.
你可以这样做：modname.the_answer = 42

Writable attributes may also be deleted with the del statement.
可写的属性也可以用 del 语句删除

For example, del modname.the_answer will remove the attribute the_answer from the object named by modname.
例如：del modname.the_answer 会从 modname 对象中删除 the_answer 属性

Namespaces are created at different moments and have different lifetimes.
不同的命名空间在不同的时刻创建，有不同的生存期

The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.
包含内置命名的命名空间在 Python 解释器启动时创建，会一直保留，不被删除

The global namespace for a module is created when the module definition is read in;
模块的全局命名空间在模块定义被读入时创建，通常，模块命名空间也会一直保存到解释器退出

normally, module namespaces also last until the interpreter quits.
由解释器在最高层调用执行的语句，不管它是从脚本文件中读入还是来自交互式输入，都是 __main__ 模块的一部分，所以它们也拥有自己的命名空间(内置命名也同样被包含在一个模块中，它被称作 __builtin__ )

The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.
当调用函数时，就会为它创建一个局部命名空间，并且在函数返回或抛出一个并没有在函数内部处理的异常时被删除(实际上，用遗忘来形容到底发生了什么更为贴切)

(Actually, forgetting would be a better way to describe what actually happens.) Of course, recursive invocations each have their own local namespace.
 当然，每个递归调用都有自己的局部命名空间

A scope is a textual region of a Python program where a namespace is directly accessible.
作用域 就是一个 Python 程序可以直接访问命名空间的正文区域

“Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.
这里的直接访问意思是一个对名称的错误引用会尝试在命名空间内查找

Although scopes are determined statically, they are used dynamically.
尽管作用域是静态定义，在使用时他们都是动态的

At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:
每次执行时，至少有三个命名空间可以直接访问的作用域嵌套在一起：

If a name is declared global, then all references and assignments go directly to the middle scope containing the module’s global names.
包含局部命名的使用域在最里面，首先被搜索

Otherwise, all variables found outside of the innermost scope are read-only (an attempt to write to such a variable will simply create a new local variable in the innermost scope, leaving the identically named outer variable unchanged).
其次搜索的是中层的作用域，这里包含了同级的函数

Usually, the local scope references the local names of the (textually) current function.
最后搜索最外面的作用域，它包含内置命名

It is important to realize that scopes are determined textually: the global scope of a function defined in a module is that module’s namespace, no matter from where or by what alias the function is called.
首先搜索最内层的作用域，它包含局部命名任意函数包含的作用域，是内层嵌套作用域搜索起点，包含非局部，但是也非全局的命名

A special quirk of Python is that – if no global statement is in effect – assignments to names always go into the innermost scope.
接下来的作用域包含当前模块的全局命名

Class definitions, like function definitions (def statements) must be executed before they have any effect.
通常，局部作用域引用当前函数的命名

(You could conceivably place a class definition in a branch of an if statement, or inside a function.)
在函数之外，局部作用域与全局使用域引用同一命名空间：模块命名空间

In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful — we’ll come back to this later.
重要的是作用域决定于源程序的意义：一个定义于某模块中的函数的全局作用域是该模块的命名空间，而不是该函数的别名被定义或调用的位置，了解这一点非常重要

The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods — again, this is explained later.
另一方面，命名的实际搜索过程是动态的，在运行时确定的——然而，Python 语言也在不断发展，以后有可能会成为静态的“编译”时确定，所以不要依赖动态解析(事实上，局部变量已经是静态确定了

When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace.
Python 的一个特别之处在于 —— 如果没有使用 global 语法 —— 其赋值操作总是在最里层的作用域

In particular, function definitions bind the name of the new function here.
赋值不会复制数据 —— 只是将命名绑定到对象

Class objects support two kinds of operations: attribute references and instantiation.
类引入了一些新语法：三种新的对象类型和一些新的语义

Class instantiation uses function notation.
类定义最简单的形式如下:

creates a new instance of the class and assigns this object to the local variable x.
类的定义就像函数定义( def 语句)，要先执行才能生效(你当然可以把它放进 if 语句的某一分支，或者一个函数的内部

The instantiation operation (“calling” a class object) creates an empty object.
习惯上，类定义语句的内容通常是函数定义，不过其它语句也可以，有时会很有用——后面我们再回过头来讨论

Many classes like to create objects with instances customized to a specific initial state.
类中的函数定义通常包括了一个特殊形式的参数列表，用于方法调用约定——同样我们在后面讨论这些

When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance.
进入类定义部分后，会创建出一个新的命名空间，作为局部作用域——因此，所有的赋值成为这个新命名空间的局部变量

So in this example, a new, initialized instance can be obtained by:
特别是函数定义在此绑定了新的命名

Of course, the __init__() method may have arguments for greater flexibility.
类定义完成时(正常退出)，就创建了一个 类对象

In that case, arguments given to the class instantiation operator are passed on to __init__().
基本上它是对类定义创建的命名空间进行了一个包装

For example,
我们在下一节进一步学习类对象的知识

9.3.3.
9.3.2. 类对象¶

Now what can we do with instance objects?
类对象支持两种操作：属性引用和实例化

data attributes correspond to “instance variables” in Smalltalk, and to “data members” in C++.
属性引用 使用和 Python 中所有的属性引用一样的标准语法：obj.name

Data attributes need not be declared;
类对象创建后，类命名空间中所有的命名都是有效属性名

like local variables, they spring into existence when they are first assigned to.
所以如果类定义是这样:

The other kind of instance attribute reference is a method.
那么 MyClass.i 和 MyClass.f 是有效的属性引用，分别返回一个整数和一个方法对象

A method is a function that “belongs to” an object.
也可以对类属性赋值，你可以通过给 MyClass.i 赋值来修改它

(In Python, the term method is not unique to class instances: other object types can have methods as well.
__doc__ 也是一个有效的属性，返回类的文档字符串："A simple example class"

Valid method names of an instance object depend on its class.
类的 实例化 使用函数符号

By definition, all attributes of a class that are function objects define corresponding methods of its instances.
只要将类对象看作是一个返回新的类实例的无参数函数即可，例如(假设沿用前面的类):

In the MyClass example, this will return the string 'hello world'.
这个实例化操作(“调用”一个类对象)来创建一个空的对象

However, it is not necessary to call a method right away: x.f is a method object, and can be stored away and called at a later time.
很多类都倾向于将对象创建为有初始状态的

For example:
因此类可能会定义一个名为 __init__() 的特殊方法，像下面这样:

will continue to print hello world until the end of time.
类定义了 __init__() 方法的话，类的实例化操作会自动为新创建的类实例调用 __init__() 方法

What exactly happens when a method is called?
当然，出于弹性的需要，__init__() 方法可以有参数

You may have noticed that x.f() was called without an argument above, even though the function definition for f() specified an argument.
事实上，参数通过 __init__() 传递到类的实例化操作上

What happened to the argument?
例如:

As discussed in A Word About Names and Objects, shared data can have possibly surprising effects with involving mutable objects such as lists and dictionaries.
数据属性 相当于 Smalltalk 中的“实例变量”或 C++ 中的“数据成员”

For example, the tricks list in the following code should not be used as a class variable because just a single list would be shared by all Dog instances:
和局部变量一样，数据属性不需要声明，第一次使用时它们就会生成

Correct design of the class should use an instance variable instead:
另一种为实例对象所接受的引用属性是 方法 

There is no shorthand for referencing data attributes (or other methods!) from within methods.
通常，方法通过右绑定方式调用:

Often, the first argument of a method is called self.
在 MyClass 示例中，这会返回字符串 'hello world'

This is nothing more than a convention: the name self has absolutely no special meaning to Python.
然而，也不是一定要直接调用方法

Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.
x.f 是一个方法对象，它可以存储起来以后调用

Any function object that is a class attribute defines a method for instances of that class.
会不断的打印 hello world

Now f, g and h are all attributes of class C that refer to function objects, and consequently they are all methods of instances of C — h being exactly equivalent to g.
调用方法时发生了什么

Note that this practice usually only serves to confuse the reader of a program.
你可能注意到调用 x.f() 时没有引用前面标出的变量，尽管在 f() 的函数定义中指明了一个参数

Methods may call other methods by using method attributes of the self argument:
实际上，你可能已经猜到了答案：方法的特别之处在于实例对象作为函数的第一个参数传给了函数

Methods may reference global names in the same way as ordinary functions.
如果你还是不理解方法的工作原理，了解一下它的实现也许有帮助

The global scope associated with a method is the module containing its definition.
引用非数据属性的实例属性时，会搜索它的类

(A class is never used as a global scope.) While one rarely encounters a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as functions and classes defined in it.
如果这个命名确认为一个有效的函数对象类属性，就会将实例对象和函数对象封装进一个抽象对象：这就是方法对象

Usually, the class containing the method is itself defined in this global scope, and in the next section we’ll find some good reasons why a method would want to reference its own class.
以一个参数列表调用方法对象时，它被重新拆 封，用实例对象和原始的参数列表构造一个新的参数列表，然后函数对象调用这个新的参数列表

Of course, a language feature would not be worthy of the name “class” without supporting inheritance.
一般来说，实例变量用于对每一个实例都是唯一的数据，类变量用于类的所有实例共享的属性和方法:

The name BaseClassName must be defined in a scope containing the derived class definition.
正如在 术语相关 讨论的， 可变 对象，例如列表和字典，的共享数据可能带来意外的效果

In place of a base class name, other arbitrary expressions are also allowed.
例如，下面代码中的 tricks 列表不应该用作类变量，因为所有的 Dog 实例将共享同一个列表:

Execution of a derived class definition proceeds the same as for a base class.
这个类的正确设计应该使用一个实例变量:

An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name.
数据属性会覆盖同名的方法属性

There is a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments).
为了避免意外的名称冲突，这在大型程序中是极难发现的 Bug，使用一些约定来减少冲突的机会是明智的

This is occasionally useful to clients as well.
可能的约定包括：大写方法名称的首字母，使用一个唯一的小字符串(也许只是一个下划线)作为数据属性名称的前缀，或者方法使用动词而数据属性使用名词

Python has two built-in functions that work with inheritance:
数据属性可以被方法引用，也可以由一个对象的普通用户(客户)使用

For old-style classes, the only rule is depth-first, left-to-right.
从方法内部引用数据属性(或其他方法)并没有快捷方式

Thus, if an attribute is not found in DerivedClassName, it is searched in Base1, then (recursively) in the base classes of Base1, and only if it is not found there, it is searched in Base2, and so on.
我觉得这实际上增加了方法的可读性：当浏览一个方法时，在局部变量和实例变量之间不会出现令人费解的情况

(To some people breadth first — searching Base2 and Base3 before the base classes of Base1 — looks more natural.
一般，方法的第一个参数被命名为 self

However, this would require you to know whether a particular attribute of Base1 is actually defined in Base1 or in one of its base classes before you can figure out the consequences of a name conflict with an attribute of Base2.
这仅仅是一个约定：对 Python 而言，名称 self 绝对没有任何特殊含义(但是请注意：如果不遵循这个约定，对其他的 Python 程序员而言你的代码可读性就会变差，而且有些类查看器程序也可能是遵循此约定编写的

The depth-first rule makes no differences between direct and inherited attributes of Base1.)
)

For new-style classes, the method resolution order changes dynamically to support cooperative calls to super().
类属性的任何函数对象都为那个类的实例定义了一个方法

This approach is known in some other multiple-inheritance languages as call-next-method and is more powerful than the super call found in single-inheritance languages.
函数定义代码不一定非得定义在类中：也可以将一个函数对象赋值给类中的一个局部变量

With new-style classes, dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class).
现在 f, g 和 h 都是类 C 的属性，引用的都是函数对象，因此它们都是 C 实例的方法，h 严格等于 g 

For example, all new-style classes inherit from object, so any case of multiple inheritance provides more than one path to reach object.
要注意的是这种习惯通常只会迷惑程序的读者

Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called name mangling.
方法可以像引用普通的函数那样引用全局命名

Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped.
与方法关联的全局作用域是包含类定义的模块(类本身永远不会做为全局作用域使用)

This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.
尽管很少有好的理由在方法中使用全局数据，全局作用域确有很多合法的用途：其一是方法可以调用导入全局作用域的函数和方法，也可以调用定义在其中的类和函数

Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls.
每个值都是一个对象，因此每个值都有一个 类( class )，也称为它的类型( type )，它存储为 object.__class__

A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead.
命名 BaseClassName (示例中的基类名)必须与派生类定义在一个作用域内

For instance, if you have a function that formats some data from a file object, you can define a class with methods read() and readline() that get the data from a string buffer instead, and pass it as an argument.
除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:

Instance method objects have attributes, too: m.im_self is the instance object with the method m(), and m.im_func is the function object corresponding to the method.
派生类定义的执行过程和基类是一样的

There are two new valid (semantic) forms for the raise statement:
派生类可能会覆盖其基类的方法

In the first form, instance must be an instance of Class or of a class derived from it.
派生类中的覆盖方法可能是想要扩充而不是简单的替代基类中的重名方法

The second form is a shorthand for:
有一个简单的方法可以直接调用基类方法，只要调用：BaseClassName.methodname(self, arguments)

A class in an except clause is compatible with an exception if it is the same class or a base class thereof (but not the other way around — an except clause listing a derived class is not compatible with a base class).
Python 有两个用于继承的函数：

Note that if the except clauses were reversed (with except B first), it would have printed B, B, B — the first matching except clause is triggered.
函数 isinstance() 用于检查实例类型：isinstance(obj, int) 只有在 obj.__class__ 是 int 或其它从 int 继承的类型

When an error message is printed for an unhandled exception, the exception’s class name is printed, then a colon and a space, and finally the instance converted to a string using the built-in function str().
函数 issubclass() 用于检查类继承：issubclass(bool, int) 为 True，因为 bool 是 int 的子类

Anything that can be done with generators can also be done with class-based iterators as described in the previous section.
对于旧风格的类，唯一的规则是深度优先，从左到右

What makes generators so compact is that the __iter__() and next() methods are created automatically.
因此，如果在 DerivedClassName 中找不到属性，它搜索 Base1，然后（递归）基类中的 Base1，只有没有找到，它才会搜索 Base2，依此类推

Another key feature is that the local variables and execution state are automatically saved between calls.
（对某些人，广度优先——在搜索 Base1 的基类之前先搜索 Base2 和 Base3 ——看起来更自然

This made the function easier to write and much more clear than an approach using instance variables like self.index and self.data.
然而，在你能弄明白与 Base2 中的一个属性名称冲突的后果之前，你需要知道 Base1 的某个特定属性实际上是定义在 Base1 的还是在其某个基类中的

In addition to automatic method creation and saving program state, when generators terminate, they automatically raise StopIteration.
对于 新风格的类，方法的解析顺序动态变化地支持合作对 super() 的调用

In combination, these features make it easy to create iterators with no more effort than writing a regular function.
这种方法在某些其它多继承的语言中也有并叫做 call-next-method，它比单继承语言中的super调用更强大

8.
因为有一个正当的类私有成员用途(即避免子类里定义的命名与之冲突)，Python 提供了对这种结构的有限支持，称为 name mangling (命名编码) 

Errors and Exceptions
任何形如 __spam 的标识(前面至少两个下划线，后面至多一个)，被替代为 _classname__spam ，去掉前导下划线的 classname 即当前的类名

Enter search terms or a module, class or function name.
要注意的是代码传入 exec， eval() 或 execfile() 时不考虑所调用的类的类名，视其为当前类，这类似于 global 语句的效应，已经按字节编译的部分也有同样的限制

