There are several ways to present the output of a program;
一个程序可以有几种输出方式：以人类可读的方式打印数据，或者写入一个文件供以后使用

data can be printed in a human-readable form, or written to a file for future use.
本章将讨论几种可能性

7.1.
7.1. 格式化输出¶

So far we’ve encountered two ways of writing values: expression statements and the print statement.
我们有两种大相径庭的输出值方法：表达式语句和 print 语句

(A third way is using the write() method of file objects;
(第三种方法是使用文件对象的 write() 方法，标准文件输出可以参考 sys.stdout，详细内容参见库参考手册

the standard output file can be referenced as sys.stdout.
)

Often you’ll want more control over the formatting of your output than simply printing space-separated values.
通常，你想要对输出做更多的格式控制，而不是简单的打印使用空格分隔的值

There are two ways to format your output;
有两种方法可以格式化你的输出：第一种方法是由你自己处理整个字符串，通过使用字符串切割和连接操作可以创建任何你想要的输出形式

the first way is to do all the string handling yourself;
string 类型包含一些将字符串填充到指定列宽度的有用操作，随后就会讨论这些

using string slicing and concatenation operations you can create any layout you can imagine.
第二种方法是使用 str.format() 方法

The string module contains a Template class which offers yet another way to substitute values into strings.
标准模块 string 包括了一些操作，将字符串填充入给定列时，这些操作很有用

One question remains, of course: how do you convert values to strings?
当然，还有一个问题，如何将值转化为字符串

Luckily, Python has ways to convert any value to a string: pass it to the repr() or str() functions.
很幸运，Python 有办法将任意值转为字符串：将它传入 repr() 或 str() 函数

The str() function is meant to return representations of values which are fairly human-readable, while repr() is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax).
函数 str() 用于将值转化为适于人阅读的形式，而 repr() 转化为供解释器读取的形式(如果没有等价的语法，则会发生 SyntaxError 异常)某对象没有适于人阅读的解释形式的话，str() 会返回与 repr() 等同的值

For objects which don’t have a particular representation for human consumption, str() will return the same value as repr().
很多类型，诸如数值或链表、字典这样的结构，针对各函数都有着统一的解读方式

Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function.
字符串和浮点数，有着独特的解读方式

Some examples:
下面有些例子:

Here are two ways to write a table of squares and cubes:
有两种方式可以写平方和立方表:

(Note that in the first example, one space between each column was added by the way print works: it always adds spaces between its arguments.)
(注意第一个例子，print 在每列之间加了一个空格，它总是在参数间加入空格

This example demonstrates the str.rjust() method of string objects, which right-justifies a string in a field of a given width by padding it with spaces on the left.
以上是一个 str.rjust() 方法的演示，它把字符串输出到一列，并通过向左侧填充空格来使其右对齐

There are similar methods str.ljust() and str.center().
类似的方法还有 str.ljust() 和 str.center()

These methods do not write anything, they just return a new string.
这些函数只是输出新的字符串，并不改变什么

If the input string is too long, they don’t truncate it, but return it unchanged;
如果输出的字符串太长，它们也不会截断它，而是原样输出，这会使你的输出格式变得混乱，不过总强过另一种选择(截断字符串)，因为那样会产生错误的输出值(如果你确实需要截断它，可以使用切割操作，例如：x.ljust(n)[:n]）

There is another method, str.zfill(), which pads a numeric string on the left with zeros.
还有另一个方法，str.zfill() 它用于向数值的字符串表达左侧填充 0

It understands about plus and minus signs:
该函数可以正确理解正负号:

Basic usage of the str.format() method looks like this:
方法 str.format() 的基本用法如下:

The brackets and characters within them (called format fields) are replaced with the objects passed into the str.format() method.
大括号和其中的字符会被替换成传入 str.format() 的参数

A number in the brackets refers to the position of the object passed into the str.format() method.
大括号中的数值指明使用传入 str.format() 方法的对象中的哪一个:

If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.
如果在 str.format() 调用时使用关键字参数，可以通过参数名来引用值:

Positional and keyword arguments can be arbitrarily combined:
定位和关键字参数可以组合使用:

'!s' (apply str()) and '!r' (apply repr()) can be used to convert the value before it is formatted.
'!s' (应用 str() )和 '!r' (应用 repr())可以在格式化之前转换值:

An optional ':' and format specifier can follow the field name.
字段名后允许可选的 ':' 和格式指令

This allows greater control over how the value is formatted.
这允许对值的格式化加以更深入的控制

The following example rounds Pi to three places after the decimal.
下例将 Pi 转为三位精度

Passing an integer after the ':' will cause that field to be a minimum number of characters wide.
在字段后的 ':' 后面加一个整数会限定该字段的最小宽度，这在美化表格时很有用:

If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position.
如果你有个实在是很长的格式化字符串，不想分割它

This can be done by simply passing the dict and using square brackets '[]' to access the keys
如果你可以用命名来引用被格式化的变量而不是位置就好了

This could also be done by passing the table as keyword arguments with the ‘**’ notation.
也可以用 ‘**’ 标志将这个字典以关键字参数的方式传入:

This is particularly useful in combination with the built-in function vars(), which returns a dictionary containing all local variables.
这种方式与新的内置函数 vars() 组合使用非常有效

For a complete overview of string formatting with str.format(), see Format String Syntax.
要进一步了解字符串格式化方法 str.format()，参见 Format String Syntax

7.1.1.
7.1.1. 旧式的字符串格式化¶

The % operator can also be used for string formatting.
操作符 % 也可以用于字符串格式化

It interprets the left argument much like a sprintf()-style format string to be applied to the right argument, and returns the string resulting from this formatting operation.
它以类似 sprintf()-style 的方式解析左参数，将右参数应用于此，得到格式化操作生成的字符串，例如:

More information can be found in the String Formatting Operations section.
进一步的信息可以参见 String Formatting Operations 一节

7.2.
7.2. 文件读写¶

open() returns a file object, and is most commonly used with two arguments: open(filename, mode).
函数 open() 返回文件对象，通常的用法需要两个参数：open(filename, mode)

The first argument is a string containing the filename.
第一个参数是一个标识文件名的字符串

The second argument is another string containing a few characters describing the way in which the file will be used.
第二个参数是由有限的字母组成的字符串，描述了文件将会被如何使用

mode can be 'r' when the file will only be read, 'w' for only writing (an existing file with the same name will be erased), and 'a' opens the file for appending;
可选的 模式 有：'r'，此选项使文件只读

any data written to the file is automatically added to the end.
'w'，此选项使文件只写(对于同名文件，该操作使原有文件被覆盖)

'r+' opens the file for both reading and writing.
'a'，此选项以追加方式打开文件

The mode argument is optional;
'r+'，此选项以读写方式打开文件

'r' will be assumed if it’s omitted.
模式参数是可选的

On Windows, 'b' appended to the mode opens the file in binary mode, so there are also modes like 'rb', 'wb', and 'r+b'.
在 Windows 平台上，'b' 模式以二进制方式打开文件，所以可能会有类似于 'rb'， 'wb'， 'r+b' 等等模式组合

Python on Windows makes a distinction between text and binary files;
Windows 平台上文本文件与二进制文件是有区别的，读写文本文件时，行尾会自动添加行结束符

the end-of-line characters in text files are automatically altered slightly when data is read or written.
这种后台操作方式对 ASCII 文本文件没有什么问题，但是操作 JPEG 或 EXE 这样的二进制文件时就会产生破坏

This behind-the-scenes modification to file data is fine for ASCII text files, but it’ll corrupt binary data like that in JPEG or EXE files.
在操作这些文件时一定要记得以二进制模式打开

Be very careful to use binary mode when reading and writing such files.
在 Unix 上，加一个 'b' 模式也一样是无害的，所以你可以一切二进制文件处理中平台无关的使用它

7.2.1.
7.2.1. 文件对象方法¶

The rest of the examples in this section will assume that a file object called f has already been created.
本节中的示例都默认文件对象 f 已经创建

To read a file’s contents, call f.read(size), which reads some quantity of data and returns it as a string.
要读取文件内容，需要调用 f.read(size)，该方法读取若干数量的数据并以字符串形式返回其内容，size 是可选的数值，指定字符串长度

size is an optional numeric argument.
如果没有指定 size 或者指定为负数，就会读取并返回整个文件

When size is omitted or negative, the entire contents of the file will be read and returned;
当文件大小为当前机器内存两倍时，就会产生问题

it’s your problem if the file is twice as large as your machine’s memory.
反之，会尽可能按比较大的 size 读取和返回数据

Otherwise, at most size bytes are read and returned.
如果到了文件末尾，f.read() 会返回一个空字符串( ”“ ):

f.readline() reads a single line from the file;
f.readline() 从文件中读取单独一行，字符串结尾会自动加上一个换行符( \n )，只有当文件最后一行没有以换行符结尾时，这一操作才会被忽略

a newline character (\n) is left at the end of the string, and is only omitted on the last line of the file if the file doesn’t end in a newline.
这样返回值就不会有混淆，如果如果 f.readline() 返回一个空字符串，那就表示到达了文件末尾，如果是一个空行，就会描述为 '\n'，一个只包含换行符的字符串:

For reading lines from a file, you can loop over the file object.
f.readlines() 返回一个列表，其中包含了文件中所有的数据行

This is memory efficient, fast, and leads to simple code:
如果给定了 sizehint 参数，就会读入多于一行的比特数，从中返回多行文本

If you want to read all the lines of a file in a list you can also use list(f) or f.readlines().
一种替代的方法是通过遍历文件对象来读取文件行

f.write(string) writes the contents of string to the file, returning None.
虽然这种替代方法更简单，但并不具备细节控制能力

To write something other than a string, it needs to be converted to a string first:
f.write(string) 方法将 string 的内容写入文件，并返回写入字符的长度:

f.tell() returns an integer giving the file object’s current position in the file, measured in bytes from the beginning of the file.
想要写入其他非字符串内容，首先要将它转换为字符串:

When you’re done with a file, call f.close() to close it and free up any system resources taken up by the open file.
f.tell() 返回一个整数，代表文件对象在文件中的指针位置，该数值计量了自文件开头到指针处的比特数

After calling f.close(), attempts to use the file object will automatically fail.
需要改变文件对象指针话话，使用 f.seek(offset,from_what)

It is good practice to use the with keyword when dealing with file objects.
在文本文件中(那些没有使用 b 模式选项打开的文件)，只允许从文件头开始计算相对位置(使用 seek(0, 2) 从文件尾计算时就会引发异常)

File objects have some additional methods, such as isatty() and truncate() which are less frequently used;
当你使用完一个文件时，调用 f.close() 方法就可以关闭它并释放其占用的所有系统资源

consult the Library Reference for a complete guide to file objects.
在调用 f.close() 方法后，试图再次使用文件对象将会自动失败:

Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation).
文件对象还有一些不太常用的附加方法，比如 isatty() 和 truncate() 在库参考手册中有文件对象的完整指南

If you have an object x, you can view its JSON string representation with a simple line of code:
从文件中读写字符串很容易

Another variant of the dumps() function, called dump(), simply serializes the object to a file.
好在用户不是非得自己编写和调试保存复杂数据类型的代码，Python 允许你使用常用的数据交换格式 JSON（JavaScript Object Notation）

So if f is a file object opened for writing, we can do this:
标准模块 json 可以接受 Python 数据结构，并将它们转换为字符串表示形式

To decode the object again, if f is a file object which has been opened for reading:
Note

This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort.
JSON 格式经常用于现代应用程序中进行数据交换

The reference for the json module contains an explanation of this.
许多程序员都已经熟悉它了，使它成为相互协作的一个不错的选择

See also
如果你有一个对象 x，你可以用简单的一行代码查看其 JSON 字符串表示形式:

pickle - the pickle module
dumps() 函数的另外一个变体 dump()，直接将对象序列化到一个文件

Contrary to JSON, pickle is a protocol which allows the serialization of arbitrarily complex Python objects.
为了重新解码对象，如果f是为读取而打开的 文件对象:

