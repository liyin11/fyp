This chapter describes some things you’ve learned about already in more detail, and adds some new things as well.
本章详细讨论了你已经学过的一些知识，同样也添加了一些新内容

5.1.
5.1. 关于列表更多的内容¶

The list data type has some more methods.
Python 的列表数据类型包含更多的方法

Here are all of the methods of list objects:
这里是所有的列表对象方法：

Add an item to the end of the list;
把一个元素添加到链表的结尾，相当于 a[len(a):] = [x]

Extend the list by appending all the items in the given list;
将一个给定列表中的所有元素都添加到另一个列表中，相当于 a[len(a):] = L

Insert an item at a given position.
在指定位置插入一个元素

The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).
第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个链表之前，而 a.insert(len(a), x) 相当于 a.append(x)

Remove the first item from the list whose value is x.
删除链表中值为 x 的第一个元素

It is an error if there is no such item.
如果没有这样的元素，就会返回一个错误

Remove the item at the given position in the list, and return it.
从链表的指定位置删除元素，并将其返回

If no index is specified, a.pop() removes and returns the last item in the list.
如果没有指定索引，a.pop() 返回最后一个元素

(The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position.
元素随即从链表中被删除

You will see this notation frequently in the Python Library Reference.)
(方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记

Return the index in the list of the first item whose value is x.
返回链表中第一个值为 x 的元素的索引

It is an error if there is no such item.
如果没有匹配的元素就会返回一个错误

Return the number of times x appears in the list.
返回 x 在链表中出现的次数

Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
对链表中的元素就地进行排序（参数可以用来自定义排序方法，参考 sorted() 的更详细的解释）

Reverse the elements of the list, in place.
就地倒排链表中的元素

An example that uses most of the list methods:
下面这个示例演示了链表的大部分方法:

You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed – they return the default None.
也许大家会发现像 insert， remove 或者 sort 这些修改列表的方法没有打印返回值 –它们返回 None

[1] This is a design principle for all mutable data structures in Python.
[1] 在 python 中对所有可变的数据类型这是统一的设计原则

5.1.1.
5.1.1. 把链表当作堆栈使用¶

The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”).
链表方法使得链表可以很方便的做为一个堆栈来使用，堆栈作为特定的数据结构，最先进入的元素最后一个被释放(后进先出)

To add an item to the top of the stack, use append().
用 append() 方法可以把一个元素添加到堆栈顶

To retrieve an item from the top of the stack, use pop() without an explicit index.
用不指定索引的 pop() 方法可以把一个元素从堆栈顶释放出来

For example:
例如:

5.1.2.
5.1.2. 把链表当作队列使用¶

It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”);
你也可以把链表当做队列使用，队列作为特定的数据结构，最先进入的元素最先释放(先进先出)

however, lists are not efficient for this purpose.
不过，列表这样用效率不高

While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).
相对来说从列表末尾添加和弹出很快

To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends.
要实现队列，使用 collections.deque，它为在首尾两端快速插入和删除而设计

For example:
例如:

5.1.3.
5.1.3. 函数式编程工具¶

There are three built-in functions that are very useful when used with lists: filter(), map(), and reduce().
对于链表来讲，有三个内置函数非常有用: filter()，map() 以及 reduce()

filter(function, sequence) returns a sequence consisting of those items from the sequence for which function(item) is true.
filter(function, sequence) 返回一个 sequence(序列)，包括了给定序列中所有调用 function(item) 后返回值为 true 的元素(如果可能的话，会返回相同的类型)

If sequence is a str, unicode or tuple, the result will be of the same type;
如果该 序列 (sequence)是一个 str, unicode 或者 tuple，返回值必定是同一类型，否则，它总是 list

otherwise, it is always a list.
例如，以下程序可以计算一个被 3 或者 5 整除的序列:

map(function, sequence) calls function(item) for each of the sequence’s items and returns a list of the return values.
map(function, sequence) 为每一个元素依次调用 function(item) 并将返回值组成一个链表返回

For example, to compute some cubes:
例如，以下程序计算立方:

More than one sequence may be passed;
可以传入多个序列，函数也必须要有对应数量的参数，执行时会依次用各序列上对应的元素来调用函数(如果某些序列比其它的短，就用 None 来代替)

the function must then have as many arguments as there are sequences and is called with the corresponding item from each sequence (or None if some sequence is shorter than another).
如果把 None 做为一个函数传入，则直接返回参数做为替代

For example:
例如:

reduce(function, sequence) returns a single value constructed by calling the binary function function on the first two items of the sequence, then on the result and the next item, and so on.
reduce(function, sequence) 返回一个单值，它是这样构造的：首先以序列的前两个元素调用函数 function，再以返回值和第三个参数调用，依次执行下去

For example, to compute the sum of the numbers 1 through 10:
例如，以下程序计算 1 到 10 的整数之和:

If there’s only one item in the sequence, its value is returned;
如果序列中只有一个元素，就返回它，如果序列是空的，就抛出一个异常

A third argument can be passed to indicate the starting value.
可以传入第三个参数作为初始值

In this case the starting value is returned for an empty sequence, and the function is first applied to the starting value and the first sequence item, then to the result and the next item, and so on.
如果序列是空的，就返回初始值，否则函数会先接收初始值和序列的第一个元素，然后是返回值和下一个元素，依此类推

For example,
例如:

Don’t use this example’s definition of sum(): since summing numbers is such a common need, a built-in function sum(sequence) is already provided, and works exactly like this.
不要像示例中这样定义 sum()：因为合计数值是一个通用的需求，早已有内置的 sum(sequence) 函数，非常好用

5.1.4.
5.1.4. 列表推导式¶

List comprehensions provide a concise way to create lists.
列表推导式为从序列中创建列表提供了一个简单的方法

Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.
普通的应用程序通过将一些操作应用于序列的每个成员并通过返回的元素创建列表，或者通过满足特定条件的元素创建子序列

For example, assume we want to create a list of squares, like:
例如，假设我们创建一个 squares 列表，可以像下面方式:

We can obtain the same result with:
我们同样能够达到目的采用下面的方式:

This is also equivalent to squares = map(lambda x: x**2, range(10)), but it’s more concise and readable.
这也相当于 squares = map(lambda x: x**2, range(10))，但是上面的方式显得简洁以及具有可读性

A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.
列表推导式由包含一个表达式的括号组成，表达式后面跟随一个 for 子句，之后可以有零或多个 for 或 if 子句

The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it.
结果是一个列表，由表达式依据其后面的 for 和 if 子句上下文计算而来的结果构成

and it’s equivalent to:
例如，如下的列表推导式结合两个列表的元素，如果元素之间不相等的话:

Note how the order of the for and if statements is the same in both these snippets.
等同于:

If the expression is a tuple (e.g.
值得注意的是在上面两个方法中的 for 和 if 语句的顺序

List comprehensions can contain complex expressions and nested functions:
如果想要得到一个元组 (例如，上面例子中的 (x, y))，必须要加上括号:

As we saw in the previous section, the nested listcomp is evaluated in the context of the for that follows it, so this example is equivalent to:
列表推导式可以嵌套

which, in turn, is the same as:
考虑以下的 3x4 矩阵，一个列表中包含三个长度为4的列表:

In the real world, you should prefer built-in functions to complex flow statements.
现在，如果你想交换行和列，可以用嵌套的列表推导式:

See Unpacking Argument Lists for details on the asterisk in this line.
像前面看到的，嵌套的列表推导式是对 for 后面的内容进行求值，所以上例就等价于:

del can also be used to delete entire variables:
在实际中，你应该更喜欢使用内置函数组成复杂流程语句

Referencing the name a hereafter is an error (at least until another value is assigned to it).
更多关于本行中使用的星号的说明，参考 参数列表的分拆 

5.3.
5.2. del 语句¶

We saw that lists and strings have many common properties, such as indexing and slicing operations.
有个方法可以从列表中按给定的索引而不是值来删除一个子项：del 语句

They are two examples of sequence data types (see Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange).
它不同于有返回值的 pop() 方法

Since Python is an evolving language, other sequence data types may be added.
语句 del 还可以从列表中删除切片或清空整个列表(我们以前介绍过一个方法是将空列表赋值给列表的切片)

There is also another standard sequence data type: the tuple.
例如:

A tuple consists of a number of values separated by commas, for instance:
del 也可以删除整个变量:

As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly;
此后再引用命名 a 会引发错误(直到另一个值赋给它为止)

they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression).
我们在后面的内容中可以看到 del 的其它用法

The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and 'hello!' are packed together in a tuple.
我们知道链表和字符串有很多通用的属性，例如索引和切割操作

The reverse operation is also possible:
它们是序列类型(参见 Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange )中的两种

This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side.
一个元组由数个逗号分隔的值组成，例如:

Curly braces or the set() function can be used to create sets.
虽然元组看起来类似于列表，它们经常用于不同的场景和不同的目的

Note: to create an empty set you have to use set(), not {};
元组是 不可变的，通常包含不同种类的元素并通过分拆（参阅本节后面的内容）或索引访问（如果是 namedtuples，甚至可以通过属性）

the latter creates an empty dictionary, a data structure that we discuss in the next section.
列表是 可变的，它们的元素通常是相同的类型并通过迭代访问

Here is a brief demonstration:
一个特殊的问题是构造包含零个或一个元素的元组：为了适应这种情况，语法上有一些额外的改变

Similarly to list comprehensions, set comprehensions are also supported:
语句 t = 12345, 54321, 'hello!' 是 元组封装 (tuple packing)的一个例子：值 12345 ， 54321 和 'hello!' 被封装进元组

The keys() method of a dictionary object returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just apply the sorted() function to it).
Python 还包含了一个数据类型 set (集合)

To check whether a single key is in the dictionary, use the in keyword.
集合是一个无序不重复元素的集

Here is a small example using a dictionary:
大括号或 set() 函数可以用来创建集合

The dict() constructor builds dictionaries directly from sequences of key-value pairs:
以下是一个简单的演示:

In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:
类似 列表推导式，这里有一种集合推导式语法:

When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the enumerate() function.
另一个非常有用的 Python 内建数据类型是 字典 (参见 Mapping Types — dict )

To loop over two or more sequences at the same time, the entries can be paired with the zip() function.
理解字典的最佳方式是把它看做无序的键：值对 (key:value 对)集合，键必须是互不相同的(在同一个字典之内)

To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() function.
字典的主要操作是依据键来存储和析取值

To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving the source unaltered.
对一个字典执行 keys() 将返回一个字典中所有关键字组成的无序列表(如果你想要排序，只需使用 sorted())

When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the iteritems() method.
这里是使用字典的一个小示例:

It is sometimes tempting to change a list while you are looping over it;
dict() 构造函数可以直接从 key-value 对中创建字典:

The comparison operators in and not in check whether a value occurs (does not occur) in a sequence.
如果关键字都是简单的字符串，有时通过关键字参数指定 key-value 对更为方便:

The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.
在序列中循环时，索引位置和对应值可以使用 enumerate() 函数同时得到:

It is possible to assign the result of a comparison or other Boolean expression to a variable.
同时循环两个或更多的序列，可以使用 zip() 整体打包:

Note that in Python, unlike C, assignment cannot occur inside expressions.
需要逆向循环序列的话，先正向定位序列，然后调用 reversed() 函数:

Note that comparing objects of different types is legal.
遍历字典时，使用 iteritems() 方法可以同时得到键和对应的值

The outcome is deterministic but arbitrary: the types are ordered by their name.
:

Footnotes
若要在循环内部修改正在遍历的序列（例如复制某些元素），建议您首先制作副本

