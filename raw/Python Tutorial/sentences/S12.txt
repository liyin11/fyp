Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell.
有些版本的 Python 解释器支持输入行编辑和历史回溯，类似 Korn shell 和 GNU bash shell 的功能

This is implemented using the GNU Readline library, which supports Emacs-style and vi-style editing.
这是通过 GNU Readline 库实现的

This library has its own documentation which I won’t duplicate here;
它支持 Emacs 风格和 vi 风格的编辑

however, the basics are easily explained.
这个库有它自己的文档，在此不重复了

The interactive editing and history described here are optionally available in the Unix and Cygwin versions of the interpreter.
不过，基本的东西很容易演示

This chapter does not document the editing facilities of Mark Hammond’s PythonWin package or the Tk-based environment, IDLE, distributed with Python.
本章 不是 马克哈密尔顿的 PythonWin 包和随 Python 发布的基于 TK 的 IDLE 环境的文档

The command line history recall which operates within DOS boxes on NT and some other DOS and Windows flavors is yet another beast.
NT 系统和其它 DOS、Windows 系统上的 DOS 窗中的命令行历史回调，属于另一个话题

13.1.
13.1. 行编辑¶

If supported, input line editing is active whenever the interpreter prints a primary or secondary prompt.
如果支持，无论解释器打印主提示符或从属提示符，行编辑都会激活

The current line can be edited using the conventional Emacs control characters.
当前行可以用 Emacs 风格的快捷键编辑

The most important of these are: C-A (Control-A) moves the cursor to the beginning of the line, C-E to the end, C-B moves it one position to the left, C-F to the right.
其中最重要的是：C-A (Control-A)将光标移动到行首，C-E 移动到行尾，C-B 向左移一个字符，C-F 向右移一位

Backspace erases the character to the left of the cursor, C-D the character to its right.
退格向左删除一个符串，C-D 向右删除一个字符

C-K kills (erases) the rest of the line to the right of the cursor, C-Y yanks back the last killed string.
C-K 删掉光标右边直到行尾的所有字符，C-Y 将最后一次删除的字符串粘贴到光标位置

C-underscore undoes the last change you made;
C-underscore (underscores 即下划线，译注)撤销最后一次修改，它可以因积累作用重复

13.2.
13.2. 历史回溯¶

History substitution works as follows.
历史代替可以工作

All non-empty input lines issued are saved in a history buffer, and when a new prompt is given you are positioned on a new line at the bottom of this buffer.
所有非空的输入行都被保存在历史缓存中，获得一个新的提示符的时候，你处于这个缓存的最底的空行

C-P moves one line up (back) in the history buffer, C-N moves one down.
C-P 在历史缓存中上溯一行，C-N 向下移一行

Any line in the history buffer can be edited;
历史缓存中的任一行都可以编辑

an asterisk appears in front of the prompt to mark a line as modified.
按下 Return 键时将当前行传入解释器

Pressing the Return key passes the current line to the interpreter.
C-R 开始一个增量向前搜索

C-R starts an incremental reverse search;
C-S 开始一个向后搜索

13.3.
13.3. 快捷键绑定¶

The key bindings and some other parameters of the Readline library can be customized by placing commands in an initialization file called ~/.inputrc.
Readline 库的快捷键绑定和其它一些参数可以通过名为 ~/.inputrc 的初始化文件的替换命名来定制

Key bindings have the form
快捷键绑定如下形式:

or
或者:

and options can be set with
选项可以如下设置:

For example:
例如:

Note that the default binding for Tab in Python is to insert a Tab character instead of Readline’s default filename completion function.
需要注意的是 Python 中默认 Tab 绑定为插入一个 Tab 字符而不是 Readline 库的默认文件名完成函数，如果你想用这个，可以将以下内容插入:

in your ~/.inputrc.
到你的 ~/.inputrc 中来覆盖它(当然，如果你真的把 Tab 设置成这样，就很难在后继行中插入缩进

(Of course, this makes it harder to type indented continuation lines if you’re accustomed to using Tab for that purpose.)
)

Automatic completion of variable and module names is optionally available.
自动完成变量和模块名也可以激活生效

To enable it in the interpreter’s interactive mode, add the following to your startup file: [1]
要使之在解释器交互模式中可用，在你的启动文件中加入下面内容: [1]

This binds the Tab key to the completion function, so hitting the Tab key twice suggests completions;
这个操作将 Tab 绑定到完成函数，故按 Tab 键两次会给出建议的完成内容

it looks at Python statement names, the current local variables, and the available module names.
它查找　Python 命名、当前的局部变量、有效的模块名

For dotted expressions such as string.a, it will evaluate the expression up to the final '.' and then suggest completions from the attributes of the resulting object.
对于类似 string.a 这样的文件名，它会解析 '.' 相关的表达式，从返回的结果对象中获取属性，以提供完成建议

Note that this may execute application-defined code if an object with a __getattr__() method is part of the expression.
需要注意的是，如果对象的 __getattr__() 方法是此表达式的一部分，这可能会执行应用程序定义代码

A more capable startup file might look like this example.
更有用的初始化文件可能是下面这个例子这样的

Note that this deletes the names it creates once they are no longer needed;
要注意一旦创建的名字没用了，它会删掉它们

this is done since the startup file is executed in the same namespace as the interactive commands, and removing the names avoids creating side effects in the interactive environment.
因为初始化文件作为解释命令与之在同一个命名空间执行，在交互环境中删除命名带来了边际效应

You may find it convenient to keep some of the imported modules, such as os, which turn out to be needed in most sessions with the interpreter.
可能你发现了它体贴的保留了一些导入模块，类似 os ，在解释器的大多数使用场合中都会用到它们:

13.4.
13.4. 其它交互式解释器¶

This facility is an enormous step forward compared to earlier versions of the interpreter;
跟早先版本的解释器比，现在已经有了很大的进步

however, some wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent token is required next).
不过，还是有些期待没有完成：它应该在后继行中优美的提供缩进(解释器知道下一行是否需要缩进)建议

The completion mechanism might use the interpreter’s symbol table.
完成机制可以使用解释器的符号表

A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful.
命名检查(或进一步建议)匹配括号、引号等等

One alternative enhanced interactive interpreter that has been around for quite some time is IPython, which features tab completion, object exploration and advanced history management.
另有一个强化交互式解释器已经存在一段时间了，它就是 IPython，它支持 tab 完成，对象浏览和高级历史管理

It can also be thoroughly customized and embedded into other applications.
它也可以完全定制或嵌入到其它应用程序中

Another similar enhanced interactive environment is bpython.
另一个类似的强化交互环境是　bpython 

Footnotes
Footnotes

