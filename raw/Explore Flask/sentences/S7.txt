Templates¶
模板¶

While Flask doesn’t force us to use any particular templating language, it assumes that we’re going to use Jinja.
虽然 Flask 并不强迫我们使用任何一个特定的模板语言，它假设我们要使用 Jinja

Most of the developers in the Flask community use Jinja, and I recommend that you do the same.
在 Flask 社区中大部分开发者使用 Jinja，我建议你们也这样做

There are a few extensions that have been written to let us use other templating languages, like Flask-Genshi and Flask-Mako.
有很多的扩展帮助我们使用其它的模板语言，像 Flask-Genshi 和 Flask-Mako

Stick with the default unless you have a good reason to use something else.
坚持使用默认的模板语言，除非你有更好的理由使用其它的模板语言

Not knowing the Jinja syntax yet is not a good reason!
还不知道 Jinja 语法不是一个好的理由

You’ll save yourself a lot of time and headache.
你会节省大量的时间和烦恼

Note
Note

Almost all resources imply Jinja2 when they refer to “Jinja.” There was a Jinja1, but we won’t be dealing with it here.
当我们提及到 “Jinja” 的时候，就是在说 Jinja2

When you see Jinja, we’re talking about this: http://jinja.pocoo.org/
存在 Jinja1，但是我们不会与它打交道

A quick primer on Jinja¶
Jinja 快速入门¶

The Jinja documentation does a great job of explaining the syntax and features of the language.
Jinja 官方文档在解释语法和语言的功能上做出很大的工作

I won’t reiterate it all here, but I do want to make sure that you see this important note:
我不会在这里重复，但是我要确保你记得这个重要的注意事项：

There are two kinds of delimiters.
有两种分隔符

{% ...
{% ... %} 和 {{ ... }}

%} and {{ ...
第一个用于执行类似 for 循环或者赋值的声明，后者是用于输出表达的结果到模板中

—Jinja Template Designer Documentation
—Jinja 模板设计文档

How to organize templates¶
如何组织模板¶

So where do templates fit into our app?
那么模板如何融入到我们的应用程序

If you’ve been following along at home, you may have noticed that Flask is really flexible about where we put things.
如果你一直关注 Flask 的话，你可能注意到了 Flask 是十分灵活，它并没有对其内容进行一些特殊的限制

Templates are no exception.
模板也不例外

You may also notice that there’s usually a recommended place to put things.
你可能也注意到了通常有一个推荐的地方来放置东西（比如，模板）

Two points for you.
对于模板而言，那个地方就是在包的目录里

The structure of the templates directory parallels the structure of our routes.
templates 目录的结构是与我们路由结构平行的

The template for the route myapp.com/admin/analytics is templates/admin/analytics.html.
对于路由 myapp.com/admin/analytics 的模板就是 templates/admin/analytics.html

There are also some extra templates in there that won’t be rendered directly.
在目录里面还有一些额外的模板，它们不会直接地被渲染

The layout.html files are meant to be inherited by the other templates.
layout.html 文件是为了让其它的模板继承

Inheritance¶
继承¶

Much like Batman’s backstory, a well organized templates directory relies heavily on inheritance.
很像蝙蝠侠的背景故事一样，一个组织优秀的模板目录很大程度上依靠继承

The parent template usually defines a generalized structure that all of the child templates will work within.
父模板 通常定义一个通用的结构，所有 子模板 都能很好的继承它

In our example, layout.html is a parent template and the other .html files are child templates.
在我们的例子中，layout.html 就是一个父模板而其它 .html 文件就是子模板

You’ll generally have one top-level layout.html that defines the general layout for your application and one for each section of your site.
你通常有一个顶层的 layout.html，它定义了你的应用程序的通用布局以及你的网站的每一部分

If you take a look at the directory above, you’ll see that there is a top-level myapp/templates/layout.html as well as myapp/templates/profile/layout.html and myapp/templates/admin/layout.html.
如果你看看上面的目录的话，你会看到一个顶层的 myapp/templates/layout.html，同样还有 myapp/templates/profile/layout.html 和 myapp/templates/admin/layout.html

The last two files inherit and modify the first.
最后两个文件继承和修改第一个文件

Inheritance is implemented with the {% extends %} and {% block %} tags.
继承是用 {% extends %} 和 {% block %} 标签实现的

In the parent template, we can define blocks which will be populated by child templates.
在父模板中，我们能定义由子模板来填充的块

In the child template, we can extend the parent template and define the contents of those blocks.
在子模板中，我们可以扩展父模板并且定义这些块的内容

The super() function lets us include whatever was inside the block in the parent template.
super() 函数让我们渲染父级块的内容

Note
Note

For more information on inheritance, refer to the Jinja Template Inheritence documentation.
关于继承的更多信息，请参阅 Jinja 模板继承文档

Creating macros¶
创建宏¶

We can implement DRY (Don’t Repeat Yourself) principles in our templates by abstracting snippets of code that appear over and over into macros.
我们可以在我们模板中坚持 DRY（不要重复自己）的原则，通过抽象出重复出现的代码片段到 宏

If we’re working on some HTML for our app’s navigation, we might want to give a different class to the “active” link (i.e.
如果我们正工作在为我们应用程序导航的 HTML 上，我们需要给一个 “活跃的”链接一个 class（class=”active”）

the link to the current page).
没有宏的话，我们要编写一大段 if ... else 语句，这些语句检查每一个链接找到正处于活跃的一个

Macros provide a way to modularize that code;
宏提供了一种模块化代码的方式

they work like functions.
它们像函数一样工作

Let’s look at how we’d mark the active link using a macro.
让我们看看如何使用宏标记一个活跃的链接

What we are doing in this template is calling an undefined macro — nav_link — and passing it two parameters: the target endpoint (i.e.
在这个模板中我们现在要做的就是调用一个未定义的宏 - nav_link -接着向其传递两个参数：目标端点（例如，目标视图的函数名）以及我们要显示的文本

Note
Note

You may notice that we specified with context in the import statement.
你可能会注意到在导入语句中我们指定了 with context

The Jinja context consists of the arguments passed to the render_template() function as well as the Jinja environment context from our Python code.
Jinja 的 context 是由传递到 render_template() 函数的参数以及来自我们的 Python 代码的 Jinja 环境上下文组成

These variables are made available in the template that is being rendered.
对于模板来说，这些变量在模板被渲染的时候是可用的

Some variables are explicitly passed by us, e.g.
一些变量是明显地由我们传入，例如，render_template("index.html", color="red")，但是还有一些变量和函数是由 Flask 自动地包含在上下文中，例如，request, g 和 session

render_template("index.html", color="red"), but there are several variables and functions that Flask automatically includes in the context, e.g.
当我们说 {% from ... import ... with context %} 的时候，就是告诉 Jinja 这些变量对宏也可用

Note
Note

All of the global variables that are passed to the Jinja context by Flask: http://flask.pocoo.org/docs/templating/#standard-context}
通过 Flask 传入到 Jinja 上下文的所有全局变量： http://flask.pocoo.org/docs/templating/#standard-context （中文翻译：http://www.pythondoc.com/flask/templating.html#id2）

We can define variables and functions that we want to be merged into the Jinja context with context processors: http://flask.pocoo.org/docs/templating/#context-processors
我们可以使用上下文处理器定义我们想要的并且插入到 Jinja 上下文的变量和函数: http://flask.pocoo.org/docs/templating/#context-processors （中文翻译：http://www.pythondoc.com/flask/templating.html#id6）

Now it’s time to define the nav_link macro that we used in our template.
现在是时候定义在我们模板中使用的 nav_link 宏

Now we’ve defined the macro in myapp/templates/macros.html.
现在我们已经在 myapp/templates/macros.html 中定义了宏

In this macro we’re using Flask’s request object — which is available in the Jinja context by default — to check whether or not the current request was routed to the endpoint passed to nav_link.
在这个宏中我们使用了 Flask 的 request 对象 — 默认情况下在 Jinja 上下文中是可用的 — 用来检查传入到 nav_link 中的路由的端点是否是当前请求

If it was, than we’re currently on that page, and we can mark it as active.
如果是，我们正在当前页面上，接着我们标记它为活跃的

Note
Note

The from x import y statement takes a relative path for x.
从 x 导入 y 语句采用了 x 的相对路径

If our template was in myapp/templates/user/blog.html we would use from "../macros.html" import nav_link with context.
如果我们的模板是 myapp/templates/user/blog.html，我们可以在使用 from "../macros.html" 导入 nav_link

Custom filters¶
自定义过滤器¶

Jinja filters are functions that can be applied to the result of an expression in the {{ ...
Jinja 过滤器是一个函数，它能够在 {{ ... }} 中用于处理一个表达式的结果

}} delimiters.
在表达式结果输出到模板之前它就被调用

In this code, the title filter will take article.title and return a title-cased version, which will then be printed to the template.
在这段代码中，title 过滤器接收 article.title 作为参数并且返回一个过滤后的标题，接着过滤后的标题将会输出到模板中

This looks and works a lot like the UNIX practice of “piping” the output of one program to another.
这就像 UNIX 的“管道化”一个程序到另一个程序的输出

Note
Note

There are loads of built-in filters like title.
有很多像 title 一样的内置过滤器

See the full list in the Jinja docs.
请参阅 Jinja 文档中的 完整列表

We can define our own filters for use in our Jinja templates.
我们可以在我们的 Jinja 模板中定义自己的过滤器供使用

As an example, we’ll implement a simple caps filter to capitalize all of the letters in a string.
举例来说，我们将会实现一个简单 caps 过滤器用来大写一个字符串中所有的字母

Note
Note

Jinja already has an upper filter that does this, and a capitalize filter that capitalizes the first character and lowercases the rest.
Jinja 已经有一个 upper 过滤器来做这样的事情，并且还有一个 capitalize 过滤器，它能用来大写第一个字母，小写其余的字母

These also handle unicode conversion, but we’ll keep our example simple to focus on the concept at hand.
这些也能处理 unicode 转换，但是我们会继续我们的示例，让大家目前能够知道如何自定义过滤器

We’re going to define our filter in a module located at myapp/util/filters.py.
我们要在 myapp/util/filters.py 中定义我们的过滤器

This gives us a util package in which to put other miscellaneous modules.
这里给出一个 util 包，它里面有各种各样的模块

In this code we are registering our function as a Jinja filter by using the @app.template_filter() decorator.
在这段代码中我们使用 @app.template_filter() 装饰器注册我们的函数成一个 Jinja 过滤器

The default filter name is just the name of the function, but you can pass an argument to the decorator to change that.
默认的过滤器名称就是函数的名称，但是你可以传入一个参数到装饰器中来改变它

Now we can call make_caps in the template rather than caps: {{ "hello world!"|make_caps }}.
现在我们可以在模板中调用 make_caps 而不是 caps：{{ "hello world!"|make_caps }}

To make our filter available in the templates, we just need to import it in our top-level __init.py__.
为了要让我们的过滤器在模板中可用的话，我们只需要在我们的顶层 __init.py__ 的中导入它

Summary¶
摘要¶

Use Jinja for templating.
使用 Jinja 模板

Jinja has two kinds of delimeters: {% ...
Jinja 有两种分隔符：{% ... %} 和 {{ ... }}

%} and {{ ...
 第一个用于执行类似 for 循环或者赋值的声明，后者是用于输出表达的结果到模板中

Templates should go in myapp/templates/ — i.e.
模板应该在 myapp/templates/ 中 — 例如，在应用程序包中的一个目录

I recommend that the structure of the templates/ directory mirror the URL structure of the app.
我建议模板/目录结构反映应用程序的 URL 结构

You should have a top-level layout.html in myapp/templates as well as one for each section of the site.
你应该在 myapp/templates 中有一个顶层的 layout.html，同样网站的每一部分也应该有一个

The former extend the latter.
后者继承并且扩展了前者

Macros are like functions made-up of template code.
宏就像由模板代码构成的函数

Filters are functions made-up of Python code and used in templates.
过滤器就是有 Python 代码组成的函数并且能在模板中使用

© Copyright 2014, Robert Picard.
京ICP备14002119号-1   | © Copyright 2014, Robert Picard, Translated by D.D.

