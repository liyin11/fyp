Patterns for handling users¶
与用户有关的进阶技能¶

One of the most common things that modern web applications need to do is handle users.
一个现代 web 应用程序需要做的最常见的事情就是处理用户

An application with basic account features needs to handle a lot of things like registration, email confirmation, securely storing passwords, secure password reset, authentication and more.
拥有基本账号功能的一个应用程序需要处理很多的事情，像注册，确认电子邮箱，安全地存储密码，安全地重置密码，认证等等

Since a lot of security issues present themselves when it comes to handling users, it’s generally best to stick to standard patterns in this area.
因为在处理用户的时候存在很多安全的问题，通常最佳的方式就是坚持在这个领域中的标准模式

Note
Note

In this chapter I’m going to assume that you’re using SQLAlchemy models and WTForms to handle your form input.
在本节中，我们假设你是使用 SQLAlchemy 模型以及 WTForms 来处理你的表单输入

If you aren’t using those, you’ll need to adapt these patterns to your preferred methods.
如果你没有使用这些的话，你需要自己使你的首选方法适应这些模式

Email confirmation¶
确认电子邮箱¶

When a new user gives us their email, we generally want to confirm that they gave us the right one.
当一个新用户提供我们他们的邮箱，我们通常要确认他们提供给我们的邮箱是否是正确的

Once we’ve made that confirmation, we can confidently send password reset links and other sensitive information to our users without wondering who is on the receiving end.
一旦我们已经通过邮箱验证，我们可以安心地给我们用户发送密码重置链接以及其它敏感的信息，而无需担心是谁在接收这些内容

One of the most common patterns for confirming emails is to send a password reset link with a unique URL that, when visited, confirms that user’s email address.
确认邮箱最常见的模式之一就是发送一个 URL 唯一的密码重置链接，当访问它的时候，证实了用户的邮箱地址

For example, john@gmail.com signs up at our application.
例如，john@gmail.com 注册了我们的应用程序

We register him in the database with an email_confirmed column set to False and fire off an email to john@gmail.com with a unique URL.
我们把他的用户数据插入到数据库中，该条用户数据的 email_confirmed 字段被设置成 False 并且发送了一封携带唯一的 URL 的邮件到 john@gmail.com 上

This URL usually contains a unique token, e.g.
这个 URL 通常包含一个唯一的令牌，例如，http://myapp.com/accounts/confirm-/Q2hhZCBDYXRsZXR0IHJvY2tzIG15IHNvY2tz

http://myapp.com/accounts/confirm/Q2hhZCBDYXRsZXR0IHJvY2tzIG15IHNvY2tz.
当 John 收到这封邮件的时候，他点击链接

When John gets that email, he clicks the link.
我们的应用程序会检查令牌，知道谁在确认邮箱并且设置 John 的 email_confirmed 字段为 True

How do we know which email to confirm with a given token?
我们是如何知道 URL 中的令牌是对应哪个用户

One way would be to store the token in the database when it is created and check that table when we receive the confirmation request.
一种方式就是在令牌被创建的时候存储到数据库中，当我们收到确认请求的时候到数据库中检查对比

That’s a lot of overhead and, lucky for us, it’s unnecessary.
这是一个很大的开销，幸运地是，我们不必这么做

We’re going to encode the email address in the token.
我们会把邮箱地址编码成令牌

The token will also contain a timestamp to let us set a time limit on how long it’s valid.
并且令牌也包含一个时间戳，该时间戳是让我们设置一个令牌在什么时间内有效的时间限制

To do this, we’ll use the itsdangerous package.
为了完成这些，我们使用 itsdangerous 包

This package gives us tools to send sensitive data into untrusted environments (like sending an email confirmation token to an unconfirmed email).
这个包提供我们一个用来发送敏感数据到一个不可信的环境的工具（像发送一封邮件确认令牌到一个未确认的邮箱）

In this case, we’re going to use an instance of the URLSafeTimedSerializer class.
在本例中，我们将会使用 URLSafeTimedSerializer 类的一个实例

We can use that serializer to generate a confirmation token when a user gives us their email address.
当一个用户给我们他们的邮箱地址的时候，我们可以使用它序列化来生成一个确认令牌

We’ll implement a simple account creation process using this method.
我们实现了一个简单的账号创建过程，里面就使用了这种方法

The view that we’ve defined handles the creation of the user and sends off an email to the given email address.
我们上面定义的视图处理用户的创建以及发送一封邮件到指定的邮箱地址

You may notice that we’re using a template to generate the HTML for the email.
你可能注意到我们使用了一个模板用来生成邮件内容的 HTML 形式

Okay, so now we just need to implement a view that handles the confirmation link in that email.
好了，现在我们只需要实现一个处理邮件中确认链接的视图

This view is a simple form view.
这个视图是一个简单的表单视图

We just add the try ...
我们只在开始的时候添加了 try ... except 来检查令牌是否有效

except bit at the beginning to check that the token is valid.
令牌中包含了一个时间戳，因此我们能够告诉 ts.loads() 引发一个异常如果它大于 max_age 的话

The token contains a timestamp, so we can tell ts.loads() to raise an exception if it is older than max_age.
在本例中，我们设置 max_age 为 86400 秒，即：24小时

Note
Note

You can use very similar methods to implement an email update feature.
你可以使用非常相似的方法来实现更新邮箱地址的功能

Just send a confirmation link to the new email address with a token that contains both the old and the new addresses.
只要发送一封携带令牌的邮件到新的邮箱，该令牌包含旧的以及新的邮箱地址

If the token is valid, update the old address with the new one.
如果令牌是有效的，用新的邮箱更新旧的邮箱

Storing passwords¶
存储密码¶

Rule number one of handling users is to hash passwords with the Bcrypt (or scrypt, but we’ll use Bcrypt here) algorithm before storing them.
处理用户的首要规则就是在存储密码之前用 Bcrypt（或者 scrypt，这里我们使用 Bcrypt）散列密码

We never store passwords in plain text.
我们绝不能明文存储密码

It’s a massive security issue and it’s unfair to our users.
这是一个巨大的安全问题并且对于我们用户来说是不公平的

All of the hard work has already been done and abstracted away for us, so there’s no excuse for not following the best practices here.
所有的这些辛勤工作都已经有人完成并且抽象出来给我们使用，所以没有理由不在这里遵循最佳实践

Note
Note

OWASP is one of the industry’s most trusted source for information regarding web application security.
OWASP 是关于 Web 应用程序安全性的信息的业界最值得信赖的来源之一

Take a look at some of their recommendations for secure coding.
看看一些他们 关于安全编码的建议

We’ll go ahead and use the Flask-Bcrypt extension to implement the bcrypt package in our application.
我们将继续并且使用 Flask-Bcrypt 扩展在我们的应用中实现 bcrypt 包

This extension is basically just a wrapper around the py-bcrypt package, but it does handle a few things that would be annoying to do ourselves (like checking string encodings before comparing hashes).
这个包基本上是对 py-bcrypt 包的封装，但是为我们做了一些很烦人的事情（像在比较散列之前检查字符编码等等）

One of the reasons that the Bcrypt algorithm is so highly recommended is that it is “future adaptable.” This means that over time, as computing power becomes cheaper, we can make it more and more difficult to brute force the hash by guessing millions of possible passwords.
Bcrypt 算法强烈地被推荐的原因之一就是”未来的适应性“

The more “rounds” we use to hash the password, the longer it will take to make one guess.
这就意味着随着时间的推移，当计算能力变得越来越便宜的时候，我们可以把它变得越来越困难地被暴力方式来破解，这种暴力方式就是上百万次的猜测密码

If we hash our passwords 20 times with the algorithm before storing them the attacker has to hash each of their guesses 20 times.
我们使用越多的”循环“来散列密码，将会花费越多的时间来猜测

Keep in mind that if we’re hashing our passwords 20 times then our application is going to take a long time to return a response that depends on that process completing.
请记住如果我们散列密码超过 20 次的话，我们的应用程序需要花费很长的一段时间来返回响应，具体要取决于什么时候处理完成

This means that when choosing the number of rounds to use, we have to balance security and usability.
这就意味着当选择使用的”循环数“的时候，我们必须平衡安全和可用性

The number of rounds we can complete in a given amount of time will depend on the computational resources available to our application.
我们可以在给定时间内计算完成的”循环“取决于提供我们应用程序的计算资源

It’s a good idea to test out some different numbers and shoot for between 0.25 and 0.5 seconds to hash a password.
在 0.25 到 0.5 秒之间的时间内散列密码是一个很好的体验

We should try to use at least 12 rounds though.
我们应该尝试使用的”循环“至少为 12

To test the time it takes to hash a password, we can time a quick Python script that, well, hashes a password.
为了测试散列密码花费的时间，我们可以编写一个简单且快速的散列密码的 Python 脚本

Now we can keep timing our changes to the number of rounds with the UNIX time utility.
现在我们可以使用 UNIX 的 time 工具来记录时间的消耗数

I did a quick benchmark on a small server that I have handy and 12 rounds seemed to take the right amount of time, so I’ll configure our example to use that.
我做了一个快速的基准测试在一个小型的服务器上，12 ”循环“（rounds）是一个很合适的值，因此我们使用它来配置我的示例

Now that Flask-Bcrypt is configured, it’s time to start hashing passwords.
现在 Flask-Bcrypt 已经配置好了，是时候开始散列密码

We could do this manually in the view that receives the request from the sign-up form, but we’d have to do it again in the password reset and password change views.
我们可以在接收来自注册表单的请求的视图中手动去散列密码，但是我们必须在密码重置以及密码修改的视图中再次重复这样做

Instead, what we’ll do is abstract away the hashing so that our app does it without us even thinking about it.
相反，我们要做的就是如何抽象散列，以便我们的应用程序无需我们考虑就能自己完成

We’ll use a setter so that when we set user.password = 'password1', it’s automatically hashed with Bcrypt before being stored.
这里我们会使用一个 setter，这样的话当我们设置 user.password = 'password1' 的话，在存储之前就会自动地使用 Bcrypt 散列密码

We’re using SQLAlchemy’s hybrid extension to define a property with several different functions called from the same interface.
我们使用了 SQLAlchemy 的 hybrid 扩展来定义一个属性，这个属性从相同接口调用的时候拥有不同的功能

Our setter is called when we assign a value to the user.password property.
当我们为 user.password 属性赋值的时候，我们的 setter 就被调用

In it, we hash the plaintext password and store it in the _password column of the user table.
在它里面，我们散列一个明文的密码并且存储在用户表的 _password 字段中

Since we’re using a hybrid property we can then access the hashed password via the same user.password property.
因为我们使用 hybrid 属性，我们可以通过 user.password 属性来访问散列的密码

Now we can implement a sign-up view for an app using this model.
现在我们使用上面的模型为应用程序实现一个注册视图

Authentication¶
认证¶

Now that we’ve got a user in the database, we can implement authentication.
既然我们在数据库中有用户了，我们可以实现认证

We’ll want to let a user submit a form with their username and password (though this might be email and password for some apps), then make sure that they gave us the correct password.
我们要一个用户提交携带他们的用户名和密码的表单（尽管对一些应用来说这可能是邮箱和密码），接着确保他们是否提供了正确的密码

If it all checks out, we’ll mark them as authenticated by setting a cookie in their browser.
如果所有的都验证通过了，我们通过在他们的浏览器上设置一个 cookie 来标记他们已经通过认证

The next time they make a request we’ll know that they have already logged in by looking for that cookie.
下一次他们再过来请求的时候我们通过查找 cookie 知道他们已经登录

Let’s start by defining a UsernamePassword form with WTForms.
让我们开始用 WTForms 定义一个 UsernamePassword 表单

Next we’ll add a method to our user model that compares a string with the hashed password stored for that user.
下一步我们在我们的用户模型中添加一个方法，该方法用来比较一个字符串和用户存储的散列密码

Flask-Login¶
Flask-Login¶

Our next goal is to define a sign-in view that serves and accepts our form.
我们下一目标就是定义一个登录的视图，该视图用来服务和接收我们的表单

If the user enters the correct credentials, we will authenticate them using the Flask-Login extension.
如果用户输入正确的凭证的话，我们将使用 Flask-Login 扩展来认证他们

This extension simplifies the process of handling user sessions and authentication.
这个扩展简化了处理用户会话和认证的过程

We need to do a little bit of configuration to get Flask-Login ready to roll.
我们需要的就是对 Flask-Login 进行一些小小的配置

In __init__.py we’ll define the Flask-Login login_manager.
在 __init__.py 中，我们将定义 Flask-Login 的 login_manager

Here we created an instance of the LoginManager, initialized it with our app object, defined the login view and told it how to get a user object with a user’s id.
这里我们创建了一个 LoginManager 示例，并且用我们的 app 对象初始化它，定义登录视图并且告诉它如何用一个的用户的 id 得到用户对象

This is the baseline configuration we should have for Flask-Login.
这是我们使用 Flask-Login 的最基本的配置

Note
Note

See more ways to customize Flask-Login.
查看更多 自定义 Flask-Login 的方法.

Now we can define the signin view that will handle authentication.
现在我们可以定义处理登录的 signin 视图

We simply import the login_user function from Flask-Login, check a user’s login credentials and call login_user(user).
我们简单地从 Flask-Login 中导入 login_user 函数，检查用户登录凭证并且调用 login_user(user)

You can log the current user out with logout_user().
你可以使用 logout_user() 实现用户的退出操作

Forgot your password¶
忘记密码¶

We’ll generally want to implement a “Forgot your password” feature that lets a user recover their account by email.
我们通常要实现一个”忘记你的密码“的功能，允许一个用户通过邮箱找回自己的账号

This area has a plethora of potential vulnerabilities because the whole point is to let an unauthenticated user take over an account.
这个地方也会有很多潜在的风险，因为关键是让一个未认证的用户接管一个账号

We’ll implement our password reset using some of the same techniques as our email confirmation.
我们这里实现密码重置采用了我们在邮箱确认的时候一些同样的技术

We’ll need a form to request a reset for a given account’s email and a form to choose a new password once we’ve confirmed that the unauthenticated user has access to that email address.
我们需要一个表单用来申请为某个账号的邮箱重置密码，并且需要一个表单来让用户输入新的密码，一旦我们已经确认了未经认证的用户能够访问某个账号的邮箱

The code in this section assumes that our user model has an email and a password, where the password is a hybrid property as we previously created.
在本节的代码假设我们的用户模型有一个邮箱和密码，并且密码是我们之前创建的具有 hybrid 属性

Warning
Warning

Don’t send password reset links to an unconfirmed email address!
不要发送密码重置链接到一个未经证实的电子邮件地址

You want to be sure that you are sending this link to the right person.
你要确保你正在发送链接给合适的人

We’re going to need two forms.
我们将需要两个表单

One is to request that a reset link be sent to a certain email and the other is to change the password once the email has been verified.
一个是用于申请重置密码的链接，一个是用于一旦邮件被认证用于更改密码

This code assumes that our password reset form just needs one field for the password.
上面的代码假设我们的密码重置的表单只需要一个密码字段（只需要输入一次新密码）

Many apps require the user to enter their new password twice to confirm that they haven’t made a typo.
许多应用程序需要用户输入新的密码两次以确保他们没有输错

To do this, we’d simply add another PasswordField and add the EqualTo WTForms validator to the main password field.
要做到这一点的话，我们可以简单地添加另一个 PasswordField 字段，并且添加 WTForms 的验证器：EqualTo

Note
Note

There a lot of interesting discussions in the User Experience (UX) community about the best way to handle this in sign-up forms.
用户体验社区（UX）有很多关于处理注册表单的最佳方式的有趣的讨论

I personally like the thoughts of one Stack Exchange user (Roger Attrill) who said:
我个人十分喜欢 Stack Exchange 用户（Roger Attrill）的想法，他这样说的：

“We should not ask for password twice - we should ask for it once and make sure that the ‘forgot password’ system works seamlessly and flawlessly.”
”我们不应该要求用户输入密码两次 - 我们只需要用户输入一次并且确保‘忘记密码’的功能要完美和无缝的

Read more about this topic in the thread on the User Experience Stack Exchange.
在 Stack Exchange 用户体验跟帖 查看更多关于该话题的内容

There are also some cool ideas for simplifying sign-up and sign-in forms in an article on Smashing Magazine article.
在 Smashing Magazine 的文章 上也有很多关于简化注册和登录表单的很酷的想法

Now we’ll implement the first view of our process, where a user can request that a password reset link be sent for a given email address.
现在我们实现第一个视图，用户可以申请发送密码重置链接到一个指定的邮箱地址

When the form receives an email address, we grab the user with that email address, generate a reset token and send them a password reset URL.
当表单接收到一个邮箱地址，我们获取与该邮箱地址有关的用户，生成一个重置的令牌并且发送他们一个密码重置的 URL

That URL routes them to a view that will validate the token and let them reset the password.
这个 URL 将他们路由到一个视图，该视图验证令牌并且让他们重置密码

We’re using the same token validation method as we did to confirm the user’s email address.
我们使用了和验证用户的邮箱地址一样的令牌验证方法

The view passes the token from the URL back into the template.
视图把从 URL 中获取的令牌传入到模板中

Then the template uses the token to submit the form to the right URL.
接着模板使用令牌提交表单到正确的 URL

Let’s have a look at what that template might look like.
让我们看看模板可能的样子

Summary¶
摘要¶

Use the itsdangerous package to create and validate tokens sent to an email address.
使用 itsdangerous 包来创建和验证发送到邮箱地址的令牌

You can use these tokens to validate emails when a user creates an account, changes their email or forgets their password.
当一个用户创建账号，更改邮箱或者忘记密码的时候，你可以使用这些令牌来验证邮件

Authenticate users using the Flask-Login extension to avoid dealing with a bunch of session management stuff yourself.
使用 Flask-Login 扩展来认证用户可以避免自己处理一大堆麻烦的会话管理

Always think about how a malicious user could abuse your app to do things that you didn’t intend.
要经常思考一个恶意的用户如何滥用你的应用程序去做一些你不打算做的事情

© Copyright 2014, Robert Picard.
京ICP备14002119号-1   | © Copyright 2014, Robert Picard, Translated by D.D.

