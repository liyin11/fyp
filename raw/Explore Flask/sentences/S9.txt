Storing data¶
存储数据¶

Most Flask applications are going to deal with storing data at some point.
大部分 Flask 应用程序会在某一时刻处理存储数据

There are many different ways to store data.
存在许多不同的方式来存储数据

Finding the best one depends entirely on the data you are going to store.
寻找最好的一种方式完全取决于你要存储的数据

If you are storing relational data (e.g.
如果你存储关系型数据（例如，一个用户有多篇文章，每篇文章都有一个作者等等），一个关系型数据库可能是一种合适的方式

a user has posts, posts have a user, etc.) a relational database is probably going to be the way to go (big suprise).
其它类型的数据可能适合 NoSQL 数据存储，像 MongoDB

I’m not going to tell you how to choose a database engine for your application.
我将不会告诉你们该如何为你的应用程序选择数据库引擎

There are people who will tell you that NoSQL is the only way to go and those who will say the same about relational databases.
有些人会告诉你 NoSQL 是唯一的选择，而有些人会告诉你的关系型数据是合适的选择

All I will say on that subject is that if you are unsure, a relational database (MySQL, PostgreSQL, etc.) will almost certainly work for whatever you’re doing.
所有我想要说的就是如果你不确认如何选择的话，一个关系型数据库（MySQL，PostgreSQL等等）肯定能为你正在做的事情工作

Plus, when you use a relational database you get to use SQLAlchemy and SQLAlchemy is fun.
另外，当你使用一个关系型数据库的话，你就会开始使用 SQLAlchemy，SQLAlchemy 是很有趣的

SQLAlchemy¶
SQLAlchemy¶

SQLAlchemy is an ORM (Object Relational Mapper).
SQLAlchemy 是一个 ORM（对象关系映射）

It’s basically an abstraction layer that sits on top of the raw SQL queries being executed on our database.
它基本上是在我们的数据库中执行的原始的 SQL 查询的之上的抽象层

It provides a consistent API to a long list of database engines.
它为一个长长的列表的数据库引擎提供一致的 API

The most popular include MySQL, PostgreSQL and SQLite.
其中最流行的数据库引擎包括 MySQL, PostgreSQL 和 SQLite

This makes it easy to move data between our models and our database and it makes it really easy to do other things like switch database engines and migrate our schemas.
它使得在我们模型和数据库之间很容易地移动数据，并且它真的很容易地去做一些其它的事情，比如更换数据库引擎和迁移我们的数据库模式

There is a great Flask extension that makes using SQLAlchemy in Flask even easier.
有一个很伟大的 Flask 扩展使得可以容易地在 Flask 中使用 SQLAlchemy

It’s called Flask-SQLAlchemy.
它叫做 Flask-SQLAlchemy

Flask-SQLAlchemy configures a lot of sane defaults for SQLAlchemy.
Flask-SQLAlchemy 为 SQLAlchemy 配置大量完整的默认值

It also handles some session management so we don’t have to deal with janitorial stuff in our application code.
它也处理一些会话管理因此我们不需要在我们的应用程序代码中做一些清洁工作

Let’s dive into some code.
让我们深入到一些代码中

We’re going to define some models then configure some SQLAlchemy.
我们要定义一些模型接着做一些配置工作

The models are going to go in myapp/models.py, but first we are going to define our database in myapp/__init__.py
模型会在 myapp/models.py 中编写，但是首先需要在 myapp/__init__.py 中定义我们的数据库

First we initialize and configure our Flask app and then we use it to initialize our SQLAlchemy database handler.
首先我们初始化以及配置我们的 Flask 应用程序，接着我们使用它来初始化我们的 SQLAlchemy 处理程序

We’re going to use an instance folder for our database configuration so we should use the instance_relative_config option when initializing the app and then call app.config.from_pyfile to load it.
我们将要使用一个实例文件夹来为我们的数据库配置，所以当我们初始化应用程序应该使用 instance_relative_config 选项，接着调用 app.config.from_pyfile 加载它

Then we can define our models.
现在我们可以定义我们的模型

Column, Integer, String, Model and other SQLAlchemy classes are all available via the db object constructed from Flask-SQLAlchemy.
Column，Integer，String，Model 以及其它的 SQLAlchemy 类可以从由 Flask-SQLAlchemy 定义的 db 对象中引用

We have defined a model to store the current state of our spacecraft’s engines.
我们已经定义了一个模型用来存储我们飞行器引擎当前的状态

Each engine has an id, a title and a thrust level.
每一个飞行器引擎有一个 id，一个标题以及一个推力水平

We still need to add some database information to our configuration.
我们还需要把一些数据库信息添加到我们配置中

We’re using an instance folder to keep confidential configuration variables out of version control, so we are going to put it in instance/config.py.
我们使用一个实例文件夹为了保持敏感的配置变量不在版本控制中，所以我们将要把数据库的配置放入 instance/config.py

Note
Note

Your database URI will be different depending on the engine you use and where it’s hosted.
你的数据库 URI 会根据你使用的数据库引擎而不同

See the SQLAlchemy documentation for this syntax.
请参阅 SQLAlchemy 官方文档 获取更多的内容

Initializing the database¶
初始化数据库¶

Now that the database is configured and we have defined a model, we can initialize the database.
现在数据库已经配置好了并且我们已经定义一个模型，我们可以初始化数据库

This step basically involves creating the database schema from the model definitions.
这一步基本上涉及到从模型定义中创建数据库模式

Normally that process might be a pain in the ...
通常这个过程可能十分痛苦

neck.
我们是幸运的，SQLAlchemy 有一个很酷的命令，它将替我们做了所有的事情

Let’s open up a Python terminal in our repository root.
让我们在我们的仓库/版本库的根目录下打开一个 Python 终端

Now, thanks to SQLAlchemy, our tables have been created in the database specified in our configuration.
现在多亏了 SQLAlchemy，我们的表已经在我们的配置中指定的数据库中创建好了

Alembic migrations¶
Alembic 迁移数据库¶

The schema of a database is not set in stone.
数据库的模式不是一成不变的

For example, we may want to add a last_fired column to the engine table.
例如，我们可能要给我们的飞行器引擎表添加一个 last_fired 字段

If we don’t have any data, we can just update the model and run db.create_all() again.
如果我们没有任何数据的话，我们只要更新模型和再次运行 db.create_all()

However, if we have six months of engine data logged in that table, we probably don’t want to start over from scratch.
然而，如果我们已经在表中记录了 6 个月的引擎的数据，我们可能不希望从头开始

That’s where database migrations come in.
这就是数据库迁移的工作

Alembic is a database migration tool created specifically for use with SQLAlchemy.
Alembic 是一个专门为 SQLAlchemy 使用的数据库迁移工具

It lets us keep a versioned history of our database schema so that we can later upgrade to a new schema and even downgrade back to an older one.
它能够让我们保持我们的数据库模式的版本历史，以便我们后面可以升级到一个新的模式以及甚至退回到一个旧的版本

Alembic has an extensive tutorial to get you started, so I’ll just give you a quick overview and point out a couple of things to watch out for.
Alembic 有一个很广泛的教程，大家很容易入门，因此我只给你一个简单的概述并且指出几件需要注意的事项

We’ll create our alembic “migration environment” via the alembic init command.
我们将使用 alembic init 命令行创建我们 alembic 的“迁移环境”

Once we run this in our repository root we’ll have a new directory with the very creative name alembic.
一旦我们在我们的仓库/版本库中运行这个命令，我们将会有一个新的文件夹，它有一个很有创意的名字：alembic

Our repository will end up looking something like the example in this listing, adapted from the Alembic tutorial.
下面这个示例改编自 Alembic 教程

The alembic/ directory has the scripts that migrate our data between versions.
alembic/ 目录下有在不同版本之间我们数据迁移的脚本

There is also an alembic.ini file that contains configuration information.
同样也有包含配置信息的一个 alembic.ini 文件

Note
Note

Add alembic.ini to .gitignore!
请把 alembic.ini 添加到 .gitignore 中

You are going to have your database credentials in this file, so you do not want it to end up in version control.
你将会把你的数据库的凭证放在这个文件中，因此你 不会 要它出现在版本控制中

You do want to keep alembic/ in version control though.
你想让 alembic/ 在文本控制中

It does not contain sensitive information (that can’t already be derived from your source code) and keeping it in version control will mean having multiple copies should something happen to the files on your computer.
它并不包含敏感信息（它不可能从你的源代码中产生的）并且保持它在版本控制中意味着有多个副本

When it comes time to make a schema change, there are a couple of steps.
当开始要做出一个模式改变，会有这些步骤要走：首先我们运行 alembic revision 来生成一个迁移脚本

First we run alembic revision to generate a migration script.
接着我们在 myapp/alembic/versions/ 中打开一个新生成的 Python 文件并且使用 Alembic 的 op 对象提供的工具填充 upgrade 和 downgrade 函数

Once we have our migration script ready, we can run alembic upgrade head to migrade our data to the latest version.
一旦我们已经准备好我们的迁移脚本，我们可以运行 alembic upgrade head 来迁移我们的数据到最新的版本

Note
Note

For the details on configuring Alembic, creating your migration scripts and running your migrations, see the Alembic tutorial.
关于配置 Alembic，创建你的迁移脚本以及运行你的迁移的细节，请参阅 Alembic 教程

Warning
Warning

Don’t forget to put a plan in place to back up your data.
别忘记制定一个计划在合适的时间备份你的数据

The details of that plan are outside the scope of this book, but you should always have your database backed up in a secure and robust way.
计划的细节不在本书范围内，但是你应该一直以一种安全可靠的方式备份数据库

Note
Note

The NoSQL scene is less established with Flask, but as long as the database engine of your choice has a Python library, you should be able to use it.
NoSQL 场景很少在 Flask 中使用，但是只要你选择的数据库引擎有一个 Python 库，你应该能够使用它

There are even several extensions in the Flask extension registry to help integrate NoSQL engines with Flask.
甚至有不少 Flask 扩展 帮助整合 Flask 和 NoSQL 引擎

Summary¶
摘要¶

Use SQLAlchemy to work with relational databases.
使用 SQLAlchemy 与关系型数据库一起工作

Use Flask-SQLAlchemy to work with SQLAlchemy.
使用 Flask-SQLAlchemy 与 SQLAlchemy 一起工作

Alembic helps you migrate your data between schema changes.
Alembic 帮助你在数据库模式的变化之间迁移你的数据

You can use NoSQL databases with Flask, but the methods and tools vary between engines.
你可以在 Flask 中使用 NoSQL，但是方法和工具与其它的数据库引擎迥异

Back up your data!
备份你的数据

© Copyright 2014, Robert Picard.
京ICP备14002119号-1   | © Copyright 2014, Robert Picard, Translated by D.D.

