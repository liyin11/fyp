Deployment¶
部署¶

We’re finally ready to show our app to the world.
我们终于准备好向全世界展示我们的应用程序了

It’s time to deploy.
是时候要部署

This process can be a pain because there are so many moving parts.
这个过程可能是痛苦的因为有许多琐碎的事情要去做

There are a lot of choices to make when it comes to our production stack as well.
当涉及到生产环境的搭建以及服务器的配置方案，这是有很多的选择需要做出

In this chapter, we’re going to talk about some of the important pieces and some of the options we have with each.
在本章中，我们会讨论一些重要的部分以及一些我们可能会用到的选项（关于主机或者服务器的搭建方式等等）

The Host¶
主机¶

We’re going to need a server somewhere.
首先我们需要一台服务器

There are thousands of providers out there, but these are the three that I personally recommend.
现在有成千上万的服务器供应商，但是我个人建议的有三家

I’m not going to go over the details of how to get started with them, because that’s out of the scope of this book.
我不打算在这里介绍如何开始使用它们的细节，因为这是超出了本书的范围

Instead I’ll talk about their benefits with regards to hosting Flask applications.
相反我会讨论在它们上托管 Flask 应用程序的好处

Amazon Web Services EC2¶
亚马逊网络服务 EC2¶

Amazon Web Services is a collection of services provided by ...
亚马逊网络服务是一个由亚马逊提供的服务的集合

Amazon!
有可能在之前你已经听说过它们可能成为新的创业者这些天的一个流行的选择

There’s a good chance that you’ve heard of them before as they’re probably the most popular choice for new startups these days.
在亚马逊网络服务（AWS）中，我们最关心的是亚马逊弹性计算云（EC2）

The AWS service that we’re most concerned with here is EC2, or Elastic Compute Cloud.
亚马逊弹性计算云（EC2）最大的卖点就是我们得到一个虚拟服务器 - 或者用亚马逊网络服务（AWS）的说法叫做 实例 - 几秒就能运行起来

The big selling point of EC2 is that we get virtual servers - or instances as they’re called in AWS parlance - that spin up in seconds.
如果我们迅速扩展我们的应用程序，只需要为我们的应用程序启动几个亚马逊弹性计算云（EC2）的实例并且把它们置于一个负载匀衡器之后（甚至我们能使用亚马逊网络服务（AWS）弹性负载均衡）

With regards to Flask, AWS is just a regular old virtual server.
至于 Flask，亚马逊网络服务（AWS）只是一个普通的虚拟服务器

We can spin it up with our favorite linux distro and install our Flask app and our server stack without much overhead.
我们可以在其上安装一个 linux 发行版并且安装我们的 Flask 应用程序以及我们服务器套件，无需太多的开销

It means that we’re going to need a certain amount of systems administration knowledge though.
这就意味着我们只需要一定的系统管理知识

Heroku¶
Heroku¶

Heroku is an application hosting service that is built on top of AWS services like EC2.
Heroku 是一个建立在亚马逊网络服务（AWS）之上的应用程序托管服务，像亚马逊弹性计算云（EC2）一样

They let us take advantage of the convenience of EC2 without the requisite systems administration experience.
它们让我们充分利用亚马逊弹性计算云（EC2）的便利性而且不需要系统管理的经验

With Heroku, we deploy our application with a git push to their server.
在 Heroku 中，我们使用 git push 部署我们的应用程序到它们的服务器上

This is really convenient when we don’t want to spend our time SSHing into a server, installing and configuring software and coming up with a sane deployment procedure.
这真的是很便利，我们不需要花费我们的时间在 SSHing 到一个服务器上，安装以及配置软件并且想出一个合理的部署过程

This convenience comes at a price of course, though both AWS and Heroku offer a certain amount of free service.
这种便利性带来的就是价格问题，尽管亚马逊网络服务（AWS）和 Heroku 提供了一定的免费服务

Note
Note

Heroku has a tutorial on deploying Flask with their service.
Heroku 有一个使用它们的服务 部署 Flask 的教程

Note
Note

Administrating your own databases can be time consuming and doing it well requires some experience.
管理你自己的数据库是非常耗时并且做起来需要一定的经验

It’s great to learn about database administration by doing it yourself for your side projects, but sometimes you’d like to save time and effort by outsourcing that part to professionals.
通过亲自为自己的项目管理数据库是一种好的学习方式，但是有时候你想要通过委托外部专业人士来节省时间

Both Heroku and AWS have database management offerings.
无论是 Heroku 还是亚马逊网络服务（AWS）都有数据库管理的产品

I don’t have personal experience with either yet, but I’ve heard great things.
我个人还没有亲自使用过它们，但是我听说它们还不赖

It’s worth considering if you want to make sure your data is being secured and backed-up without having to do it yourself.
如果你要确保你的数据被保护和备份并且无需自己做事情的话，它们值得考虑

Heroku Postgres
Heroku Postgres

Amazon RDS
Amazon RDS

Digital Ocean¶
Digital Ocean¶

Digital Ocean is an EC2 competitor that has recently begun to take off.
Digital Ocean 是亚马逊弹性计算云（EC2）的一个竞争对手，最近开始飞速地发展

Like EC2, Digital Ocean lets us spin up virtual servers - now called droplets - quickly.
像亚马逊弹性计算云（EC2）一样，Digital Ocean 让我们很快地启动一个虚拟服务器 - 现在称为 droplets 

All droplets run on SSDs, which isn’t something we get at the lower levels of EC2.
所有的 droplets 是在固态硬盘（SSDs）上运行

The biggest selling point for me personally is an interface that is far simpler and easier to use than the AWS control panel.
对于我来说最大的卖点就是一个接口，这个接口比起亚马逊网络服务（AWS）控制面板更加简单和更加容易使用

Digital Ocean is my preference for hosting and I recommend that you take a look at them.
Digital Ocean 是我偏爱的主机提供商，我建议你们可以看看它

The Flask deployment experience on Digital Ocean is roughly the same as on EC2.
Digital Ocean 上部署 Flask 的过程与在亚马逊弹性计算云（EC2）上几乎一样

We’re starting with a clean linux distribution and installing our server stack from there.
我们可以在其上安装一个 linux 发行版并且安装我们的 Flask 应用程序以及我们服务器套件

Note
Note

Digital Ocean was nice enough to make a contribution to the Kickstarter campaign for Explore Flask.
Digital Ocean 为 Kickstarter 针对 探索 Flask 的活动做出足够大的贡献

With that said, I promise that my recommendation comes from my own experience as a user.
就像我前面推荐使用 Digital Ocean，我保证我的建议是来自作为 Digital Ocean 用户的亲身经历

If I didn’t like them, I wouldn’t have asked them to pledge in the first place.
如果我不喜欢它的话，我也不会推荐它作为首选

The stack¶
部署方式¶

This section will cover some of the software that we’ll need to install on our server to serve our Flask application to the world.
本节将介绍一些软件，我们需要安装这些软件在我们的服务器用来服务我们的 Flask 应用程序展示给全世界

The basic stack is a front server that reverse proxies requests to an application runner that is running our Flask app.
最基本的部署方式就是有一个前置服务器，该服务器反向代理请求到运行我们 Flask 应用程序的应用运行器

We’ll usually have a database too, so we’ll talk a little about those options as well.
我们通常也会有一个数据库，因此我们同样多多少少会讨论到这些方式

Application runner¶
应用程序运行器¶

The server that we use to run Flask locally when we’re developing our application isn’t good at handling real requests.
当我们开发我们的应用程序的时候，我们用来本地运行 Flask 的服务器不擅长处理真实的请求

When we’re actually serving our application to the public, we want to run it with an application runner like Gunicorn.
当我们实际上需要把我们的应用程序面向公众的话，我们要使用一个应用程序运行器来运行它，像 Gunicorn 一样

Gunicorn handles requests and takes care of complicated things like threading.
Gunicorn 可以像线程一样处理请求和处理一些复杂的事情

To use Gunicorn, we install the gunicorn package in our virtual environment with Pip.
要使用 Gunicorn，我们要用 Pip 在我们的虚拟环境中安装 gunicorn 包

Running our app is a simple command away.
运行我们的应用程序是一个简单的命令行

A fine app indeed.
一个简单的应用程序已经完成

Now, to serve it up with Gunicorn, we simply run the gunicorn command.
现在，为了用 Gunicorn 来服务于它，我们简单地运行 gunicorn 命令行

At this point, we should see “Hello World!” when we navigate our browser to http://127.0.0.1:8000.
这时候，当我们的浏览器访问 http://127.0.0.1:8000 的时候，我们应该看到 “Hello World!”

To run this server in the background (i.e.
为了在后台运行这个服务器（即：作为一个守护进程），我们可以给 Gunicorn 传入 -D 参数

daemonize it), we can pass the -D option to Gunicorn.
在这种方式下，即使我们关闭当前的终端会话，它依然运行

If we daemonize Gunicorn, we might have a hard time finding the process to close later when we want to stop the server.
如果我们把 Gunicorn 作为一个守护进程的话，我们可能会很难找到进程当后面我们要停止服务器的时候

We can tell Gunicorn to stick the process ID in a file so that we can stop or restart it later without searching through lists of running processess.
我们能够告诉 Gunicorn 把进程 ID 放入到一个文件中以便后面我们能够停止或者重启它，而无需搜索整个运行程序的列表

We use the -p  option to do that.
我们使用 -p  选项来做到这一点

To restart and kill the server, we can run kill -HUP and kill respectively.
要重启以及杀死服务器，我们可以分别运行 kill -HUP 和 kill

By default Gunicorn runs on port 8000.
默认情况下，Gunicorn 运行在端口 8000

We can change the port by adding the -b bind option.
我们可以通过添加 -b 绑定选项来更改端口

Making Gunicorn public¶
让 Gunicorn 对外开放¶

Warning
Warning

Gunicorn is meant to sit behind a reverse proxy.
Gunicorn 是要在一个反向代理的后面

If you tell it to listen to requests coming in from the public, it makes an easy target for denial of service attacks.
如果你要让它接收来自外部公众的请求，它很容易地遭受拒绝服务攻击

It’s just not meant to handle those kinds of requests.
它很难处理这些类型的请求

Only allow outside connections for debugging purposes and make sure to switch it back to only allowing internal connections when you’re done.
因此仅仅允许外部的连接为调试的目的并且确保在实际运行中切回到只允许内部连接

If we run Gunicorn like we have in the listings, we won’t be able to access it from our local system.
如果我们像上面介绍的运行 Gunicorn 的话，我们无法接收到外部的请求，只能接收到本机的请求

That’s because Gunicorn binds to 127.0.0.1 by default.
这是因为 Gunicorn 默认是绑定到 127.0.0.1

This means that it will only listen to connections coming from the server itself.
这就意味着它仅仅监听来自服务器本机的连接

This is the behavior that we want when we have a reverse proxy server that is sitting between the public and our Gunicorn server.
这就是我们希望的运行方式，我们会有一个反向代理的服务器，它位于外部于我们的 Gunicorn 服务器之间

If, however, we need to make requests from outside of the server for debugging purposes, we can tell Gunicorn to bind to 0.0.0.0.
然而，如果我们需要为了调试目的接收来自外部的请求，我们可以要求 Gunicorn 绑定到 0.0.0.0

This tells it to listen for all requests.
这就是告诉它监听所有的请求

Note
Note

Read more about running and deploying Gunicorn in the documentation.
在官方文档 中阅读更多关于运行以及部署 Gunicorn 的内容

Fabric is a tool that lets you run all of these deployment and management commands from the comfort of your local machine without SSHing into every server.
Fabric 是一个工具，它让你舒适地在本机运行所有这些部署以及管理命令行，无需 SSHing 到每一台服务器

Nginx Reverse Proxy¶
Nginx 反向代理¶

A reverse proxy handles public HTTP requests, sends them back to Gunicorn and gives the response back to the requesting client.
一个反向代理处理公开的 HTTP 请求，发送它们到 Gunicorn 并且给出响应回到请求的客户端

Nginx can be used very effectively as a reverse proxy and Gunicorn “strongly advises” that we use it.
Nginx 可以很有效地用于一个反向代理并且 Gunicorn “强烈建议” 我们使用 Nginx

To configure Nginx as a reverse proxy to a Gunicorn server running on 127.0.0.1:8000, we can create a file for our app: /etc/nginx/sites-available/exploreflask.com.
为了配置 Nginx 作为运行在 127.0.0.1:8000 上的 Gunicorn 服务器的一个反向代理，我们可以为我们的应用程序创建一个文件： /etc/nginx/sites-available/expl-oreflask.com

Now we’ll create a symlink to this file at /etc/nginx/sites-enabled and restart Nginx.
现在我们创建一个符号链接指向这个文件到 /etc/nginx/sites-enabled 上并且重启 Nginx

We should now be able to make our requests to Nginx and receive the response from our app.
我们现在应该可以让 Nginx 接收我们的请求并且接收来自我们的应用程序的响应

Note
Note

The Nginx configuration section in the Gunicorn docs will give you more information about setting Nginx up for this purpose.
在 Gunicorn 文档中的 Nginx 配置部分 会给你更多关于设置 Nginx 反向代理的信息

ProxyFix¶
ProxyFix¶

We may run into some issues with Flask not properly handling the proxied requests.
我们可能会碰到使用 Flask 不能处理代理请求的一些问题

It has to do with those headers we set in the Nginx configuration.
这是与我们设置 Nginx 中配置的那些头有关

We can use the Werkzeug ProxyFix to ...
我们可以使用 Werkzeug 的 ProxyFix 来修复代理请求的问题

Note
Note

Read more about ProxyFix in the Werkzeug docs.
在 Werkzeug 官方文档 中获取更多关于 ProxyFix 的信息

Summary¶
摘要¶

Three good choices for hosting Flask apps are AWS EC2, Heroku and Digital Ocean.
托管 Flask 应用程序的三个好的选择是 AWS EC2，Heroku 以及 Digital Ocean

The basic deployment stack for a Flask application consists of the app, an application runner like Gunicorn and a reverse proxy like Nginx.
对于一个 Flask 应用程序最合理的部署搭配就是一个应用程序运行器和一个像 Nginx 的反向代理

Gunicorn should sit behind Nginx and listen on 127.0.0.1 (internal requests) not 0.0.0.0 (external requests).
Gunicorn 应该位于 Nginx 后面并且监听在 127.0.0.1（内部请求）而不是监听在 0.0.0.0（外部请求）

Use Werkzeug’s ProxyFix to handle the appropriate proxy headers in your Flask application.
在你的 Flask 应用程序中使用 Werkzeug 的 ProxyFix 来处理合适的代理头

© Copyright 2014, Robert Picard.
京ICP备14002119号-1   | © Copyright 2014, Robert Picard, Translated by D.D.

