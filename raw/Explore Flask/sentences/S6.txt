Blueprints¶
蓝图¶

What is a blueprint?¶
什么是蓝图

A blueprint defines a collection of views, templates, static files and other elements that can be applied to an application.
一个蓝图定义了视图，模板，静态文件以及可以用于应用程序的其它元素的集合

For example, let’s imagine that we have a blueprint for an admin panel.
例如，让我们假设下我们有一个管理面板的蓝图

This blueprint would define the views for routes like /admin/login and /admin/dashboard.
这个蓝图会定义一些包含像 /admin/login 和 /admin/dashboard 路由的视图

It may also include the templates and static files that will be served on those routes.
它也可能包含服务于这些路由的模板以及静态文件

We can then use this blueprint to add an admin panel to our app, be it a social network for astronauts or a CRM for rocket salesmen.
接着我们可以使用这个蓝图添加一个管理面板到我们的应用程序中，不论我们的应用程序是什么类型的

Why would you use blueprints?¶
为什么要使用蓝图

The killer use-case for blueprints is to organize our application into distinct components.
蓝图“杀手级”使用场景就是把我们的应用程序组织成不同的组件

For a Twitter-like microblog, we might have a blueprint for the website pages, e.g.
对于一个类似 Twitter 的微型博客，我们可能有一个针对网站页面的蓝图，例如，index.html 和 about.html

index.html and about.html.
接着我们还有另外一个带有登录面板的蓝图，在那里我们显示了所有最新的文章，然后我们还有一个用于后台管理的面板的蓝图

Then we could have another for the logged-in dashboard where we show all of the latest posts and yet another for our administrator’s panel.
网站的每一个不同的区域也能够被分成不同区域的代码来实现

Each distinct area of the site can be separated into distinct areas of the code as well.
这能够让我们用几个小的 “apps” 构建我们的应用程序，每一个 apps 都在做一件事情

Note
Note

Read more about the benefits of using blueprints in “Why Blueprints” from the Flask docs.
请从 Flask 官方文档中 “为什么使用蓝图” 阅读更多地使用蓝图的好处（中文版位于：http://www.pythondoc.com/flask/blueprints.html#id2）

Where do you put them?¶
你把它们放哪里

Like everything with Flask, there are many ways that we can organize our app using blueprints.
使用蓝图组织我们的应用程序有很多的方式

With blueprints, we can think of the choice as functional versus divisional (terms I’m borrowing from the business world).
通常情况下，我们可以考虑按功能结构和分区这两种选择（功能结构和分区这两个词语我借鉴了商业上的概念）

Functional structure¶
功能结构¶

With a functional structure, you organize the pieces of your app by what they do.
按照功能结构的话，你可以通过它们所做的事情来组织你的应用程序的结构

Templates are grouped together in one directory, static files in another and views in a third.
模板在一个文件夹中，静态文件在另一个文件夹中，视图在第三个文件夹中

With the exception of yourapp/views/__init__.py, each of the .py files in the yourapp/views/ directory from this listing is a blueprint.
除了 yourapp/views/__init__.py，在上面列表中的 yourapp/views/ 文件夹中的每一个 .py 文件都是一个蓝图

In yourapp/__init__.py we would import those blueprints and register them on our Flask() object.
在 yourapp/__init__.py 中我们要导入这些蓝图并且在我们的 Flask() 对象中 注册 它们

We’ll look a little more at how this is implemented later in this chapter.
我们会在本章的后面看看实现方式

Note
Note

At the time of writing this, the Flask website at http://flask.pocoo.org uses this structure.
Flask 站点：http://flask.pocoo.org 使用的就是这种结构

Take a look for yourself on GitHub.
你自己可以到 GitHub 上一睹真容

Divisional¶
分区¶

With the divisional structure, you organize the pieces of the application based on which part of the app they contribute to.
对于分区结构了，你可以基于它们有助于应用程序的哪一部分来组织应用程序的结构

All of the templates, views and static files for the admin panel go in one directory, and those for the user control panel go in another.
管理面板所有的模板，视图以及静态文件都在一个文件夹中，用户控制的所有的模板，视图和静态文件在另一个文件夹中

With a divisional structure like the app in this listing, each directory under yourapp/ is a separate blueprint.
像上面列出的应用程序的分区结构，在 yourapp/ 中每一个文件夹都是一个单独的蓝图

All of the blueprints are applied to the Flask() app in the top-level __init__.py
所有的这些蓝图都会应用到顶层 __init__.py 中的 Flask() 对象中

Which one is best?¶
哪一个是最好的

The organizational structure you choose is largely a personal decision.
你选择的组织结构很大程度上是一种个人决定

The only difference is the way the hierarchy is represented – i.e.
唯一的区别是层次结构的表示方式，因此你可以自由地决策要使用的组织结构，你可以选择一个对自己有意义的

If your app has largely independent pieces that only share things like models and configuration, divisional might be the way to go.
如果你的应用程序大部分是独立的结构，仅仅共享着像模型和配置，分区结构就是合适的选择方式

An example might be a SaaS app that lets user’s build websites.
一个例子就是让用户建立网站的 SaaS 应用程序

You could have blueprints in “divisions” for the home page, the control panel, the user’s website, and the admin panel.
你可能就有蓝图分别针对主页，控制面板，用户网站，以及管理面板

These components may very well have completely different static files and layouts.
这些组件可能有完全不同的静态文件和布局

If you’re considering spinning off your blueprints as extensions or using them for other projects, a divisional structure will be easier to work with.
如果考虑负责这个应用程序或者分拆/重构这个应用程序的话，分区结构会更加适用一些

On the other hand, if the components of your app flow together a little more, it might be better represented with a functional structure.
另一方面，如果你的应用程序联系地更加紧密一些的话，它可能用一个功能结构呈现更加合适

An example of this would be Facebook.
一个示例就是 Facebook

If Facebook used Flask, it might have blueprints for the static pages (i.e.
如果 Facebook 使用 Flask 的话，它可能就有静态页（例如，登录-注销页，注册，关于等等），控制面板（例如，新闻源），个人主页（/robert/about 以及 /robert/photos），设置（/settings/security 和 /settings/privacy）等等一些蓝图

signed-out home, register, about, etc.), the dashboard (i.e.
这些组件共享一个通用的布局和样式，但是每一个也会有自己的布局

the news feed), profiles (/robert/about and /robert/photos), settings (/settings/security and /settings/privacy) and many more.
下面的列表中展示了一个进行大量删减版的 Facebook 的样子，如果它是使用 Flask 构建的话

The blueprints in facebook/views/ are little more than collections of views rather than wholly independent components.
在 facebook/views/ 中的蓝图仅仅是视图的集合而不是完全独立的组件

The same static files will be used for the views in most of the blueprints.
同一的静态文件将会被大多数的蓝图的视图使用

Most of the templates will extend a master template.
大多数模板都会扩展一个主模板

A functional structure is a good way to organize this project.
功能结构是组织这个项目的一种好的方式

How do you use them?¶
你如何使用它们

Basic usage¶
基本用法¶

Let’s take a look at the code for one of the blueprints from that Facebook example.
让我们看看 Facebook 示例中的其中一个蓝图的代码

To create a blueprint object, we import the Blueprint() class and initialize it with the arguments name and import_name.
要创建一个蓝图对象，我们先导入 Blueprint() 类并且用参数 name 和 import_name 初始化它

Usually import_name will just be __name__, which is a special Python variable containing the name of the current module.
通常情况下，import_name 就是 __name__，这是一个包含当前模块名称的特殊 Python 变量

We’re using a functional structure for this Facebook example.
在这个 Facebook 示例中我们使用了一个功能结构

If we were using a divisional structure, we’d want to tell Flask that the blueprint has its own template and static directories.
如果我们使用分区结构的话，我们要通知 Flask 蓝图有自己的模板和静态文件夹

This code block shows what that would look like.
此块的代码大概的样子如下所示

We have now defined our blueprint.
现在我们已经定义我们的蓝图

It’s time to register it on our Flask app.
是时候在我们的 Flask 应用程序中注册它

Now the routes defined in facebook/views/profile.py (e.g.
现在定义在 facebook/views/profile.py 上的路由（例如，/<user_url_slug>）在应用程序上注册并且表现得像你使用 @app.route() 定义它们一样

Using a dynamic URL prefix¶
使用动态的 URL 前缀¶

Continuing with the Facebook example, notice how all of the profile routes start with the <user_url_slug> portion and pass that value to the view.
继续 Facebook 例子，注意到所有的用户资料路由都是以 <user_url_slug> 开始并且把它的值传递给视图

We want users to be able to access a profile by going to a URL like https://facebo-ok.com/john.doe.
我们希望用户们能够通过浏览像 https://facebo-ok.com/john.doe 类似的网址访问用户资料页

We can stop repeating ourselves by defining a dynamic prefix for all of the blueprint’s routes.
我们可以通过为所有的蓝图的路由定义一个动态的前缀来停止重复工作

Blueprints let us define both static and dynamic prefixes.
蓝图可以让我们定义动态和静态的前缀

We can tell Flask that all of the routes in a blueprint should be prefixed with /profile for example;
我们可以通知 Flask 在一个蓝图中的所有的路由都是以 /profile 为前缀的（这里的 /profile 只是一个示例），这就是一个静态的前缀

that would be a static prefix.
至于 Facebook 示例，前缀是基于浏览的用户资料而变化

In the case of the Facebook example, the prefix is going to change based on which profile the user is viewing.
无论他们浏览哪个用户的个人资料，我们都应该在 URL 标签中显示

Whatever text they choose is the URL slug of the profile which we should display;
这就是一个动态的前缀

We have a choice to make when defining our prefix.
我们可以选择在什么时候定义我们的前缀

We can define the prefix in one of two places: when we instantiate the Blueprint() class or when we register it with app.register_blueprint().
我们可以在两个地方中的任意一个定义前缀：当我们实例化 Blueprint() 类或者当我们用 app.register_blueprint() 注册它的时候

While there aren’t any technical limitations to either method, it’s nice to have the prefixes available in the same file as the registrations.
尽管没有任何技术因素限制任何一种方法，最好是在注册的时候统一定义可用的前缀

This makes it easier to move things around from the top-level.
这使得以后修改或者调整更加容易和方便些

For this reason, I recommend setting url_prefix on registration.
因为这个原因，我建议在注册的时候设置 url_prefix

We can use converters to make the prefix dynamic, just like in route() calls.
我们可以在动态前缀中使用转换器，就像在 route() 调用中一样

This includes any custom converters that we’ve defined.
这个也包含了我们自定义的转换器

When using converters, we can pre-process the value given before handing it off to the view.
当使用了转换器，我们可以在把前缀交给视图之前进行预处理

In this case we’ll want to grab the user object based on the URL slug passed into our profile blueprint.
在这个例子中我们要基于传入到我们用户资料蓝图的 URL 中的 user_url_slug 来获取用户对象

We’ll do that by decorating a function with url_value_preprocessor().
这里我们需要使用 url_value_preprocessor() 装饰一个函数来完成这个需求

We’re using the g object to store the profile owner and g is available in the Jinja2 template context.
我们使用 g 对象来存储用户对象并且 g 可以在 Jinja2 模板中使用

This means that for a barebones case all we have to do in the view is render the template.
这就意味着对于实现一个极其简单的系统的话，我们现在要做的就是在视图中渲染模板

Note
Note

The Flask documentation has a great tutorial on using prefixes for internationalizing your URLs.
Flask 官方文档中有一篇关于使用前缀为国际化你的 URLs 的 一个伟大的教程 

Using a dynamic subdomain¶
使用动态的子域（subdomain）¶

Many SaaS (Software as a Service) applications these days provide users with a subdomain from which to access their software.
许多 SaaS（软件即服务）的应用程序目前提供用户一个子域，用户可以使用这个子域来访问他们的软件

Harvest, for example, is a time tracking application for consultants that gives you access to your dashboard from yourname.harvestapp.com.
例如，Harvest 是一个时间追踪管理应用程序，它允许你从 yourname.harvestapp.com 访问你的控制面板

Here I’ll show you how to get Flask to work with automatically generated subdomains like this.
这里我将向你展示如何使用 Flask 处理像 Harvest 一样自动生成的子域

For this section I’m going to use the example of an application that lets users create their own websites.
对于这一部分，我们将要使用允许用户创建他们自己的网站的应用程序示例

Imagine that our app has three blueprints for distinct sections: the home page where users sign-up, the user administration panel where the user builds their website and the user’s website.
假设我们的应用程序有三个蓝图，它们分别用于用户登录的主页，用户构建他们的网站的用户管理面板以及用户的网站

Since these three parts are relatively unconnected, we’ll organize them in a divisional structure.
由于这三部分是不相关的，我们用分区结构来组织结构

This table explains the different blueprints in this app.
下面的表格展示了本应用程序中所有的蓝图

We can define our dynamic subdomain the same way we defined our URL prefix.
我们可以用定义我们 URL 前缀同样的方式来定义我们的动态子域

Both options (in the blueprint directory or in the top-level __init__.py) are available, but once again we’ll keep the definitions in sitemaker/__init.py__.
两个选择：在蓝图文件夹或者在顶层的 __init__.py 中都是可用的，但是我们坚持再一次把它定义在 sitemaker/__init.py__ 中

Since we’re using a divisional structure, we’ll define the blueprint in sitemaker/site/__init__.py.
因为我们使用了分层结构，我们会在 sitema-ker/site/__init__.py 中定义蓝图

Now we have the site information from the database that we’ll use to display the user’s site to the visitor who requests their subdomain.
现在我们从数据库中获取了站点信息，我们将会把用户的站点展示给正在请求他们子域的访问者

To get Flask to work with subdomains, we’ll need to specify the SERVER_NAME configuration variable.
为了让 Flask 能和子域一起工作，我们将需要指定 SERVER_NAME 配置变量

Note
Note

A few minutes ago, as I was drafting this section, somebody in IRC said that their subdomains were working fine in development, but not in production.
几分钟以前，当我正在起草这一章节的时候，有人在 IRC 说他们的子域在开发环境上工作正常，但是在生产环境上不正常

I asked if they had the SERVER_NAME configured, and it turned out that they had it in development but not production.
我问他们是否已经配置 SERVER_NAME，事实证明他们在开发环境上设置但是没有在生产环境上配置

Setting it in production solved their problem.
在生产环境上设置了 SERVER_NAME 解决他们的问题

See the conversation between myself (imrobert in the log) and aplavin: http://dev.pocoo.org/irclogs/%23pocoo.2013-07-30.log
在 http://dev.pocoo.org/irclogs/%23pocoo.2013-07-30.log 上可以看到我和 aplavin 之间的对话

It was enough of a coincidence that I felt it warranted inclusion in the section.
我觉得这是足够巧合的，并且值得列入本节

Note
Note

You can set both a subdomain and url_prefix.
你可以同时设置一个子域和前缀

Think about how we would configure the blueprint in sitemaker/dash with the URL structure from the table above.
这里大家可以考虑考虑如何配置它们

Refactoring small apps to use blueprints¶
使用蓝图重构小的应用程序¶

I’d like to go over a brief example of the steps we can take to convert an app to use blueprints.
我们将会介绍把一个应用程序重构成使用蓝图的步骤

We’ll start off with a typical Flask app and restructure it.
我们选择一个很典型的 Flask 应用程序并且重构它

The views.py file has grown to 10,000 lines of code!
views.py 文件已经增长到 10,000 行的代码

We’ve been putting off refactoring it, but it’s finally time.
我们一直在拖延重构它的时间，但是现在是时候重构

The file contains the views for every section of our site.
views.py 文件包含我们网站每一部分的视图

The sections are the home page, the user dashboard, the admin dashboard, the API and the company blog.
这些部分分别是主页，用户控制面板，管理控制面板，API 和公司的博客

Step 1: Divisional or functional?¶
步骤 1：分区或者功能

This application is made up of very distinct sections.
这个应用是有完全不同的部分组成

Templates and static files probably aren’t going to be shared between the user dashboard and the company blog, for example.
例如，用户控制面板和公司博客之间的模板和静态文件是完全不共享的

We’ll go with a divisional structure.
我们将选择分区结构

Step 2: Move some files around¶
步骤 2：移动一些文件¶

Warning
Warning

Before you make any changes to your app, commit everything to version control.
在你对你的应用程序做出任何改变之前，都应该提交到版本控制中

You don’t want to accidentally delete something for good.
你也不想不小心删除一些东西吧

Next we’ll go ahead and create the directory tree for our new app.
下一步我们将继续前进，并且为我们新的应用程序创建目录树

We can start by creating a folder for each blueprint within the package directory.
我们可以在一个包目录里为每一个蓝图创建一个文件夹

Then we’ll copy views.py, static/ and templates/ in their entirety to each blueprint directory.
接着我们将完整地复制 views.py，static/ 和 templates/ 到每个蓝图目录

We can then remove them from the top-level package directory.
最后，我们可以从顶层包目录中删除它们（views.py，static/ 和 templates/）

Step 3: Cut the crap¶
步骤 3：废话少说¶

Now we can go into each blueprint and remove the views, static files and templates that don’t apply to that blueprint.
现在我们可以到每一个蓝图目录中去删除那些不属于该蓝图的视图，静态文件和模板

How you go about this step largely depends on how your app was organized to begin with.
你如何做这一步很大程度上取决你的应用程序是如何组织结构的

The end result should be that each blueprint has a views.py file with all of the views for that blueprint.
最终的结果就是每一个蓝图只有一个 views.py 文件，并且 views.py 文件内的函数只适用于本蓝图

No two blueprints should define a view for the same route.
没有两个蓝图会为同一个路由定义一个视图

Each templates/ directory should only include the templates for the views in that blueprint.
每一个 templates/ 目录只包含在本蓝图的视图中使用的模板

Each static/ directory should only include the static files that should be exposed by that blueprint.
每一个 static/ 目录应该只包含有本蓝图使用的静态文件

Note
Note

Make it a point to eliminate all unnecessary imports.
特别地注意：需要减少所有不必要的导入

It’s easy to forget about them, but at best they clutter your code and at worst they slow down your application.
这是很容易忘记的事情，最乐观的情况下它只会让你的代码显得有些混论，但是最差情况下，它们拖慢你的应用程序

Step 4: Blueprint...ifi...cation or something¶
步骤 4：蓝图¶

This is the part where we turn our directories into blueprints.
这是我们把我们的目录转变成为蓝图的关键一步

The key is in the __init__.py files.
关键就是在 __init__.py 文件

For starters, let’s take a look at the definition of the API blueprint.
首先，我们看看 API 蓝图的定义

Next we can register this blueprint in the U2FtIEJsYWNr package’s top-level __init__.py file.
接下来我们在 U2FtIEJsYWNr 包顶层 __init__.py 文件里注册这个蓝图

Make sure that the routes are registered on the blueprint now rather than the app object.
确保路由是注册到蓝图上而不是应用程序（app）对象上

Step 5: Enjoy¶
步骤 5：享受¶

Now our application is far more modular than it was with one massive views.py file.
现在我们应用程序比起它原来一个庞大的 views.py 文件已经是大大地模块化了

The route definitions are simpler because we can group them together into blueprints and configure things like subdomains and URL prefixes once for each blueprint.
路由的定义十分简单，因为我们可以在每一个蓝图里面单独定义并且可以为每个蓝图像子域和 URL 前缀一样配置

Summary¶
摘要¶

A blueprint is a collection of views, templates, static files and other extensions that can be applied to an application.
一个蓝图定义了视图，模板，静态文件以及可以用于应用程序的其它元素的集合

Blueprints are a great way to organize your application.
蓝图是组织你的应用程序的一种很好的方式

In a divisional structure, each blueprint is a collection of views, templates and static files which constitute a particular section of your application.
在分区结构中，每一个蓝图是一个视图，模板，静态文件的集合，它们构成了应用程序的一部分

In a functional structure, each blueprint is just a collection of views.
在功能结构中，每一个蓝图只是视图的集合

The templates are all kept together, as are the static files.
所有的模板放在一起，静态文件也一样

To use a blueprint, you define it then register it on the application by calling Flask.register_blueprint()..
要使用一个蓝图，你首先需要定义它，接着通过调用 Flask.register_blueprint() 来注册它

You can define a dynamic URL prefix that will be applied to all routes in a blueprint.
你可以定义一个动态的 URL 前缀，它能够用于在一个蓝图里所有的路由

You can also define a dynamic subdomain for all routes in a blueprint.
你也可以定义一个动态的子域，它能够用于一个蓝图里所有的路由

Refactoring a growing application to use blueprints can be done in five relatively small steps.
使用蓝图重构一个越来越大的应用程序能够用 5 个小步骤来完成

© Copyright 2014, Robert Picard.
京ICP备14002119号-1   | © Copyright 2014, Robert Picard, Translated by D.D.

