Tutorial

Starting

So you know Python and want to make a website.

web.py provides the code to make that easy.

If you want to do the whole tutorial, you'll need to have installed Python, web.py, flup, psycopg2, and Postgres (or equivalent database and Python driver).

(See install for details.)

Let's get started.

URL Handling

The most important part of any website is its URL structure.

Your URLs aren't just the thing that your visitors see and email to their friends, they also provide a mental model of how your website works.

On popular sites like del.icio.us, the URLs are even part of the user interface.

web.py makes it easy to make great URLs.

To get started with your web.py application, open up a new text file (let's call it code.py) and type:

This imports the web.py module.

Now we need to tell web.py our URL structure.

Let's start out with something simple:

The first part is a regular expressions that matches a URL, like /, /help/faq, /item/(\d+), etc.

(i.e.

\d+ would match a sequence of digits).

The parentheses say to capture that piece of the matched data for use later on.

This line says we want the URL / (i.e.

GET and POST: the difference

Now we need to write the index class.

While most people don't notice it just browsing around, your browser uses a language known as HTTP for communicating with the World Wide Web.

The details aren't important, but the basic idea is that Web visitors ask web servers to perform certain functions (like GET or POST) on URLs (like / or /foo?f=1).

GET is the one we're all familiar with, the one used to request the text of a web page.

When you type harvard.edu into your web browser, it literally asks the Harvard web server to GET /.

The second-most famous, POST, is often used when submitting certain kinds of forms, like a request to purchase something.

You use POST whenever the act of submitting a request does something (like charge your credit card and process an order).

This is key, because GET URLs can be passed around and indexed by search engines, which you definitely want for most of your pages but definitely don't want for things like processing orders (imagine if Google tried to buy everything on your site!).

In our web.py code, we make the distinction between the two clear:

This GET function will now get called by web.py anytime someone makes a GET request for /.

Now we need to create an application specifying the urls and a way to tell web.py to start serving web pages:

First we tell web.py to create an application with the URLs we listed above, looking up the classes in the global namespace of this file.

Now notice that although I've been talking a lot here, we only really have five or so lines of code.

That's all you need to make a complete web.py application.

For easier access, here's how your code should look like:

Start the server

If you go to your command line and type:

You now have your web.py application running a real web server on your computer.

Visit that URL and you should see "Hello, world!" (You can add an IP address/port after the "code.py" bit to control where web.py launches the server.

You can also tell it to run a fastcgi or scgi server.)

Note: You can specify the port number to use on the command line like this if you can't or don't want to use the default:

Templating

Writing HTML from inside Python can get cumbersome;

it's much more fun to write Python from inside HTML.

Let's make a new directory for our templates (we'll call it templates).

Or you can use web.py's templating language to add code to your HTML:

As you can see, the templates look a lot like Python files except for the def with statement at the top (saying what the template gets called with) and the $s placed in front of any code.

Currently, template.py requires the $def statement to be the first line of the file.

Also, note that web.py automatically escapes any variables used here, so that if for some reason name is set to a value containing some HTML, it will get properly escaped and appear as plain text.

If you want to turn this off, write $:name instead of $name.

Now go back to code.py.

Under the first line, add:

This tells web.py to look for templates in your templates directory.

Then change index.GET to:

('index' is the name of the template and 'name' is the argument passed to it)

Visit your site and it should say hello to Bob.

But let's say we want to let people enter their own name in.

Replace the two lines we added above with:

Visit / and it should say hello to the world.

Visit /?name=Joe and it should say hello to Joe.

Of course, having that ?

in the URL is kind of ugly.

Instead, change your URL line at the top to:

and change the definition of index.GET to:

and delete the line setting name.

If you wish to learn more about web.py templates, visit the templetor page.

Forms

The form module of web.py allows the ability to generate html forms, get user input, and validate it before processing it or adding it to a database.

If you want to learn more about using the module forms web.py, see the Documentation or direct link to Form Library

Databasing

Note: Before you can start using a database, make sure you have the appropriate database library installed.

For MySQL databases, use MySQLdb and for Postgres use psycopg2.

First you need to create a database object.

(Adjust these -- especially username, password, and dbname -- for your setup.

MySQL users will also want to change dbn definition to mysql.)

That's all you need to do -- web.py will automatically handle connecting and disconnecting from the database.

Using your database engines admin interface, create a simple table in your database:

And an initial row:

Return to editing code.py and change index.GET to the following, replacing the entire function:

and change back the URL handler to take just / as in:

Edit and replace the entire contents of index.html so that it reads:

Visit your site again and you should see your one todo item: "Learn web.py".

Congratulations!

You've made a full application that reads from the database.

Now let's let it write to the database as well.

At the end of index.html, add:

And change your URLs list to read:

(You've got to be very careful about those commas.

If you omit them, Python adds the strings together and sees '/index/addadd' instead of your list of URLs!)

Now add another class:

(Notice how we're using POST for this?)

web.input gives you access to any variables the user submitted through a form.

Note: In order to access data from multiple identically-named items, in a list format (e.g.: a series of check-boxes all with the attribute name="name") use:

db.insert inserts values into the database table todo and gives you back the ID of the new row.

seeother redirects users to that URL.

Some quick additional notes: db.update works just like db.insert except instead of returning the ID it takes it (or a string WHERE clause) after the table name.

web.input, db.query, and other functions in web.py return "Storage objects", which are just like dictionaries except you can do d.foo in addition to d['foo'].

This really cleans up some code.

You can find the full details on these and all the web.py functions in the documentation.

Developing

web.py also has a few tools to help us with debugging.

When running with the built-in webserver, it starts the application in debug mode.

In debug mode any changes to code and templates are automatically reloaded and error messages will have more helpful information.

The debug is not enabled when the application is run in a real webserver.

If you want to disable the debug mode, you can do so by adding the following line before creating your application/templates.

What Next ?

This ends the tutorial for now.

Take a look at the cookbook and the code examples for lots more cool stuff you can do with web.py.

