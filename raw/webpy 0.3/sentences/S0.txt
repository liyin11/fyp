Tutorial
web.py 0.3 新手指南

Starting
开始

So you know Python and want to make a website.
你知道Python同时你希望制作一个网站

web.py provides the code to make that easy.
 那么web.py正好提供了一种简单的方法

If you want to do the whole tutorial, you'll need to have installed Python, web.py, flup, psycopg2, and Postgres (or equivalent database and Python driver).
如果你希望读完整个指南， 你需要安装Python, web.py, flup, psycopg2, 和Postgres (或者等价的数据库和Python驱动)

(See install for details.)
 详细，可以查看 webpy.org.

Let's get started.
准备开始

URL Handling
URL 处理

The most important part of any website is its URL structure.
任何网站最重要的部分就是它的URL结构

Your URLs aren't just the thing that your visitors see and email to their friends, they also provide a mental model of how your website works.
你的URL并不仅仅只是访问者所能看到并且能发给朋友的

On popular sites like del.icio.us, the URLs are even part of the user interface.
它还规定了你网站运行的心智模型

web.py makes it easy to make great URLs.
在一些类似del.icio.us的流行网站 , URL甚至是UI的一部分

To get started with your web.py application, open up a new text file (let's call it code.py) and type:
在开始你的web.py程序之前,打开一个文本文件（文件名为code.py）输入:

This imports the web.py module.
这条语句会导入web.py模块

Now we need to tell web.py our URL structure.
现在我们需要把我们的URL结构告诉web.py

Let's start out with something simple:
让我从下面这个简单的例子开始:

The first part is a regular expressions that matches a URL, like /, /help/faq, /item/(\d+), etc.
第一部分是匹配URL的正则表达式，像/、/help/faq、/item/(\d+)等(\d+将匹配数字)

(i.e.
圆括号表示捕捉对应的数据以便后面使用

\d+ would match a sequence of digits).
第二部分是接受请求的类名称，像index、view、welcomes.hello (welcomes模块的hello类)，或者get_\1

The parentheses say to capture that piece of the matched data for use later on.
\1 会被正则表达式捕捉到的内容替换，剩下来捕捉的的内容将被传递到你的函数中去

This line says we want the URL / (i.e.
这行表示我们要URL/(首页)被一个叫index的类处理

GET and POST: the difference
GET和POST: 区别

Now we need to write the index class.
现在我们需要来写index类

While most people don't notice it just browsing around, your browser uses a language known as HTTP for communicating with the World Wide Web.
虽然大多数人只会看看，并不会注意你的浏览器在使用用于与万维网通信的HTTP语言

The details aren't important, but the basic idea is that Web visitors ask web servers to perform certain functions (like GET or POST) on URLs (like / or /foo?f=1).
具体的细节并不重要，但是要理解web访问者请求web服务器去根据URL(像/、/foo

GET is the one we're all familiar with, the one used to request the text of a web page.
GET是我们都熟悉的

When you type harvard.edu into your web browser, it literally asks the Harvard web server to GET /.
它用于请求网页文本

The second-most famous, POST, is often used when submitting certain kinds of forms, like a request to purchase something.
当你在浏览器输入harvard.edu，它会直接访问Harvard的web服务器，去GET /

You use POST whenever the act of submitting a request does something (like charge your credit card and process an order).
 第二个最有名的是POST，它经常被用在提交form，比如请求买什么东西

This is key, because GET URLs can be passed around and indexed by search engines, which you definitely want for most of your pages but definitely don't want for things like processing orders (imagine if Google tried to buy everything on your site!).
每当提交一个去做什么事情(像使用信用卡处理一笔交易)的请求时，你可以使用POST

In our web.py code, we make the distinction between the two clear:
在我们web.py的代码中，我们将这两个方法明确区分:

This GET function will now get called by web.py anytime someone makes a GET request for /.
当有人用GET请求/时，这个GET函数随时会被web.py调用

Now we need to create an application specifying the urls and a way to tell web.py to start serving web pages:
好了，限制我们只需要最后一句就写完了

First we tell web.py to create an application with the URLs we listed above, looking up the classes in the global namespace of this file.
这会告诉web.py为我们启动上面我们写的应用

Now notice that although I've been talking a lot here, we only really have five or so lines of code.
现在注意，即使我已经在这里说了很多，但我们真正有5行这些代码

That's all you need to make a complete web.py application.
这就是你需要编写的一个完整的web.py应用

For easier access, here's how your code should look like:
为了更方便的使用，你的完整代码应该像下面这样:

Start the server
启动服务

If you go to your command line and type:
如果你在命令行下面，请输入:: $ python code.py http://0.0.0.0:8080/

You now have your web.py application running a real web server on your computer.
现在你的web.py应用正运行在你电脑上的一个真正的web服务器上

Visit that URL and you should see "Hello, world!" (You can add an IP address/port after the "code.py" bit to control where web.py launches the server.
 访问那个URL，然后你应该看到"Hello, world!" (你可以通过把IP地址/端口加在"code.py"的后面，来控制web.py在哪里启动服务器

You can also tell it to run a fastcgi or scgi server.)
你也可以让它运行在fastcgi或scgi服务器上)

Note: You can specify the port number to use on the command line like this if you can't or don't want to use the default:
注意: 如果你不能或者不想使用默认端口，你可以使用这样的命令来指定端口号:

Templating
模板

Writing HTML from inside Python can get cumbersome;
在 Python 中写 HTML 不是聪明的选择，相反在 HTML 中写 Python 则有趣的多

it's much more fun to write Python from inside HTML.
幸运的是，web.py 让这件事情做得简单而又漂亮

Let's make a new directory for our templates (we'll call it templates).
给模板新建一个目录（命名为 templates），在该目录下新建一个以 .html 结尾的文件，内容如下：

Or you can use web.py's templating language to add code to your HTML:
你也可以在模板中使用 web.py 模板支持代码：

As you can see, the templates look a lot like Python files except for the def with statement at the top (saying what the template gets called with) and the $s placed in front of any code.
如上，该模板看起来就像 python 文件一样，除了顶部的 def with (表示从模板将从这后面取值)和总是位于代码段之前的$

Currently, template.py requires the $def statement to be the first line of the file.
当前，template.py 首先请求模板文件的首行 $def 

Also, note that web.py automatically escapes any variables used here, so that if for some reason name is set to a value containing some HTML, it will get properly escaped and appear as plain text.
当然，你要注意 web.py 将会转义任何任何用到的变量，所以当你将 name 的值设为是一段 HTML 时，它会被转义显示成纯文本

If you want to turn this off, write $:name instead of $name.
如果要关闭该选项，可以写成 $:name 来代替 $name

Now go back to code.py.
回看再看 code.py

Under the first line, add:
在第一行之下添加：

This tells web.py to look for templates in your templates directory.
这会告诉web.py到你的模板目录中去查找模板

Then change index.GET to:
然后把 index.GET改成: 告诉 web.py 在你的模板目录下查找模板文件

('index' is the name of the template and 'name' is the argument passed to it)
（'index' 是模板的名字，'name' 是传入模板的一个参数）

Visit your site and it should say hello to Bob.
访问站点它将显示 hello Bob

But let's say we want to let people enter their own name in.
但是如果我们想让用户自行输入他的名字，么办

Replace the two lines we added above with:
如下：

Visit / and it should say hello to the world.
访问 / 将显示 hello world，访问 /

Visit /?name=Joe and it should say hello to Joe.
name=Joe 将显示 hello Joe

Of course, having that ?
URL 的后面的 

in the URL is kind of ugly.
 看起来不好看

Instead, change your URL line at the top to:
修改下 URL 配置：

and change the definition of index.GET to:
然后修改下 index.GET：

and delete the line setting name.
现在访问 /Joe 看看，它会显示 hello Joe

If you wish to learn more about web.py templates, visit the templetor page.
如果学习更多关于 web.py 的模板处理，请访问 web.py 模板.

Forms
表单

The form module of web.py allows the ability to generate html forms, get user input, and validate it before processing it or adding it to a database.
web.py的form模块能够帮助你生成HTML表单

If you want to learn more about using the module forms web.py, see the Documentation or direct link to Form Library
获取用户的输入，并在处理或添加到数据库之前对其进行内容的验证

Databasing
数据库操作

Note: Before you can start using a database, make sure you have the appropriate database library installed.
注意: 在你开始使用数据库之前，确保你已经安装了合适的数据库访问库

For MySQL databases, use MySQLdb and for Postgres use psycopg2.
比如对于MySQL数据库，使用 MySQLdb ，对于Postgres数据库使用psycopg2

First you need to create a database object.
首先你需要创建一个数据库对象

(Adjust these -- especially username, password, and dbname -- for your setup.
(根据需要修改这里 -- 尤其是username 、 password 、 dbname -- 

MySQL users will also want to change dbn definition to mysql.)
 MySQL用户还需要把 dbn 定义改为 mysql

That's all you need to do -- web.py will automatically handle connecting and disconnecting from the database.
这就是所有你需要做的 -- web.py将会自动处理与数据库的连接和断开

Using your database engines admin interface, create a simple table in your database:
使用的的数据库引擎管理工具，在你的库中创建一个简单的表:

And an initial row:
然后初始化行:

Return to editing code.py and change index.GET to the following, replacing the entire function:
我们回来继续编辑 code.py ，把 index.GET 改成下面的样子，替换整个函数:

and change back the URL handler to take just / as in:
然后把URL列表改回来，只保留 /:

Edit and replace the entire contents of index.html so that it reads:
像这样编辑并替换 index.html 的全部内容:

Visit your site again and you should see your one todo item: "Learn web.py".
再访问你的网站，然后你可以看到你的todo item: "Learn web.py"

Congratulations!
恭喜你

You've made a full application that reads from the database.
你已经完整地写好了一个可以从数据库读取数据的程序

Now let's let it write to the database as well.
现在让我们同样再写一个可以把数据写入数据库的程序

At the end of index.html, add:
在 index.html尾部添加:

And change your URLs list to read:
然后把你的URL列表改为:

(You've got to be very careful about those commas.
(你必须要非常小心那些逗号

If you omit them, Python adds the strings together and sees '/index/addadd' instead of your list of URLs!)
如果你省略他们，Python会把所有字符串连接起来,变成 '/index/addadd')

Now add another class:
现在添加另一个类:

(Notice how we're using POST for this?)
(注意现在我们正在使用 POST)

web.input gives you access to any variables the user submitted through a form.
web.input 可以让你访问用户通过form提交的任何数据

Note: In order to access data from multiple identically-named items, in a list format (e.g.: a series of check-boxes all with the attribute name="name") use:
注意: 如果要访问多个相同名字的字段，请使用list的格式(比如:一串name="name"的多选框):

db.insert inserts values into the database table todo and gives you back the ID of the new row.
db.insert 把数据插入数据表 todo ，然后把新的行号返回给你

seeother redirects users to that URL.
 seeother 把用户重定向到指定的URL

Some quick additional notes: db.update works just like db.insert except instead of returning the ID it takes it (or a string WHERE clause) after the table name.
一些快速补充说明: db.update 与 db.insert 差不多，除了它返回的行号是直接从sql语句里面提取的(WHERE ID=2)

web.input, db.query, and other functions in web.py return "Storage objects", which are just like dictionaries except you can do d.foo in addition to d['foo'].
web.input、 db.query已经其他web.py中的函数返回"Storage objects"，这些东西就像字典，你除了可以 d['foo']之外，你还可以 d.foo

This really cleans up some code.
这可以让代码更加干净

You can find the full details on these and all the web.py functions in the documentation.
你可以在the documentation找到这方面具体的细节以及所有web.py的函数说明

Developing
开发

web.py also has a few tools to help us with debugging.
web.py 还有一些帮助我们debug的工具

When running with the built-in webserver, it starts the application in debug mode.
当它在内建的服务器中运行时，它会一debug模式启动程序

In debug mode any changes to code and templates are automatically reloaded and error messages will have more helpful information.
在debug模式中，任何代码、模板的修改，都会让服务器重新加载它们，然后还会输出有用的错误消息

The debug is not enabled when the application is run in a real webserver.
只有在生产环境中debug模式是关闭的

If you want to disable the debug mode, you can do so by adding the following line before creating your application/templates.
如果你想禁用debug模式，你可以在创建程序/模板前添加像这样的行

What Next ?
下一步是什么

This ends the tutorial for now.
我们的指南就到这里了

Take a look at the cookbook and the code examples for lots more cool stuff you can do with web.py.
如果要做更多很酷的东西，你可以先查看一下文档

