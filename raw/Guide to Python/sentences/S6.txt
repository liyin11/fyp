Code Style¶
代码风格¶

If you ask Python programmers what they like most about Python, they will often cite its high readability.
如果你问Python程序员最喜欢Python的什么，他们总会说是Python的高可读性

Indeed, a high level of readability is at the heart of the design of the Python language, following the recognized fact that code is read much more often than it is written.
 事实上，高度的可读性是Python语言的设计核心

One reason for the high readability of Python code is its relatively complete set of Code Style guidelines and “Pythonic” idioms.
Python代码易读和易懂的其中一个原因是它的相对完整的代码风格指引和 “Pythonic” 的风格

When a veteran Python developer (a Pythonista) calls portions of code not “Pythonic”, they usually mean that these lines of code do not follow the common guidelines and fail to express its intent in what is considered the best (hear: most readable) way.
此外，当一位富有经验的Python开发者（Pythonista）指出某段代码并不 “Pythonic”， 这通常意味着这些代码并没有遵循通用的指导方针，也没有用最佳的（最可读的）方式 来表达意图

On some border cases, no best way has been agreed upon on how to express an intent in Python code, but these cases are rare.
在某些边缘情况下，Python代码中并没有大家都认同的表达意图的最佳方式，但这些情况 都很少见

General concepts¶
一般概念¶

While any kind of black magic is possible with Python, the most explicit and straightforward manner is preferred.
在存在各种黑魔法的Python中，我们提倡最明确和直接的编码方式

Bad
糟糕

Good
优雅

In the good code above, x and y are explicitly received from the caller, and an explicit dictionary is returned.
在上述优雅的代码中，x和y以明确的字典形式返回给调用者

The developer using this function knows exactly what to do by reading the first and last lines, which is not the case with the bad example.
开发者在使用 这个函数的时候通过阅读第一和最后一行，能够正确地知道该做什么

While some compound statements such as list comprehensions are allowed and appreciated for their brevity and their expressiveness, it is bad practice to have two disjointed statements on the same line of code.
复合语句（比如说列表推导）因其简洁和表达性受到推崇，但在同一行代码中写 两条独立的语句是糟糕的

Bad
糟糕

Good
优雅

Arguments can be passed to functions in four different ways.
将参数传递给函数有四种不同的方式：

In those two cases, it is possible to use argument names when calling the functions and, doing so, it is possible to switch the order of arguments, calling for instance send(recipient='World', message='Hello') and point(y=2, x=1) but this reduces readability and is unnecessarily verbose, compared to the more straightforward calls to send('Hello', 'World') and point(1, 2).
在这两种情况下，当调用函数的时候可以使用参数名称，也可以改变参数的顺序，比如说 send(recipient='World', message='Hello') 和 point(y=2, x=1)

Calling a function with keyword arguments can be done in multiple ways in Python, for example it is possible to follow the order of arguments in the definition without explicitly naming the arguments, like in send('Hello', 'World', 'Cthulhu', 'God'), sending a blind carbon copy to God.
Python中有多种方式调用带关键字参数的函数

It would also be possible to name arguments in another order, like in send('Hello again', 'World', bcc='God', cc='Cthulhu').
比如说，我们可以按定义中的参数顺序而无需 明确的命名参数来调用函数，就像 send('Hello', 'World', 'Cthulhu', 'God') 是将密件 发送给上帝

Those two possibilities are better avoided without any strong reason to not follow the syntax that is the closest to the function definition: send('Hello', 'World', cc='Cthulhu', bcc='God').
我们也可以使用命名参数而无需遵循参数顺序来调用函数，就像 send('Hello again', 'World', bcc='God', cc='Cthulhu') 

As a side note, following YAGNI principle, it is often harder to remove an optional argument (and its logic inside the function) that was added “just in case” and is seemingly never used, than to add a new optional argument and its logic when needed.
作为附注，请遵循 YAGNI 原则

However, this construct has some drawbacks and should be used with caution.
尽管如此，这种结构有一些缺点，使用时应该予以注意

If a function receives a list of arguments of the same nature, it is often more clear to define it as a function of one argument, that argument being a list or any sequence.
如果一个函数接受的参数列表具有 相同的性质，通常把它定义成一个参数，这个参数是一个列表或者其他任何序列会更清晰

Here, if send has multiple recipients, it is better to define it explicitly: send(message, recipients) and call it with send('Hello', ['God', 'Mom', 'Cthulhu']).
 在这里，如果 send 参数有多个容器（recipients），将之定义成 send(message, recipients) 会更明确，调用它时就使用 send('Hello', ['God', 'Mom', 'Cthulhu'])

This way, the user of the function can manipulate the recipient list as a list beforehand, and it opens the possibility to pass any sequence, including iterators, that cannot be unpacked as other sequences.
这样的话， 函数的使用者可以事先将容器列表维护成列表（list）形式，这为传递各种不能被转变成 其他序列的序列（包括迭代器）带来了可能

The same caution as in the case of arbitrary argument list is necessary, for similar reasons: these powerful techniques are to be used when there is a proven necessity to use them, and they should not be used if the simpler and clearer construct is sufficient to express the function’s intention.
和 *任意参数列表*中所需注意的一样，相似的原因是：这些强大的技术是用在被证明确实 需要用到它们的时候，它们不应该被用在能用更简单和更明确的结构，来足够表达函数意图 的情况中

It is up to the programmer writing the function to determine which arguments are positional arguments and which are optional keyword arguments, and to decide whether to use the advanced techniques of arbitrary argument passing.
编写函数的时候采用何种参数形式，是用位置参数，还是可选关键字参数，是否使用形如任意参数 的高级技术，这些都由程序员自己决定

If the advice above is followed wisely, it is possible and enjoyable to write Python functions that are:
如果能明智地遵循上述建议，就可能且非常享受地写出 这样的Python函数：

A powerful tool for hackers, Python comes with a very rich set of hooks and tools allowing you to do almost any kind of tricky tricks.
Python 对骇客来说是一个强有力的工具，它拥有非常丰富的钩子（hook）和工具，允许 你施展几乎任何形式的技巧

For instance, it is possible to do each of the following:
比如说，它能够做以下每件事：

However, all these options have many drawbacks and it is always better to use the most straightforward way to achieve your goal.
尽管如此，所有的这些选择都有许多缺点

The main drawback is that readability suffers greatly when using these constructs.
使用更加直接的方式来达成目标通常是更好的 方法

Many code analysis tools, such as pylint or pyflakes, will be unable to parse this “magic” code.
它们最主要的缺点是可读性不高

We consider that a Python developer should know about these nearly infinite possibilities, because it instills confidence that no impassable problem will be on the way.
我们认为Python开发者应该知道这些近乎无限的可能性，因为它为我们灌输了没有不可能 完成的任务的信心

However, knowing how and particularly when not to use them is very important.
然而，知道如何，尤其是何时 不能 使用它们是非常重要的

Like a kung fu master, a Pythonista knows how to kill with a single finger, and never to actually do it.
就像一位功夫大师，一个Pythonista知道如何用一个手指杀死对方，但从不会那么去做

As seen above, Python allows many tricks, and some of them are potentially dangerous.
如前所述，Python允许很多技巧，其中一些具有潜在的危险

A good example is that any client code can override an object’s properties and methods: there is no “private” keyword in Python.
一个好的例子是：任何客户端 代码能够重写一个对象的属性和方法（Python中没有 “private” 关键字）

This philosophy, very different from highly defensive languages like Java, which give a lot of mechanisms to prevent any misuse, is expressed by the saying: “We are all responsible users”.
这种哲学 是在说：“我们都是负责任的用户”，它和高度防御性的语言（如Java，拥有很多机制来预防 错误的使用）有着非常大的不同

This doesn’t mean that, for example, no properties are considered private, and that no proper encapsulation is possible in Python.
这并不意味着，比如说，Python中没有属性是私有的，也不意味着没有合适的封装方法

Rather, instead of relying on concrete walls erected by the developers between their code and other’s, the Python community prefers to rely on a set of conventions indicating that these elements should not be accessed directly.
 与其依赖在开发者的代码之间树立起的一道道隔墙，Python社区更愿意依靠一组约定，来 表明这些元素不应该被直接访问

The main convention for private properties and implementation details is to prefix all “internals” with an underscore.
私有属性的主要约定和实现细节是在所有的“内部”变量前加一个下划线

If the client code breaks this rule and accesses these marked elements, any misbehavior or problems encountered if the code is modified is the responsibility of the client code.
如果客户端代码 打破了这条规则并访问了带有下划线的变量，那么因内部代码的改变而出现的任何不当的行为或问题，都是客户端代码的责任

Using this convention generously is encouraged: any method or property that is not intended to be used by client code should be prefixed with an underscore.
鼓励“慷慨地”使用此约定：任何不开放给客户端代码使用的方法或属性，应该有一个下划线 前缀

This will guarantee a better separation of duties and easier modification of existing code;
这将保证更好的职责划分以及更容易对已有代码进行修改

it will always be possible to publicize a private property, but making a public property private might be a much harder operation.
将一个私有属性公开化 总是可能的，但是把一个公共属性私有化可能是一个更难的选择

When a function grows in complexity it is not uncommon to use multiple return statements inside the function’s body.
当一个函数变得复杂，在函数体中使用多返回值的语句并不少见

However, in order to keep a clear intent and a sustainable readability level, it is preferable to avoid returning meaningful values from many output points in the body.
然而，为了保持函数 的明确意图以及一个可持续的可读水平，更建议在函数体中避免使用返回多个有意义的值

There are two main cases for returning values in a function: the result of the function return when it has been processed normally, and the error cases that indicate a wrong input parameter or any other reason for the function to not be able to complete its computation or task.
在函数中返回结果主要有两种情况：函数正常运行并返回它的结果，以及错误的情况，要么 因为一个错误的输入参数，要么因为其他导致函数无法完成计算或任务的原因

If you do not wish to raise exceptions for the second case, then returning a value, such as None or False, indicating that the function could not perform correctly might be needed.
如果你在面对第二种情况时不想抛出异常，返回一个值（比如说None或False）来表明 函数无法正确运行，可能是需要的

In this case, it is better to return as early as the incorrect context has been detected.
在这种情况下，越早返回所发现的不正确上下文越好

It will help to flatten the structure of the function: all the code after the return-because-of-error statement can assume the condition is met to further compute the function’s main result.
 这将帮助扁平化函数的结构：在“因为错误而返回”的语句后的所有代码能够假定条件满足 接下来的函数主要结果的运算

Having multiple such return statements is often necessary.
有多个这样的返回结果通常是需要的

However, when a function has multiple main exit points for its normal course, it becomes difficult to debug the returned result, so it may be preferable to keep a single exit point.
尽管如此，当一个函数在其正常过程中有多个主要出口点时，它会变得难以调试和返回其 结果，所以保持单个出口点可能会更好

This will also help factoring out some code paths, and the multiple exit points are a probable indication that such a refactoring is needed.
这也将有助于提取某些代码路径，而且多个出口点 很有可能意味着这里需要重构

Idioms¶
习语（Idiom）¶

A programming idiom, put simply, is a way to write code.
编程习语，说得简单些，就是写代码的 方式

The notion of programming idioms is discussed amply at c2 and at Stack Overflow.
编程习语的概念在 c2 和 Stack Overflow 上有充足的讨论

Idiomatic Python code is often referred to as being Pythonic.
采用习语的Python代码通常被称为 Pythonic

Although there usually is one — and preferably only one — obvious way to do it;
尽管通常有一种 — 而且最好只有一种 — 明显的方式去写得Pythonic

the way to write idiomatic Python code can be non-obvious to Python beginners.
对Python 初学者来说，写出习语式的Python代码的 方式 并不明显

So, good idioms must be consciously acquired.
所以，好的习语必须 有意识地获取

Some common Python idioms follow:
如下有一些常见的Python习语：

If you know the length of a list or tuple, you can assign names to its elements with unpacking.
如果你知道一个列表或者元组的长度，你可以将其解包并为它的元素取名

For example, since enumerate() will provide a tuple of two elements for each item in list:
比如， enumerate() 会对list中的每个项提供包含两个元素的元组：

You can use this to swap variables as well:
你也能通过这种方式交换变量：

Nested unpacking works too:
嵌套解包也能工作：

In Python 3, a new method of extended unpacking was introduced by PEP 3132:
在Python 3中，扩展解包的新方法在 PEP 3132 有介绍：

If you need to assign something (for instance, in Unpacking) but will not need that variable, use __:
如果你需要赋值（比如，在 解包（Unpacking） ）但不需要这个变量，请使用 __:

Note
使用Python列表中的 * 操作符：

Many Python style guides recommend the use of a single underscore “_” for throwaway variables rather than the double underscore “__” recommended here.
因为列表是可变的，所以 * 操作符（如上）将会创建一个包含N个且指向 同一个 列表的列表，这可能不是你想用的

The issue is that “_” is commonly used as an alias for the gettext() function, and is also used at the interactive prompt to hold the value of the last operation.
取而代之，请使用列表解析：

Use the Python list * operator:
创建字符串的一个常见习语是在空的字符串上使用 str.join() 

Because lists are mutable, the * operator (as above) will create a list of N references to the same list, which is not likely what you want.
这会将 word 变量赋值为 ‘spam’

Instead, use a list comprehension:
这个习语可以用在列表和元组中

Note: Use range() instead of xrange() in Python 3
有时我们需要在集合体中查找

A common idiom for creating strings is to use str.join() on an empty string.
用如下代码举个例子：

This will set the value of the variable word to ‘spam’.
即使两个函数看起来完全一样，但因为 查找集合 是利用了Python中的集合是可哈希的 特性，两者的查询性能是非常不同的

This idiom can be applied to lists and tuples.
为了判断一个项是否在列表中，Python将会查看 每个项直到它找到匹配的项

Sometimes we need to search through a collection of things.
因为这些性能上的差异，在下列场合在使用集合或者字典而不是列表，通常会是个好主意：

Take the following code for example:
对于小的集合体，或者你不会频繁查找的集合体，建立哈希带来的额外时间和内存的 开销经常会大过改进搜索速度所节省的时间

For small collections, or collections which you will not frequently be searching through, the additional time and memory required to set up the hashtable will often be greater than the time saved by the improved search speed.
又名 PEP 20, Python设计的指导原则

PEP 8 is the de-facto code style guide for Python.
PEP 8 是Python事实上的代码风格指南

This is highly recommended reading.
你的Python代码遵循 PEP 8 通常是个好主意，当和其他开发者一起维护项目时， 这帮助使代码更加具有可持续性

The entire Python community does their best to adhere to the guidelines laid out within this document.
这个命令行程序，pep8, 能够检查你的代码的一致性

Some project may sway from it from time to time, while others may amend its recommendations.
在你的终端中运行下列命令：

That being said, conforming your Python code to PEP 8 is generally a good idea and helps make code more consistent when working on projects with other developers.
然后，对一个文件或者一系列的文件运行它，来获得任何违规行为的报告

Then run it on a file or series of files to get a report of any violations.
程序 autopep8 能自动将代码格式化 成 PEP 8 风格

The program autopep8 can be used to automatically reformat code in the PEP 8 style.
用以下指令格式化一个文件：

Use it to format a file in-place with:
不包含 --in-place 标志将会使得程序直接将更改的代码输出到控制台，以供审查

Here are some conventions you should follow to make your code easier to read.
这里有一些你应该遵循的约定，以让你的代码更加易读

You don’t need to explicitly compare a value to True, or None, or 0 - you can just add it to the if statement.
你不需要明确地比较一个值是True，或者None，或者0 - 你可以仅仅把它放在if语句中

See Truth Value Testing for a list of what is considered false.
 参阅 真值测试 来了解什么被认为是false

Bad:
糟糕:

Good:
优雅:

Don’t use the dict.has_key() method.
Don’t use the dict.has_key() method. Instead, use x in d syntax, or pass a default argument to dict.get(). 不要使用 dict.has_key() 方法

Instead, use x in d syntax, or pass a default argument to dict.get().
取而代之，使用 x in d 语法，或者 将一个默认参数传递给 dict.get()

Bad:
糟糕:

Good:
优雅:

List comprehensions provide a powerful, concise way to work with lists.
列表推导 提供了一个强大的而又简洁的方式来处理列表

Also, the map() and filter() functions can perform operations on lists using a different, more concise syntax.
而且， map() 和 filter() 函数用用一种不同且更简洁的语法处理列表

Bad:
糟糕:

Good:
优雅:

Bad:
糟糕:

Good:
优雅:

Use enumerate() keep a count of your place in the list.
使用 enumerate() 获得列表中的当前位置的计数

The enumerate() function has better readability than handling a counter manually.
使用 enumerate() 函数比手动维护计数有更好的可读性

Moreover, it is better optimized for iterators.
而且，它对迭代器 进行了更好的优化

Use the with open syntax to read from files.
使用 with open 语法来读取文件

This will automatically close files for you.
它将会为你自动关闭文件

Bad:
糟糕:

Good:
优雅:

The with statement is better because it will ensure you always close the file, even if an exception is raised inside the with block.
with 语句会更好，因为它能确保你总是关闭文件，及时是在 with 的区块中 抛出一个异常

When a logical line of code is longer than the accepted limit, you need to split it over multiple physical lines.
当一个代码逻辑行的长度超过可接受的限度时，你需要将之分为多个物理行

The Python interpreter will join consecutive lines if the last character of the line is a backslash.
如果行的结尾 是一个反斜杠（），Python解释器会把这些连续行拼接在一起

This is helpful in some cases, but should usually be avoided because of its fragility: a white space added to the end of the line, after the backslash, will break the code and may have unexpected results.
这在某些情况下很有帮助， 但我们总是应该避免使用，因为它的脆弱性：如果在行的结尾，在反斜杠后加了空格，这会 破坏代码，而且可能有意想不到的结果

A better solution is to use parentheses around your elements.
一个更好的解决方案是在元素周围使用括号

Left with an unclosed parenthesis on an end-of-line the Python interpreter will join the next line until the parentheses are closed.
左边以一个未闭合的括号开头，Python 解释器会把行的结尾和下一行连接起来直到遇到闭合的括号

The same behavior holds for curly and square braces.
同样的行为适用中括号 和大括号

Bad:
糟糕:

Good:
优雅:

However, more often than not, having to split a long logical line is a sign that you are trying to do too many things at the same time, which may hinder readability.
尽管如此，通常情况下，必须去分割一个长逻辑行意味着你同时想做太多的事，这 可能影响可读性

