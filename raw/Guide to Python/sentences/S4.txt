Installing Python on Linux¶
在Linux上安装Python¶

The latest versions of CentOS, Fedora, Redhat Enterprise (RHEL) and Ubuntu come with Python 2.7 out of the box.
最新版本的CentOS, Fedora, Redhat企业版(RHEL)和Ubuntu 自带 Python 2.7

To see which version of Python you have installed, open a command prompt and run
想要获取已安装的Python版本号，可以通过终端运行命令：

Some older versions of RHEL and CentOS come with Python 2.4 which is unacceptable for modern Python development.
部分旧版本的RHEL和CentOS系统自带Python 2.4，该版本已不被目前的Python应用接受

Fortunately, there are Extra Packages for Enterprise Linux which include high quality additional packages based on their Fedora counterparts.
幸运的是， Extra Packages for Enterprise Linux (epel, 企业版Linux的额外软件包)基于Fedora的版本提供高质量 的附加软件包，该仓库包含与系统自带的Python 2.4共同安装好的Python 2.6

You do not need to install or configure anything else to use Python.
你不必安装和配置即可直接使用Python进行开发

Having said that, I would strongly recommend that you install the tools and libraries described in the next section before you start building Python applications for real-world use.
话虽如此，我还是强烈建议各位，在正式开始Python应用 开发前，安装接下来教程中所介绍的工具和库

In particular, you should always install Setuptools and pip, as it makes it much easier for you to use other third-party Python libraries.
特别应该安装Setuptools和pip，它们将简化安装和使用 Python第三方库的流程

Setuptools & Pip¶
Setuptools & Pip¶

The two most crucial third-party Python packages are setuptools and pip.
setuptools 和 pip 是最重要的两个Python第三方软件包

Once installed, you can download, install and uninstall any compliant Python software product with a single command.
Python 2.7.9 以及之后版本(Python2 系列)，和Python 3.4以及之后版本均默认包含pip

Python 2.7.9 and later (on the python2 series), and Python 3.4 and later include pip by default.
运行以下命令行代码检查pip是否已经安装：

To see if pip is installed, open a command prompt and run
参考官方pip安装指南 获取pip工具，并自动安装最新版本的setuptools

A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them.
虚拟环境工具(virturalenv)通过为不同项目创建专属的Python虚拟环境，以实现其依赖的库独立保存在不同的路径

It solves the “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global site-packages directory clean and manageable.
 这解决了“项目X依赖包版本1.x，但项目Y依赖包版本为4.x”的难题, 并且维持全局的site-packages目录干净、易管理

For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.
举个例子，通过这个工具可以实现依赖Django 1.3的项目与依赖Django 1.0的项目共存

To start using this and see more information: Virtual Environments docs.
进一步了解与使用请参考文档 Virtual Environments 

You can also use virtualenvwrapper to make it easier to manage your virtual environments.
也可使用 virtualenvwrapper 更轻松地管理你的虚拟环境

This page is a remixed version of another guide, which is available under the same license.
该页是 另一份指南 的混合版本，可通过同一份许可获取

Follow @kennethreitz
本指南目前持续不断地更新与完善

Join Mailing List.
获得新版本和未来项目的更新

This guide is now available for pre-order in tangible book form!
订阅Newsletter

