Testing Your Code¶
测试你的代码¶

Testing your code is very important.
测试你的代码非常重要

Getting used to writing testing code and running this code in parallel is now considered a good habit.
常常将测试代码和运行代码一起写是一种非常好的习惯

Used wisely, this method helps you define more precisely your code’s intent and have a more decoupled architecture.
聪明地使用这种方法将会帮助你更加精确地定义代码的含义，并且代码的耦合性更低

Some general rules of testing:
测试的通用规则：

The Basics¶
基本¶

unittest is the batteries-included test module in the Python standard library.
unittest 包括Python标准库中的测试模型

Its API will be familiar to anyone who has used any of the JUnit/nUnit/CppUnit series of tools.
任何一个使用过Junit，nUnit,或CppUnit工具的人对它的API都会比较熟悉

Creating test cases is accomplished by subclassing unittest.TestCase.
创建测试用例通过继承 unittest.TestCase 来实现.

As of Python 2.7 unittest also includes its own test discovery mechanisms.
因为Python 2.7单元测试也包括自己的发现机制

The doctest module searches for pieces of text that look like interactive Python sessions in docstrings, and then executes those sessions to verify that they work exactly as shown.
doctest模块的用例相比之前的单元测试有所不同：它们通常不是很详细，并且不会用特别的用例或者处理模糊的回归bug

Doctests have a different use case than proper unit tests: they are usually less detailed and don’t catch special cases or obscure regression bugs.
在函数中一个简单的doctest:

A simple doctest in a function:
从命令行中运行这个模块时，doctest模块将会运行并且细述是否一切如docstrings中描述一样工作良好

py.test is a no-boilerplate alternative to Python’s standard unittest module.
相比于Python标准的单元测试模块,py.test是一个没有模板的选择

Despite being a fully-featured and extensible test tool, it boasts a simple syntax.
尽管这个测试工具功能完备，并且可扩展，但是它语法很简单

Creating a test suite is as easy as writing a module with a couple of functions:
创建一个测试组件和写一个带有诸多函数的模块一样容易：

and then running the py.test command
运行命令py.test

is far less work than would be required for the equivalent functionality with the unittest module!
要比单元测试模型中相同功能所要求的工作量少得多

nose extends unittest to make testing easier.
nose继承测试单元，能够使测试更加容易

nose provides automatic test discovery to save you the hassle of manually creating test suites.
nose自动化测试发现并节省人工创建测试组件的麻烦

It also provides numerous plugins for features such as xUnit-compatible test output, coverage reporting, and test selection.
它也提供各种插件，例如xUnit兼容性测试输出，覆盖度报告和测试选择

tox is a tool for automating test environment management and testing against multiple interpreter configurations
tox是自动化测试管理和针对多种解释器配置测试工具

tox allows you to configure complicated multi-parameter test matrices via a simple ini-style configuration file.
tox允许通过简单的初始化样式配置文件，配置复杂的多参数测试矩阵

unittest2 is a backport of Python 2.7’s unittest module which has an improved API and better assertions over the one available in previous versions of Python.
Unittest2是Python2.7中unittest模型的补丁，它的API有所改善，并且对Python之前版本中已有的内容有了更好的说明

If you’re using Python 2.6 or below, you can install it with pip
如果使用Python2.6版本或者以下，需要使用pip安装unittest2

You may want to import the module under the name unittest to make porting code to newer versions of the module easier in the future
将来你可能想要以unittest之名导入模块，目的是更容易地把代码移植到新的版本中

This way if you ever switch to a newer Python version and no longer need the unittest2 module, you can simply change the import in your test module without the need to change any other code.
如果切换到新的Python版本，并且不再需要unittest2模块，你只需要在测试模块中改变import内容，而不必改变其它代码

unittest.mock is a library for testing in Python.
unittest.mock 是Python中用于测试的一个库

As of Python 3.3, it is available in the standard library.
在Python3.3版本中，标准库中就有

For older versions of Python:
对于Python相对早的版本，如下操作：

It allows you to replace parts of your system under test with mock objects and make assertions about how they have been used.
在测试环境下，使用mock对象能够替换部分系统，并且对它们如何被使用做了声明

For example, you can monkey-patch a method:
例如，你可以对一个方法打猴子补丁：

To mock classes or objects in a module under test, use the patch decorator.
在测试环境下，对于模型中的mock类或对象，使用补丁修饰器

In the example below, an external search system is replaced with a mock that always returns the same result (but only for the duration of the test).
在下面这个例子中，一直返回相同结果的外部查询系统使用mock替换（但仅用在测试期间）

Mock has many other ways you can configure it and control its behavior.
mock有许多其它方法，你可以配置它，并且控制它的动作

Follow @kennethreitz
本指南目前持续不断地更新与完善

Join Mailing List.
获得新版本和未来项目的更新

This guide is now available for pre-order in tangible book form!
订阅Newsletter

