Packaging Your Code¶
打包你的代码¶

Package your code to share it with other developers.
打包就是把你的代码分享给其他开发者

For example to share a library for other developers to use in their application, or for development tools like ‘py.test’.
作为例子，共享一个库给其他开发者用在 它们的应用中，或者作为一个开发工具，比如 ‘py.test’

An advantage of this method of distribution is its well established ecosystem of tools such as PyPI and pip, which make it easy for other developers to download and install your package either for casual experiments, or as part of large, professional systems.
这种分发方式的一个优势是它拥有既已建成的良好的工具生态，如PyPI与pip，其使得其他 开发者很容易下载与安装你的包，而无论是一个即兴实验还是作为一个巨型软件系统的一部分

It is a well-established convention for Python code to be shared this way.
使用这种方式共享Python代码是既已存在的传统，如果你的代码没打包到PyPI上，则它将难以 被其他开发者找到并用在它们的程序中

If your code isn’t packaged on PyPI, then it will be harder for other developers to find it, and to use it as part of their existing process.
事实上他们会怀疑这种项目是否管理不善或者已被放弃了

The downside of distributing code like this is that it relies on the recipient understanding how to install the required version of Python, and being able and willing to use tools such as pip to install your code’s other dependencies.
像这样分发代码的消极一面是它依赖使用者理解如何安装所要求的Python版本以及会并且希望 使用pip这样的工具安装你的代码及其他依赖项

This is fine when distributing to other developers, but makes this method unsuitable for distributing applications to end-users.
虽然对于其它的开发者来说这是没问题的，但 对于最终用户这并不友好

The Python Packaging Guide provides an extensive guide on creating and maintaining Python packages.
Python打包指南 提供了更多关于如何创建以及维护Python包的知识

Alternatives to Packaging¶
打包的多种方式¶

To distribute applications to end-users, you should freeze your application.
为了分发应用给最终用户，你应该 冻结你的应用

On Linux, you may also want to consider creating a Linux distro package (e.g.
在Linux，你可能想会考虑 创建一个Linux分发包 (例 对于Debian或Ubuntu是一个 .deb文件)

For Python Developers¶
对于Python开发者¶

If you’re writing an open source Python module, PyPI , more properly known as The Cheeseshop, is the place to host it.
如果你编写了一个开源的Python模块， PyPI , 更多属性参见 The Cheeseshop，这是一个放它的地方

Use pip.
Use pip. More details here

If you want to install packages from a source other than PyPI, (say, if your packages are proprietary), you can do it by hosting a simple http server, running from the directory which holds those packages which need to be installed.
使用 pip. 更多细节参见 here

Showing an example is always beneficial
如果你想要从有别于PyPI的其他源安装包（也就是说，如果你的包是 专门 （proprietary）的）， 你可以通过为自己开启一个服务器来建立一个这样的源，这个服务器应该开在你想共享的包所在位置 的文件夹下

For example, if you want to install a package called MyPackage.tar.gz, and assuming this is your directory structure:
例子总是有益的

Go to your command prompt and type:
作为例子，如果你想要共享一个叫做 MyPackage.tar.gz 的包，并且假设你的文件 结构是这样的：

This runs a simple http server running on port 9000 and will list all packages (like MyPackage).
打开你的命令行并且输入：

Having a folder with the same name as the package name is crucial here.
这运行了一个简单的http服务器，其监听端口9000并且将列出所有包（比如 MyPackage）

I got fooled by that, one time.
现在 你可以使用任何Python包安装器从你的服务器中安装 MyPackage 

But if you feel that creating a folder called MyPackage and keeping MyPackage.tar.gz inside that, is redundant, you can still install MyPackage using:
若使用Pip,你可以这样做：

Pypiserver is a minimal PyPI compatible server.
你的文件夹名字与你的包名相同是 **必须**的

It can be used to serve a set of packages to easy_install or pip.
我曾经被这个坑过一次

It includes helpful features like an administrative command (-U) which will update all its packages to their latest versions found on PyPI.
但是如果你但觉得 创建一个叫做 :file:`MyPackage`的文件夹然后里面又有一个:file:`MyPackage.tar.gz`文件 是*多余*的，你可以这样共享MyPackage:

One simple option for a personal PyPi server is to use Amazon S3.
Pypiserver 是一个精简的PyPI兼容服务器

A prerequisite for this is that you have an Amazon AWS account with an S3 bucket.
 它可以被用来让一系列包通过easy_install与pip进行共享

Creating a Linux distro package is arguably the “right way” to distribute code on Linux.
4. 上传新文件 * 使用像Cyberduck这些的客户端同步整个 packages`文件夹到你的s3 bucket * 保证你像（注意文件和路径）这样 :code:`packages/simple/index.html 上传了新的文件

Because a distribution package doesn’t include the Python interpreter, it makes the download and install about 2MB smaller than freezing your application.
*你可以安装你的包通过使用代码 pip install --index-url=http://your-s3-bucket/packages/simple/ YourPackage

The bdist_rpm command makes producing an RPM file for use by distributions like Red Hat or SuSE is trivially easy.
创建一个Linux分发包对于Linux来说是个正确的决定

However, creating and maintaining the different configurations required for each distribution’s format (e.g.
因为分发包可以不包含Python解释器，它使得下载与安装这些包可以减小2MB， freezing your application.

Creating a distribution package is also problematic if your code is for a version of Python that isn’t currently supported by a distribution.
并且，如果Python有了更新的版本，则你的应用可以自动使用新版本的Python

Having said all that, here’s how to do it:
bdist_rpm命令使得 producing an RPM file 使得像Red Hat以及SuSE使用分发包变得极其简单，

This opinionated guide exists to provide both novice and expert Python developers a best practice handbook to the installation, configuration, and usage of Python on a daily basis.
创建一个对Python版本敏感的分发包也会造成问题

Receive updates on new releases and upcoming projects.
下面是指导如何做上面所说事情的链接：

Join Mailing List.
本指南目前持续不断地更新与完善

This guide is now available for pre-order in tangible book form!
获得新版本和未来项目的更新

All proceeds are being directly donated to the DjangoGirls organization.
订阅Newsletter

More Kenneth Reitz projects:
如果你享受这份指南,想要支持作者， 请戳Gittip

Enter search terms or a module, class or function name.
输入相关的术语，模块，类或者函数名称进行搜索

