Speed¶
速度¶

CPython, the most commonly used implementation of Python, is slow for CPU bound tasks.
CPython作为最流行的Python环境，对于CPU密集型任务（CPU bound tasks）较慢，而 PyPy 则较快

Using a slightly modified version of David Beazley’s CPU bound test code (added loop for multiple tests), you can see the difference between CPython and PyPy’s processing.
使用稍作改动的 David Beazley的 CPU密集测试代码（增加了循环进行多轮测试）， 你可以看到CPython与PyPy之间的执行差距

Context¶
Context¶

The GIL (Global Interpreter Lock) is how Python allows multiple threads to operate at the same time.
GIL (全局解释器锁)是Python支持多线程并行操作的方式

Python’s memory management isn’t entirely thread-safe, so the GIL is required to prevent multiple threads from running the same Python code at once.
Python的内存管理不是 线程安全的，所以GIL被创造出来避免多线程同时运行同一个Python代码

David Beazley has a great guide on how the GIL operates.
David Beazley 有一个关于GIL如何工作的 指导 

He also covers the new GIL in Python 3.2.
他也讨论了 Python3.2中的 新GIL 他的结论是为了最大化一个Python程序的性能，应该对GIL工作方式有一个深刻的理解——它如何 影响你的特定程序，你拥有多少核，以及你程序瓶颈在哪

Special care must be taken when writing C extensions to make sure you register your threads with the interpreter.
当写一个C扩展时必须 特别关注 在解释器中注册你的线程

C Extensions¶
C 扩展¶

Cython implements a superset of the Python language with which you are able to write C and C++ modules for Python.
Cython 是Python语言的一个超集，对其你可以为Python写C 或C++模块

Cython also allows you to call functions from compiled C libraries.
Cython也使得你可以从已编译的C库中调用函数

Using Cython allows you to take advantage of Python’s strong typing of variables and operations.
使用Cython让你得以发挥Python 的变量与操作的强类型优势

Here’s an example of strong typing with Cython:
这是一个Cython中的强类型例子

This implementation of an algorithm to find prime numbers has some additional keywords compared to the next one, which is implemented in pure Python:
将这个有一些附加关键字的寻找素数算法实现与下面这个纯Python实现比较：

Notice that in the Cython version you declare integers and integer arrays to be compiled into C types while also creating a Python list:
注意，在Cython版本，在创建一个Python列表时，你声明了会被编译为C类型的整型和整型数组

What is the difference?
有什么差别呢

In the upper Cython version you can see the declaration of the variable types and the integer array in a similar way as in standard C.
在上面的Cython版本中，你可以看到变量类型与整型数组像标准C一样被声明

For example cdef int n,k,i in line 3.
 作为例子，第三行的 cdef int n,k,i 这个附加类型声明（整型）使得Cython编译器得以产生比 第二个版本更有效率的C代码

This additional type declaration (i.e.
标准Python代码以 *.py 格式保存，而Cython以

What’s the difference in speed?
速度上有什么差异呢

Let’s try it!
看看这个

These lines both need a remark:
这两行代码需要一些说明：

The pyximport module allows you to import *.pyx files (e.g., primesCy.pyx) with the Cython-compiled version of the primes function.
pyximport 使得你可以导入 *.pyx 文件，（像 primesCy.pyx 这样的）

The pyximport.install() command allows the Python interpreter to start the Cython compiler directly to generate C-code, which is automatically compiled to a *.so C-library.
 pyximport.install() 命令使Python解释器可以打开Cython编译器直接编译出 *.so 格式 的C库

Cython is then able to import this library for you in your Python code, easily and efficiently.
Cython之后可以导入这个库到你的Python代码中，简便而有效

With the time.time() function you are able to compare the time between these 2 different calls to find 500 prime numbers.
使用 time.time() 函数 你可以比较两个不同的在查找500个素数的调用长的时间消耗差异

On a standard notebook (dual core AMD E-450 1.6 GHz), the measured values are:
在一个标准笔记本中 （双核AMD E-450 1.6GHz），测量值是这样的：

And here the output of an embedded ARM beaglebone machine:
而这个是嵌入的 ARM beaglebone 机的输出结果：

Todo
待处理

Write about Numba and the autojit compiler for NumPy
Write about Numba and the autojit compiler for NumPy

Concurrency¶
Threading¶

The ProcessPoolExecutor works in the same way, except instead of using multiple threads for its workers, it will use multiple processes.
本指南目前持续不断地更新与完善

This makes it possible to side-step the GIL, however because of the way things are passed to worker processes, only picklable objects can be executed and returned.
这份主要是自我见解的指南旨在为Python初学者和专家提供一个关于Python安装、配置、和日常使用的最佳实践手册

Because of the way the GIL works, a good rule of thumb is to use a ThreadPoolExecutor when the task being executed involves a lot of blocking (i.e.
获得新版本和未来项目的更新

There are two main ways of executing things in parallel using the two Executors.
订阅Newsletter

For even more control, the submit(func, *args, **kwargs) method will schedule a callable to be executed ( as func(*args, **kwargs)) and returns a Future object that represents the execution of the callable.
如果你享受这份指南,想要支持作者， 请戳Gittip

