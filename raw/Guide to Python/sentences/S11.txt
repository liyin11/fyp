Common Gotchas¶
常见陷阱¶

For the most part, Python aims to be a clean and consistent language that avoids surprises.
大多数情况下，Python的目标是成为一门简洁和一致的语言，同时避免意外情况

However, there are a few cases that can be confusing to newcomers.
 然而，有些情况可能会使新人困惑

Some of these cases are intentional but can be potentially surprising.
其中一些情况是有意为之的，但可能有潜在的风险

Some could arguably be considered language warts.
而另一些可以说是语言的缺陷

In general, what follows is a collection of potentially tricky behavior that might seem strange at first glance, but is generally sensible once you’re aware of the underlying cause for the surprise.
 总的来说，下面是一些乍看起来很取巧的行为，不过只要你注意了强调的事项， 这些行为通常是可取的

Mutable Default Arguments¶
可变默认参数¶

Seemingly the most common surprise new Python programmers encounter is Python’s treatment of mutable default arguments in function definitions.
看起来，最 让Python程序员感到惊奇的是Python对函数定义中可变默认参数的处理

A new list is created each time the function is called if a second argument isn’t provided, so that the output is:
每次调用函数时，如果不提供第二个参数，就会创建一个新的列表，所以结果应是这样的：

A new list is created once when the function is defined, and the same list is used in each successive call.
当函数被定义时，一个新的列表就被创建 一次 ，而且同一个列表在每次成功的调用中都被使用

Python’s default arguments are evaluated once when the function is defined, not each time the function is called (like it is in say, Ruby).
当函数被定义时，Python的默认参数就被创建 一次，而不是每次调用函数的时候创建

This means that if you use a mutable default argument and mutate it, you will and have mutated that object for all future calls to the function as well.
 这意味着，如果你使用一个可变默认参数并改变了它，你 将会 在未来所有对此函数的 调用中改变这个对象

Create a new object each time the function is called, by using a default arg to signal that no argument was provided (None is often a good choice).
在每次函数调用中，通过使用指示没有提供参数的默认参数（None 通常是 个好选择），来创建一个新的对象

Sometimes you can specifically “exploit” (read: use as intended) this behavior to maintain state between calls of a function.
有时你可以专门“利用”（或者说特地使用）这种行为来维护函数调用间的状态

This is often done when writing a caching function.
这通常用于 编写缓存函数

Late Binding Closures¶
迟绑定闭包¶

Another common source of confusion is the way Python binds its variables in closures (or in the surrounding global scope).
另一个常见的困惑是Python在闭包(或在周围全局作用域（surrounding global scope）)中 绑定变量的方式

A list containing five functions that each have their own closed-over i variable that multiplies their argument, producing:
一个包含五个函数的列表，每个函数有它们自己的封闭变量 i 乘以它们的参数，得到:

Five functions are created;
五个函数被创建了，它们全都用4乘以 x 

Python’s closures are late binding.
Python的闭包是 迟绑定 

This means that the values of variables used in closures are looked up at the time the inner function is called.
 这意味着闭包中用到的变量的值，是在内部函数被调用时查询得到的

Here, whenever any of the returned functions are called, the value of i is looked up in the surrounding scope at call time.
这里，不论 任何 返回的函数是如何被调用的， i 的值是调用时在周围作用域中查询到的

By then, the loop has completed and i is left with its final value of 4.
 接着，循环完成， i 的值最终变成了4

What’s particularly nasty about this gotcha is the seemingly prevalent misinformation that this has something to do with lambdas in Python.
关于这个陷阱有一个普遍严重的误解，它被认为是和Python的 lambdas 有关

Functions created with a lambda expression are in no way special, and in fact the same exact behavior is exhibited by just using an ordinary def:
 由 lambda 表达式创建的函数并没什么特别， 而且事实上，同样的问题也出现在使用普通的 定义 上：

The most general solution is arguably a bit of a hack.
最一般的解决方案可以说是有点取巧（hack）

Due to Python’s aforementioned behavior concerning evaluating default arguments to functions (see Mutable Default Arguments), you can create a closure that binds immediately to its arguments by using a default arg like so:
由于Python拥有在前文提到的为函数默认参数 赋值的行为（参见 可变默认参数 ）,你可以创建一个立即绑定参数的闭包,像下面这样：

Alternatively, you can use the functools.partial function:
或者，你可以使用 functools.partial 函数：

Sometimes you want your closures to behave this way.
有时你就想要闭包有如此表现，迟绑定在很多情况下是不错的

Late binding is good in lots of situations.
不幸的是，循环创建 独特的函数是一种会使它们出差错的情况

These .pyc files should not be checked into your source code repositories.
本指南目前持续不断地更新与完善

Theoretically, this behavior is on by default, for performance reasons.
获得新版本和未来项目的更新

Luckily, the process of generating the bytecode is extremely fast, and isn’t something you need to worry about while developing your code.
订阅Newsletter

Those files are annoying, so let’s get rid of them!
如果你享受这份指南,想要支持作者， 请戳Gittip

