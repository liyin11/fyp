Picking an Interpreter¶
选择一个解释器¶

The State of Python (2 vs 3)¶
Python的现状 (2 vs 3)¶

When choosing a Python interpreter, one looming question is always present: “Should I choose Python 2 or Python 3”?
当选择Python解释器的时候，一个首先要面对的问题是：“我应该选择Python 2还是Python 3

The answer is not as obvious as one might think.
” 答案并不像人们想象的那么明显

The basic gist of the state of things is as follows:
现状的基本要点如下：

So, you can now see why this is not such an easy decision.
所以，你现在可以看到为什么这不是一个简单的决定了

Recommendations¶
建议¶

I’ll be blunt:
那我直言不讳：

Use Python 3 if...
使用Python 3，如果：

Use Python 2 if...
使用Python 2，如果：

So....
所以.... 3

?¶
¶

If you’re choosing a Python interpreter to use, and aren’t opinionated, then I recommend you use the newest Python 3.x, since every version brings new and improved standard library modules, security and bug fixes.
如果你想选择一种Python的解释器，你又不是固执己见的人，我推荐你用最新的Python 3.x， 因为每个版本都带来了新的改进了的标准库模块、安全性以及bug修复

Progress is progress.
进步就是进步

Given such, only use Python 2 if you have a strong reason to, such as a Python 2 exclusive library which has no adequate Python 3 ready alternative, or you (like me) absolutely love and are inspired by Python 2.
鉴于此，如果你有一个强有力的理由只用Python 2，比如Python 3 没有足够能替代的Python 2 的特有库，或者你（像我）非常喜而且受Python 2启发

Check out Can I Use Python 3?
查看 Can I Use Python 3

to see if any software you’re depending on will block your adoption of Python 3.
 来看看是否有你 依赖的软件阻止你用Python 3

Further Reading
延伸阅读

It is possible to write code that works on Python 2.6, 2.7, and Python 3.
写 能够同时兼容Python 2.6，2.7，和Python 3的代码 是可能的

This ranges from trivial to hard depending upon the kind of software you are writing;
这包括从简单到困难的各种难度，取决于你所写软件的类型

if you’re a beginner there are far more important things to worry about.
如果你是初学者，其实有更重要的东西要操心

Implementations¶
实现¶

When people speak of Python they often mean not just the language but also the CPython implementation.
当人们谈论起 Python，他们不仅是在说语言本身，还包括其CPython实现

Python is actually a specification for a language that can be implemented in many different ways.
 Python 实际上是一个可以用许多不同的方式来实现的语言规范

CPython is the reference implementation of Python, written in C.
CPython 是Python的参考实现，用C编写

It compiles Python code to intermediate bytecode which is then interpreted by a virtual machine.
它把Python代码编译成 中间态的字节码，然后由虚拟机解释

CPython provides the highest level of compatibility with Python packages and C extension modules.
CPython为Python包和C扩展模块提供了最大限度的兼容

If you are writing open-source Python code and want to reach the widest possible audience, targeting CPython is best.
如果你正在写开源的Python代码，并希望有尽可能广泛的用户，用CPython是最好的

To use packages which rely on C extensions to function, CPython is your only implementation option.
使用依赖C扩展的包，CPython是你唯一的选择

All versions of the Python language are implemented in C because CPython is the reference implementation.
所有版本的Python语言都用C实现，因为CPython是参考实现

PyPy is a Python interpreter implemented in a restricted statically-typed subset of the Python language called RPython.
PyPy 是用RPython实现的解释器

The interpreter features a just-in-time compiler and supports multiple back-ends (C, CLI, JVM).
RPython是Python的子集， 具有静态类型

PyPy aims for maximum compatibility with the reference CPython implementation while improving performance.
PyPy旨在提高性能，同时保持最大兼容性（参考CPython的实现）

If you are looking to increase performance of your Python code, it’s worth giving PyPy a try.
如果你正在寻找提高你的Python代码性能的方法，值得试一试PyPy

On a suite of benchmarks, it’s currently over 5 times faster than CPython.
在一套的基准测试下， 它目前比CPython的速度快超过5倍 

PyPy supports Python 2.7.
PyPy支持Python 2.7

PyPy3 [1], released in beta, targets Python 3.
PyPy3 [2]，发布的Beta版，支持Python 3

Jython is a Python implementation that compiles Python code to Java bytecode which is then executed by the JVM (Java Virtual Machine).
Jython 是一个将Python代码编译成Java字节码的实现， 运行在JVM (Java Virtual Machine) 上

Additionally, it is able to import and use any Java class like a Python module.
另外，它可以像是用Python模块一样，导入 并使用任何Java类

If you need to interface with an existing Java codebase or have other reasons to need to write Python code for the JVM, Jython is the best choice.
如果你需要与现有的Java代码库对接或者基于其他原因需要为JVM编写Python代码，那么 Jython是最好的选择

Jython currently supports up to Python 2.7.
Jython现在支持到Python 2.7 [3]

IronPython is an implementation of Python for the .NET framework.
IronPython 是一个针对 .NET 框架的Python实现

It can use both Python and .NET framework libraries, and can also expose Python code to other languages in the .NET framework.
它 可以用Python和.NET framework的库，也能将Python代码暴露给给.NET框架中的其他语言

Python Tools for Visual Studio integrates IronPython directly into the Visual Studio development environment, making it an ideal choice for Windows developers.
Python Tools for Visual Studio 直接集成了 IronPython到Visual Studio开发环境中，使之成为Windows开发者的理想选择

IronPython supports Python 2.7.
IronPython支持Python 2.7 [4]

Python for .NET is a package which provides near seamless integration of a natively installed Python installation with the .NET Common Language Runtime (CLR).
Python for .NET 是一个近乎无缝集成的， 提供给本机已安装的Python .NET公共语言运行时（CLR）包

This is the inverse approach to that taken by IronPython (see above), to which it is more complementary than competing with.
它采取与IronPython （见上文）相反的方法，与其说是竞争，不如说是互补

In conjunction with Mono, PythonNet enables native Python installations on non-Windows operating systems, such as OS X and Linux, to operate within the .NET framework.
PythonNet与Mono相结合使用，通过.NET框架，能使Python在非windows系统上（如OS X和Linux）完成操作

It can be run in addition to IronPython without conflict.
它可以在除外IronPython的环境中无冲突运行

PythonNet supports from Python 2.3 up to Python 2.7.
PythonNet支持Python 2.3到2.7 [5]

[1]
[1]

http://pypy.org/compat.html
https://www.python.org/dev/peps/pep-0373/#id2

[2]
[2]

https://hg.python.org/jython/file/412a8f9445f7/NEWS
http://pypy.org/compat.html

[3]
[3]

http://ironpython.codeplex.com/releases/view/81726
https://hg.python.org/jython/file/412a8f9445f7/NEWS

[4]
[4]

http://pythonnet.github.io/readme.html
http://ironpython.codeplex.com/releases/view/81726

[5]
[5]

https://www.python.org/dev/peps/pep-0373/#id2
http://pythonnet.github.io/readme.html

Follow @kennethreitz
本指南目前持续不断地更新与完善

Join Mailing List.
获得新版本和未来项目的更新

This guide is now available for pre-order in tangible book form!
订阅Newsletter

All proceeds are being directly donated to the DjangoGirls organization.
如果你享受这份指南,想要支持作者， 请戳Gittip

