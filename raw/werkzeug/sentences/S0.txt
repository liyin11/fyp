Navigation
导航

Installation¶
安装¶

Werkzeug requires at least Python 2.6 to work correctly.
Werkzeug 要求 Python 2.6 以上版本

If you do need to support an older version you can download an older version of Werkzeug though we strongly recommend against that.
如果你需要支持 Pyhthon <2.6 版本可以下载老 版本的 Werkzeug (强烈推荐 Pyhton 2.6 以上版本)

Werkzeug currently has experimental support for Python 3.
Werkzeug目前已经支持 Python 3 

For more information about the Python 3 support see Python 3 Notes.
更多信息请看 Python 3 Notes.

Installing a released version¶
安装一个发行版¶

As a Python egg (via easy_install or pip)¶
安装一个egg包 (通过 easy_install 或 pip)¶

You can install the most recent Werkzeug version using easy_install:
你可以安装最新的 Werkzeug 版本通过 easy_install:

Alternatively you can also use pip:
另外你也可以使用pip:

Either way we strongly recommend using these tools in combination with virtualenv.
我们强烈推荐结合 virtualenv 使用这些工具

This will install a Werkzeug egg in your Python installation’s site-packages directory.
这将会在 site-packages 目录安装一个 Werkzeug egg 包

From the tarball release¶
从压缩包安装¶

Note that the last command will automatically download and install setuptools if you don’t already have it installed.
注意如果你没有安装 setuptools 执行最后一条命令将会自动下载和安装

This requires a working Internet connection.
这需要联 网

This will install Werkzeug into your Python installation’s site-packages directory.
以上命令会将 Werkzeug 安装到 site-packages 文件夹

Installing the development version¶
安装开发版¶

virtualenv¶
virtualenv¶

Virtualenv is probably what you want to use during development, and in production too if you have shell access there.
Virtualenv 大概会是你想在开发环境下使用的软件

What problem does virtualenv solve?
virtualenv 解决了什么问题

If you like Python as I do, chances are you want to use it for other projects besides Werkzeug-based web applications.
如果你像我一样喜欢Python，你很可能会在基于 Werkzeug 的 Web 应用之外使用Python

But the more projects you have, the more likely it is that you will be working with different versions of Python itself, or at least different versions of Python libraries.
但是随着项目越来越多，你使用不同版本python的可能性越 大，至少你有可能会用到支持不同Pytohn版本的库

Let’s face it;
我们不得不面对一种很常见的情况就 是库是不向后兼容的，或者很少有应用没有依赖包

quite often libraries break backwards compatibility, and it’s unlikely that any serious application will have zero dependencies.
所以当然有两个甚至更多项目的时候 你打算怎么解决依赖冲突

Virtualenv to the rescue!
Virtualenv 正是为此而生

It basically enables multiple side-by-side installations of Python, one for each project.
它允许你安装多个Python版本, 每个项目对应自己的Python

It doesn’t actually install separate copies of Python, but it does provide a clever way to keep different project environments isolated.
 他其实并没有安装一个Python副本，而是通过很奇妙的方法来保持环境独立

So let’s see how virtualenv works!
下面让我门看看 virtualenv 是怎么工作的

If you are on Mac OS X or Linux, chances are that one of the following two commands will work for you:
如果你使用 Mac OS X 或 Linux, 这里有两种安装方法供你选择:

or even better:
或者更好的方法:

One of these will probably install virtualenv on your system.
你可以通过上述命令在你的系统安装 virtualenv 

Maybe it’s even in your package manager.
你甚至可以使用包管理器安装，如果 你使用Ubuntu，可以尝试:

If you are on Windows and don’t have the easy_install command, you must install it first.
如果你是用Windows，没有 easy_install 命令，你必须首先安装它

Once you have it installed, run the same commands as above, but without the sudo prefix.
一旦安装成功， 执行相同的命令，但是不需要带 sudo 前缀

Once you have virtualenv installed, just fire up a shell and create your own environment.
一旦成功安装 virtualenv，打开 shell 创建你自己的环境

I usually create a project folder and an env folder within:
我经常会创建一个 myproje ct 文件夹，并在其中创建 env 文件夹:

Now, whenever you want to work on a project, you only have to activate the corresponding environment.
现在，无论何时只要你想在某个项目上工作，只需激活相应环境

On OS X and Linux, do the following:
在 OS X 和 Linux，按 如下操作:

(Note the space between the dot and the script name.
(注意 . 和脚本名称之间的空格

The dot means that this script should run in the context of the current shell.
 . 意味着这个脚本在当前shell下运行

If this command does not work in your shell, try replacing the dot with source)
如果这个命令 在你的命令行无效, 尝试用 source 代替 .)

If you are a Windows user, the following command is for you:
如果你是个 Windows 用户，可以使用以下命令:

Either way, you should now be using your virtualenv (see how the prompt of your shell has changed to show the virtualenv).
无论哪种方式，现在你已经可以使用 virtualenv 了(观察shell中切换到的Virtualenv提 示)

Now you can just enter the following command to get Werkzeug activated in your virtualenv:
安装Werkzeug

A few seconds later you are good to go.
几秒钟后你就可以使用werkzeug了

Table Of Contents
內容目录

Versions
Related Topics

Related Topics
本页

Quick search
快速搜索

