Navigation
导航

API Levels¶
API 标准¶

Werkzeug is intended to be a utility rather than a framework.
Werkzeug 的设计意图是一个实用的工具集而不是一个框架

Because of that the user-friendly API is separated from the lower-level API so that Werkzeug can easily be used to extend another system.
得益于从低级API 中分离出来 的面向用户友好的 API，Werkzeug 可以很简单的扩展另一个系统

All the functionality the Request and Response objects (aka the “wrappers”) provide is also available in small utility functions.
Request 和 Response 对象(又名”wrappers”) 提供的函数也可以来实 现一个小的功能

Example¶
例子¶

This example implements a small Hello World application that greets the user with the name entered:
这个例子实现一个小的 Hello World 应用

Alternatively the same application could be used without request and response objects but by taking advantage of the parsing functions werkzeug provides:
另外不用 request 和 response 对象也可以实现这个功能，那就是借助 werkzeug 提供的 解析函数:

High or Low?¶
高还是低

Usually you want to use the high-level layer (the request and response objects).
通常我们更倾向于使用高级的 API(request 和 response 对象)

But there are situations where this might not be what you want.
但是也有些情况你可能更 想使用低级功能

For example you might be maintaining code for an application written in Django or another framework and you have to parse HTTP headers.
例如你想在不破坏 Django 或者其他框架的代码的情况下解析 HTTP 头信息

You can utilize Werkzeug for that by accessing the lower-level HTTP header parsing functions.
这时你可以利 用 Werkzeug 调用低级 API 来解析 HTTP 头部

Another situation where the low level parsing functions can be useful are custom WSGI frameworks, unit-testing or modernizing an old CGI/mod_python application to WSGI as well as WSGI middlewares where you want to keep the overhead low.
再比如，如果你想写一个 web 框架，或者做单元测试，或者 用 WSGI 中间件将一个老的 CGI/mod_python 应用改成 WSGI 应用，并保证开销

Table Of Contents
內容目录

Versions
Related Topics

Related Topics
本页

Quick search
快速搜索

