Navigation
导航

Quickstart¶
快速开始¶

This part of the documentation shows how to use the most important parts of Werkzeug.
文档的这部分内容将会向你展示如何使用 Werkzeug 最重要的部分

It’s intended as a starting point for developers with basic understanding of PEP 333 (WSGI) and RFC 2616 (HTTP).
意在让开发者对 PEP 333 (WSGI) 和 RFC 2616 (HTTP) 有一个基本的了解

Warning
警告

Make sure to import all objects from the places the documentation suggests.
确保在文档建议的地方导入所有对象

It is theoretically possible in some situations to import objects from different locations but this is not supported.
理论上从不同的地方导入对象是可行的，但是在 这却是不被支持的

For example MultiDict is a member of the werkzeug module but internally implemented in a different one.
例如 MultiDict 是一个 werkzeug 模块，但它在内部却不是 Werkzeug 实现的

WSGI Environment¶
WSGI 环境¶

The WSGI environment contains all the information the user request transmits to the application.
WSGI 环境包含所有用户向应用发送信息

It is passed to the WSGI application but you can also create a WSGI environ dict using the create_environ() helper:
你可以通过它向 WSGI 发送信息，但是你也可以 使用 create_environ() 辅助函数创建一个 WSGI 环境字典:

Now we have an environment to play around:
现在我们创造了一个环境:

Usually nobody wants to work with the environ directly because it is limited to bytestrings and does not provide any way to access the form data besides parsing that data by hand.
通常没人愿意直接使用 environ 因为它对字节串是有限制的，而且不提供访问表单数据的 方法除非手动解析数据

Enter Request¶
Request¶

For access to the request data the Request object is much more fun.
Request 对象访问请求数据是很有趣的

It wraps the environ and provides a read-only access to the data from there:
它封装 environ 并提供只读的方法访 问数据:

Now you can access the important variables and Werkzeug will parse them for you and decode them where it makes sense.
现在你可以访问重要的变量，Werkzeug 将会帮你解析并解码他们

The default charset for requests is set to utf-8 but you can change that by subclassing Request.
默认的字符集是 utf-8 但是你可以通过 Request 子类更改

We can also find out which HTTP method was used for the request:
我们也可以得到 HTTP 请求方法:

This way we can also access URL arguments (the query string) and data that was transmitted in a POST/PUT request.
通过这个方法我们可以访问 URL 参数(查询的字符串) 和 POST/PUT 请求提交的数据

For testing purposes we can create a request object from supplied data using the from_values() method:
为了测试，我们通过 from_values() 方法得到的数据创建一个请求对象:

Now we can access the URL parameters easily:
我们可以很容易访问 URL 参数:

Same for the supplied form data:
访问提交的数据也是一样的:

Handling for uploaded files is not much harder as you can see from this example:
处理上传文件不再困难正如下例:

The files are represented as FileStorage objects which provide some common operations to work with them.
files 代表一个 FileStorage 对象，提供一些常见的操作

Request headers can be accessed by using the headers attribute:
通过 headers 的属性可以得到请求的 headers

The keys for the headers are of course case insensitive.
头信息的键不区分大小写

Header Parsing¶
解析 Headers¶

There is more.
这里还有更多 Werkzeug 提供的使用 HTTP headers 和其他请求数据的常用的方法

Let’s create a request object with all the data a typical web browser transmits so that we can play with it:
让我们用典型的 web 浏览器发送数据来创建一个请求对象

Let’s start with the most useless header: the user agent:
让我们从最没有用(- -)的 headers 开始: the user agent:

A more useful header is the accept header.
一个更有用的 headers 是 Accept header

With this header the browser informs the web application what mimetypes it can handle and how well.
这个 header 将会告诉 web 应用可以处理并怎么处理 MIME类型，所有 accept header 被严格分类，最重要的是第一条:

The same works for languages:
可使用的语言也是一样:

And of course encodings and charsets:
当然还有编码和字符集:

Normalization is available, so you can safely use alternative forms to perform containment checking:
标准化是可行的，所以你可以安全的使用不同形式来执行控制检查:

E-tags and other conditional headers are available in parsed form as well:
E-tags 和其他条件 header 也可以被解析:

Responses¶
Response¶

Response objects are the opposite of request objects.
Response 对象和请求对象相对

They are used to send data back to the client.
他常用于向客户端发送响应数据

In reality, response objects are nothing more than glorified WSGI applications.
实际上，在 WSGI 应用 中没有什么比 Response 对象更重要了

So what you are doing is not returning the response objects from your WSGI application but calling it as WSGI application inside your WSGI application and returning the return value of that call.
那么你要做的不是从一个 WSGI 应用中返回 returning 响应对象，而是在 WSGI 应用内 部调用一个 WSGI 应用并返回调用的值

So imagine your standard WSGI “Hello World” application:
想象一个标准的 “Hello World” WSGI 应用:

With response objects it would look like this:
带着一个响应对象的将会是这样的:

Also, unlike request objects, response objects are designed to be modified.
同时,不同与请求对象，响应对象被设计为可修改的

So here is what you can do with them:
所以你还可以进行如下操作:

You can modify the status of the response in the same way.
你可以用同样的方式修改响应状态，或者仅仅一个状态吗、一条信息:

As you can see attributes work in both directions.
正如你看到的，状态属性是双向的,你可以同时看到 status 和 status_code ，他们相互对应的

Also common headers are exposed as attributes or with methods to set / retrieve them:
同时常见的 headers 是公开的，可以作为属性访问或者用方法设置/获取他们:

Because etags can be weak or strong there are methods to set them:
因为 etags 可以使 weak 或者 strong，所以这里有方法可以设置它:

Some headers are available as mutable structures.
一些有用的 headers 是可变的结构，比如 Content- header 是一个值的集合:

Also here this works in both directions:
下面的 header 值同样不是单一的:

Authentication headers can be set that way as well:
认证 header 也可以这样设置:

Cookies can be set as well:
Cookie 同样可以被设置:

If headers appear multiple times you can use the getlist() method to get all values for a header:
如果头出现多次，你可以使用 getlist() 方法来获取一个 header 的所有值:

Finally if you have set all the conditional values, you can make the response conditional against a request.
最后如果你已经设置了所有条件值，那么你可以根据一个请求作出响应

Which means that if the request can assure that it has the information already, no data besides the headers is sent over the network which saves traffic.
这意味着，如果 一个请求可以确定已经有了一个信息，只发送一个 header 是很节省流量的

For that you should set at least an etag (which is used for comparison) and the date header and then call make_conditional with the request object.
尽管如此，你仍 然应该至少设置一个 etag (用于比较) 和可以被请求对象的 make_conditional 处理的 header 

The response is modified accordingly (status code changed, response body removed, entity headers removed etc.)
因此，响应是被改进的 (比如状态码改变，移除响应主题，删除实体报头等)

Table Of Contents
內容目录

Versions
Related Topics

Related Topics
本页

Quick search
快速搜索

