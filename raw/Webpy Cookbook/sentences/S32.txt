Templetor: The web.py templating system
Templetor: web.py 模板系统

Templetor intentionally limits variable access within a template.
这是一个模板示例:

Here is a simple template:
第一行表示模板定义了一个变量 name

The most common way of rendering templates is this:
通用渲染模板的方法：

The render function takes the template root as argument.
render 方法从模板根目录查找模板文件，render.hello(..)表示渲染 hello.html 模板

render.hello(..) calls the template hello.html with the given arguments.
实际上，系统会在根目录去查找叫 hello的所有文件，直到找到匹配的

In fact, it looks for the files matching hello.* in the template root and picks the first matching file.
(事实上他只支持 .html 和 .xml 两种)

However you can also create template from a file using frender.
除了上面的使用方式，你也可以直接用文件的方式来处理模板 frender：

And if you have the template as a string:
直接使用字符串方式：

Syntax
语法

Expression Substitution
表达式用法

Special character $ is used to specify python expressions.
特殊字符 $ 被用于特殊的 python 表达式

Expression can be enclosed in () or {} for explicit grouping.
表达式能够被用于一些确定的组合当中 () 和 {}:

Assignments
赋值

Sometimes you may want to define new variables and re-assign some variables.
有时你可能需要定义一个新变量或给一些变量重新赋值，如下：

Notice the space after $ in the assignment.
注意 $在赋值变量名称之前要有一个空格，这有区别于常规的赋值用法

Filtering
过滤

By default, Templetor uses web.websafe filter to do HTML-encoding.
模板默认会使用 web.websafe 过滤 html 内容(encodeing 处理)

To turnoff filter use : after $.
不需要过滤可以在 $ 之后 使用 :

For example:
示例：

Newline suppression
新起一行用法

Newline can be suppressed by adding \ character at the end of line.
在行末添加 \ 代表显示层该内容不会被真实处理成一行

Escaping $
转义 $

Use $$ to get $ in the output.
使用 $$ 可以在输出的时候显示字符 $.

Comments
注释

$# is used as comment indicator.
$# 是注释指示符

Anything starting with $# till end of the line is ignored.
任何以 $# 开始的某行内容都被当做注释

Control Structures
控制结构

The template system supports for, while, if, elif and else.
模板系统支持 for, while, if, elif 和 else

Just like in python, body of the statement is indented.
像 python 一样，这里是需要缩进的

The for loop sets a number of variables available within the loop:
for 循环内的成员变量只在循环内发生可用：

Sometimes these can be very handy.
有时候，他们使用起来很方便：

Other Statements
其他

def
使用 def

You can define a new template function using $def.
可以使用 $def 定义一个新的模板函数，支持使用参数

Another example:
其他示例：

code
代码

Arbitrary python code can be written using the code block.
可以在 code 块书写任何 python 代码： $code: x = "you can write any python code here" y = x.title() z = len(x + y)

var
使用 var

The var block can be used to define additional properties in the template result.
var 块可以用来定义模板结果的额外属性：

The result of the above template can be used as follows:
以上模板内容的输出结果如下：

builtins and globals
内置 和 全局

Just like any Python function, template can also access builtins along with its arguments and local variables.
像 python 的任何函数一样，模板系统同样可以使用内置以及局部参数

Some common builtin functions like range, min, max etc.
很多内置的公共方法像 range，min，max等，以及布尔值 True 和 False，在模板中都是可用的

and boolean values True and False are made available to all the templates.
部分内置和全局对象也可以使用在模板中

Globals can be specified as an argument to web.template.render.
全局对象可以使用参数方式传给模板，使用 web.template.render：

Builtins that are exposed in the templates can be controlled too.
内置方法是否可以在模板中也是可以被控制的：

Security
安全

One of the design goals of Templetor is to allow untrusted users to write templates.
模板的设计想法之一是允许非高级用户来写模板，如果要使模板更安全，可在模板中禁用以下方法：

To make the template execution safe, the following are not allowed in the templates.
如果模板中使用以上提及的会引发异常 SecurityException

The new implementation is mostly compatible with the earlier implementation.
新版本大部分兼容早期版本，但仍有部分使用方法会无法运行，看看以下原因：

