Overview and Tutorial¶
概览 & 教程¶

Welcome to Fabric!
欢迎使用 Fabric

This document is a whirlwind tour of Fabric’s features and a quick guide to its use.
本文档走马观花式地介绍 Fabric 特性，也是对其使用的快速指导

Additional documentation (which is linked to throughout) can be found in the usage documentation – please make sure to check it out.
其他文档（这里通篇的链接都指向它们）可以在 usage documentation 中找到——请不要忘了一并阅读

What is Fabric?¶
Fabric 是什么

As the README says:
如 README 所说：

More specifically, Fabric is:
Fabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率

Naturally, most users combine these two things, using Fabric to write and execute Python functions, or tasks, to automate interactions with remote servers.
更具体地说，Fabric 是：

This wouldn’t be a proper tutorial without “the usual”:
自然而然地，大部分用户把这两件事结合着用，使用 Fabric 来写和执行 Python 函数或 task ，以实现与远程服务器的自动化交互

That’s all there is to it.
把上述代码放在你当前的工作目录中一个名为 fabfile.py 的 Python 模块文件中

This functionality allows Fabric to be used as a (very) basic build tool even without importing any of its API.
然后这个 hello 函数就可以用 fab 工具（随 Fabric 一并安装的命令）来执行了，输出的结果会是这样：

Note
以上就是配置文件的全部

The fab tool simply imports your fabfile and executes the function or functions you instruct it to.
注解

See also
fab 工具所做的只是导入 fabfile 并执行了相应一个或多个的函数，这里并没有任何魔法——任何你能在一个普通 Python 模块中做的事情同样可以在一个 fabfile 中完成

Execution strategy, Defining tasks, fab options and arguments
参见

It’s often useful to pass runtime parameters into your tasks, just as you might during regular Python programming.
和你平时的 Python 编程一样，给任务函数传递参数很有必要``

Fabric has basic support for this using a shell-compatible notation: <task name>:,=,....
Fabric 支持 Shell 兼容的参数用法： <任务名>:<参数>, <关键字参数名>=<参数值>,... 用起来就是这样，下面我们用一个 say hello 的实例来展开说明一下：

By default, calling fab hello will still behave as it did before;
默认情况下， fab hello 的调用结果仍和之前相同，但现在我们可以做些个性化定制了：

Those already used to programming in Python might have guessed that this invocation behaves exactly the same way:
用过 Python 编程的同学可能已经猜到了，这样调用会输出一样的结果：

For the time being, your argument values will always show up in Python as strings and may require a bit of string manipulation for complex types such as lists.
目前，参数值只能作为 Python 字符串来使用，如果要使用列表这样的复杂类型，需要一些字符串操作处理

Future versions may add a typecasting system to make this easier.
将来的版本可能会添加一个类型转换系统以简化这类处理

See also
参见

Per-task arguments
Per-task arguments

Local commands¶
本地命令¶

As used above, fab only really saves a couple lines of if __name__ == "__main__" boilerplate.
在前面的例子中， fab 实际上只节省了数行 if __name__ == "__main__" 这样的惯例代码而已

It’s mostly designed for use with Fabric’s API, which contains functions (or operations) for executing shell commands, transferring files, and so forth.
Fabric 的设计目的更是为了使用它自己的 API，包括执行 Shell 命令、传送文件等函数（或操作）接口

Let’s build a hypothetical Web application fabfile.
假设我们需要为一个 web 应用创建 fabfile 

This example scenario is as follows: The Web application is managed via Git on a remote host vcshost.
具体的情景如下：这个 web 应用的代码使用 git 托管在一台远程服务器 vcshost 上，我们把它的代码库克隆到了本地 localhost 中

On localhost, we have a local clone of said Web application.
我们希望在我们把修改后的代码 push 回 vcshost 时，自动把新的版本安装到另一台远程服务器 my_server 上

When we push changes back to vcshost, we want to be able to immediately install these changes on a remote host my_server in an automated fashion.
我们将通过自动化本地和远程 git 命令来完成这些工作

Fabfiles usually work best at the root of a project:
关于 fabfile 文件放置位置的最佳时间是项目的根目录：

Note
注解

We’re using a Django application here, but only as an example – Fabric is not tied to any external codebase, save for its SSH library.
在这里我们使用一个 Django 应用为例——不过 Fabric 并s依赖于外部代码，除了它的 SSH 库

For starters, perhaps we want to run our tests and commit to our VCS so we’re ready for a deploy:
作为起步，我们希望先执行测试准备好部署后，再提交到 VCS（版本控制系统）：

The output of which might look a bit like this:
这段代码的输出会是这样：

The code itself is straightforward: import a Fabric API function, local, and use it to run and interact with local shell commands.
这段代码很简单，导入一个 Fabric API： local ，然后用它执行本地 Shell 命令并与之交互，剩下的 Fabric API 也都类似——它们都只是 Python

See also
参见

Operations, Fabfile discovery
业务（Operation）, 指定 fabfile

Organize it your way¶
用你的方式来组织¶

Because Fabric is “just Python” you’re free to organize your fabfile any way you want.
因为 Fabric “只是 Python”，所以你可以按你喜欢的方式来组织 fabfile 

For example, it’s often useful to start splitting things up into subtasks:
比如说，把任务分割成多个子任务：

The prepare_deploy task can be called just as before, but now you can make a more granular call to one of the sub-tasks, if desired.
这个 prepare_deploy 任务仍可以像之前那样调用，但现在只要你愿意，就可以调用更细粒度的子任务

Failure¶
故障¶

Our base case works fine now, but what happens if our tests fail?
我们的基本案例已经可以正常工作了，但如果测试失败了会怎样

Chances are we want to put on the brakes and fix them before deploying.
我们应该抓住机会即使停下任务，并在部署之前修复这些失败的测试

Fabric checks the return value of programs called via operations and will abort if they didn’t exit cleanly.
Fabric 会检查被调用程序的返回值，如果这些程序没有干净地退出，Fabric 会终止操作

Let’s see what happens if one of our tests encounters an error:
下面我们就来看看如果一个测试用例遇到错误时会发生什么：

Great!
太好了

We didn’t have to do anything ourselves: Fabric detected the failure and aborted, never running the commit task.
我们什么都不用做，Fabric 检测到了错误并终止，不会继续执行 commit 任务

See also
参见

Failure handling (usage documentation)
Failure handling (usage documentation)

But what if we wanted to be flexible and give the user a choice?
但如果我们想更加灵活，给用户另一个选择，该怎么办

A setting (or environment variable, usually shortened to env var) called warn_only lets you turn aborts into warnings, allowing flexible error handling to occur.
一个名为 warn_only 的设置（或着说 环境变量 ，通常缩写为 env var ）可以把退出换为警告，以提供更灵活的错误处理

Let’s flip this setting on for our test function, and then inspect the result of the local call ourselves:
让我们把这个设置丢到 test 函数中，然后注意这个 local 调用的结果：

In adding this new feature we’ve introduced a number of new things:
为了引入这个新特性，我们需要添加一些新东西：

However, despite the additional complexity, it’s still pretty easy to follow, and is now much more flexible.
在 Python 2.5 中，需要从 __future__ 中导入 with 

See also
Fabric contrib.console 子模块提供了 confirm 函数，用于简单的 yes/no 提示

Context Managers, Full list of env vars
settings 上下文管理器提供了特定代码块特殊设置的功能

Let’s start wrapping up our fabfile by putting in the keystone: a deploy task that is destined to run on one or more remote server(s), and ensures the code is up to date:
即使增加了上述复杂度，整个处理过程仍然很容易理解，而且它已经远比之前灵活

Here again, we introduce a handful of new concepts:
参见

We also need to make sure we import the new functions at the top of our file:
上下文管理器, 环境变量完整列表

We never specified any connection info in our fabfile, so Fabric doesn’t know on which host(s) the remote command should be executed.
这里再次引入了一些新的概念：

git pull works fine if you’ve already got a checkout of your source code – but what if this is the first deploy?
Fabric 是 Python——所以我们可以自由地使用变量、字符串等常规的 Python 代码

As with our calls to local above, run also lets us construct clean Python-level logic based on executed shell commands.
cd 函数是一个简易的前缀命令，相当于运行 cd /to/some/directory ，和 lcd 函数类似，只不过后者是在本地执行

Older versions of Fabric (and similar high level SSH libraries) run remote programs in limbo, unable to be touched from the local end.
~fabric.operations.run` 和 local 类似，不过是在 远程 而非本地执行

Fabric 1.0 and later breaks down this wall and ensures you can always talk to the other side.
我们还需要保证在文件顶部导入了这些新函数：

Notice the Password: prompt – that was our remote git call on our Web server, asking for the password to the Git server.
改好之后，我们重新部署：

See also
我们并没有在 fabfile 中指定任何连接信息，所以 Fabric 依旧不知道该在哪里运行这些远程命令

Interaction with remote programs
如果你已经得到了代码，说明 git pull 执行非常顺利——但如果这是第一次部署呢

Specifying connection info at runtime gets old real fast, so Fabric provides a handful of ways to do it in your fabfile or on the command line.
和上面调用 local 一样， run 也提供基于 Shell 命令构建干净的 Python 逻辑

We won’t cover all of them here, but we will show you the most common one: setting the global host list, env.hosts.
这里最有趣的部分是 git clone ：因为我们是用 git 的 SSH 方法来访问 git 服务器上的代码库，这意味着我们远程执行的 run 需要自己提供身份验证

env is a global dictionary-like object driving many of Fabric’s settings, and can be written to with attributes as well (in fact, settings, seen above, is simply a wrapper for this.) Thus, we can modify it at module level near the top of our fabfile like so:
旧版本的 Fabric（和其他类似的高层次 SSH 库）像在监狱里一样运行远程命令，无法提供本地交互

When fab loads up our fabfile, our modification of env will execute, storing our settings change.
Fabric 1.0 和后续的版本突破了这个限制，并保证你和另一端的会话交互

The end result is exactly as above: our deploy task will run against the my_server server.
让我们看看当我们在一台没有 git checkout 的新服务器上运行更新后的 deploy 任务时会发生什么：

This is also how you can tell Fabric to run on multiple remote systems at once: because env.hosts is a list, fab iterates over it, calling the given task once for each connection.
注意那个 Password: 提示——那就是我们在 web 服务器上的远程 git 应用在请求 git 密码

See also
参见

The environment dictionary, env, How host lists are constructed
与远程程序集成

Our completed fabfile is still pretty short, as such things go.
当 fab 加载 fabfile 时，将会执行我们对 env 的修改并保存设置的变化

Here it is in its entirety:
最终结果如上所示：我们的 deploy 任务将在 my_server 上运行

This fabfile makes use of a large portion of Fabric’s feature set:
这就是如何指定 Fabric 一次性控制多台远程服务器的方法： env.hosts 是一个列表， fab 对它迭代，对每个连接运行指定的任务

However, there’s still a lot more we haven’t covered here!
参见

Thanks for reading!
环境字典 env, How host lists are constructed

Pythonic remote execution
但它已经涉及到了 Fabric 中的很多功能：

Enter search terms or a module, class or function name.
定义 fabfile 任务，并用 fab 执行

