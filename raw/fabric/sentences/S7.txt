Parallel execution¶
并行执行¶

New in version 1.3.
1.3 新版功能.

By default, Fabric executes all specified tasks serially (see Execution strategy for details.) This document describes Fabric’s options for running tasks on multiple hosts in parallel, via per-task decorators and/or global command-line switches.
默认情况下，Fabric 会默认 顺序 执行所有任务（详细信息参见 Execution strategy ），这篇文档将介绍 Fabric 如何在多个主机上 并行 执行任务，包括 Fabric 参数设置、任务独立的装饰器，以及命令行全局控制

What it does¶
它是如何运转的¶

Because Fabric 1.x is not fully threadsafe (and because in general use, task functions do not typically interact with one another) this functionality is implemented via the Python multiprocessing module.
由于 Fabric 1.x 并不是完全线程安全（以及为了更加通用，任务函数之间并不会产生交互），该功能的实现是基于 Python multiprocessing 模块，它会为每一个主机和任务组合创建一个线程，同时提供了一个（可选的）弹窗用于阻止创建过多的进程

For example, imagine a scenario where you want to update Web application code on a number of Web servers, and then reload the servers once the code has been distributed everywhere (to allow for easier rollback if code updates fail.) One could implement this with the following fabfile:
举个例子，假设你正打算更新数台服务器上的 Web 应用代码，所有服务的代码都更新后开始重启服务器（这样代码更新失败的时候比较容易回滚）

and execute it on a set of 3 servers, in serial, like so:
在三台服务器上并行执行，就像这样：

Normally, without any parallel execution options activated, Fabric would run in order:
刚常见的情况是没有启动任何并行执行参数，Fabric 将会按顺序在服务器上执行：

With parallel execution activated (via -P – see below for details), this turns into:
在 web1 上 更新

Hopefully the benefits of this are obvious – if update took 5 seconds to run and reload took 2 seconds, serial execution takes (5+2)*3 = 21 seconds to run, while parallel execution takes only a third of the time, (5+2) = 7 seconds on average.
在 web2 上 更新

Since the minimum “unit” that parallel execution affects is a task, the functionality may be enabled or disabled on a task-by-task basis using the parallel and serial decorators.
在 web2 上 重新加载配置

when run in this manner:
在 web3 上 重新加载配置

will result in the following execution sequence:
如果激活并行执行（通过 -P ——下面会详细介绍）它将变成这样：

One may also force all tasks to run in parallel by using the command-line flag -P or the env variable env.parallel.
在 web1、web3 和 web3 上 更新

For example, the following fabfile will result in the same execution sequence as the one above:
在 web1、web2 和 web3 上 重新加载配置

when invoked like so:
这样做的好处非常明显——如果 update 花费 5 秒 reload 花费 2 秒顺序执行总共会花费 (5+2)*3 = 21 秒，而并行执行只需要它的 1/3，也就是 (5+2) = 7 秒

With large host lists, a user’s local machine can get overwhelmed by running too many concurrent Fabric processes.
runs_in_parallel 运行在 host1、host2 和 host3 上

By default, no bubble is used and all hosts are run in one concurrent pool.
runs_serially 运行在 host1 上

For example, to run on 5 hosts at a time:
runs_serially 运行在 host2 上

Or skip the pool_size kwarg and instead:
runs_serially 运行在 host3 上

Fabric’s default mode of printing to the terminal is byte-by-byte, in order to support Interaction with remote programs.
在这样调用时：

To help offset this problem, Fabric’s option for linewise output is automatically enabled whenever parallelism is active.
和上面一样，runs_in_parallel 将会并行执行，runs_serially 顺序执行

Note
默认情况下没有使用 bubble 限制，所有主机都运行在并发池中

Future versions will add improved logging support to make troubleshooting parallel runs easier.
例如同时在 5 个主机上运行：

Pythonic remote execution
为了支持 与远程程序集成 特性，Fabric 默认会一字节一字节地讲数据输出到终端

Enter search terms or a module, class or function name.
为了消除该问题，在并行执行时 Fabric 会自动启用行级输出，这会导致上面链接中提到的远程交互特性大部分失效，不过这是一个合理的折中

