Decorators¶
装饰器¶

Convenience decorators for use in fabfiles.
fabfile 中可以方便使用的装饰器

Decorator defining which host or hosts to execute the wrapped function on.
该装饰器用于指定被装饰的函数执行在那台主机或哪些主机列表上

For example, the following will ensure that, barring an override on the command line, my_func will be run on host1, host2 and host3, and with specific users on host1 and host3:
例如：如果不在控制台覆盖相关参数的话，将会在 host1、host2 以及 host3 上执行 my_func，并且在 host1 和 host3 上都指定了登录用户

hosts may be invoked with either an argument list (@hosts('host1'), @hosts('host1', 'host2')) or a single, iterable argument (@hosts(['host1', 'host2'])).
hosts 接受 host 的参数列表（@hosts('host1'), @hosts('host1', 'host2')）或者一个 hosts 可迭代对象（@hosts(['host1', 'host2'])）

Note that this decorator actually just sets the function’s .hosts attribute, which is then read prior to executing the function.
要注意，这个装饰器仅仅会设置函数的 .hosts 属性，which is then read prior to executing the function.

Changed in version 0.9.2: Allow a single, iterable argument (@hosts(iterable)) to be used instead of requiring @hosts(*iterable).
在 0.9.2 版更改: 可以接收一个可迭代对象作为唯一参数（@hosts(iterable)），不再要求这样写： @hosts(*iterable)

Forces the wrapped function to run in parallel, instead of sequentially.
强制被装饰的函数并行执行而非同步执行

This decorator takes precedence over the global value of env.parallel.
该装饰器的优先级高于全局变量 env.parallel

It also takes precedence over serial if a task is decorated with both.
如果函数还装饰了 serial 的话，依旧是它的优先级更高

New in version 1.3.
1.3 新版功能.

Decorator defining a list of role names, used to look up host lists.
该装饰器用于定义（服务器）“角色”名，然后用于寻找对应的主机列表

A role is simply defined as a key in env whose value is a list of one or more host connection strings.
角色是定义在 env 中的键，其对应的值是一个或多个主机连接字符穿的列表

For example, the following will ensure that, barring an override on the command line, my_func will be executed against the hosts listed in the webserver and dbserver roles:
例如：不考虑控制台参数覆盖的话，my_func 将会在 webserver 和 dbserver 角色对应的主机列表上执行：

As with hosts, roles may be invoked with either an argument list or a single, iterable argument.
和 hosts 一样， roles 也接受参数列表，或者单个可迭代对象作为参数，其实现机制是设置 .roles，同样类似于 hosts

Changed in version 0.9.2: Allow a single, iterable argument to be used (same as hosts).
在 0.9.2 版更改: （和 hosts 一样）支持可迭代对象作为唯一参数

Decorator preventing wrapped function from running more than once.
阻止函数多次执行的装饰器

By keeping internal state, this decorator allows you to mark a function such that it will only run once per Python interpreter session, which in typical use means “once per invocation of the fab program”.
通过保存内部状态，使用该装饰器可以保证函数在每个 Python 解释器中只运行一次，通常在使用时它的作用都是“每个 fab 程序生命周期中只运行一次”

Any function wrapped with this decorator will silently fail to execute the 2nd, 3rd, ..., Nth time it is called, and will return the value of the original run.
任何被该装饰器装饰的函数在第二次、第三次……第 n 次执行时都会静默失败，并返回初次运行的结果

Note
注解

runs_once does not work with parallel task execution.
runs_once 无法和任务并行执行同时生效

Forces the wrapped function to always run sequentially, never in parallel.
强制被装饰的函数顺序执行，不并行执行

This decorator takes precedence over the global value of env.parallel.
该装饰器效果的优先级高于全局变量 env.parallel

However, if a task is decorated with both serial and parallel, parallel wins.
如果任务同时被 serial 和 parallel 装饰器装饰，parallel 的优先级更高

New in version 1.3.
1.3 新版功能.

Decorator declaring the wrapped function to be a new-style task.
将函数封装为新式任务的装饰器

May be invoked as a simple, argument-less decorator (i.e.
可以作为简单的、无参数的装饰器使用（@task 这样），也可以使用参数修订其行为（比如： @task(alias='myalias')）

Please see the new-style task documentation for details on how to use this decorator.
关于 new-style task 装饰器的使用请参见其文档

Changed in version 1.2: Added the alias, aliases, task_class and default keyword arguments.
在 1.2 版更改: 新增关键字参数 alias、aliases、task_class 和 default

See Arguments for details.
详情参见 参数

Changed in version 1.5: Added the name keyword argument.
在 1.5 版更改: 新增关键字参数 name

See also
参见

unwrap_tasks, WrappedCallableTask
~fabric.docs.unwrap_tasks`、 WrappedCallableTask

Decorator equivalent of fabric.context_managers.settings.
一个装饰器，作用等价于 fabric.context_managers.settings

Allows you to wrap an entire function as if it was called inside a block with the settings context manager.
将整个函数封装起来，其效果类似于执行在 settings 上下文管理器中

This may be useful if you know you want a given setting applied to an entire function body, or wish to retrofit old code without indenting everything.
如果你想要修改函数的设置，但不愿改动其缩进时，它会很有用

For example, to turn aborts into warnings for an entire task function:
例如：将整个任务函数中的退出（abort）转换为警告：

See also
参见

settings
settings

New in version 1.1.
1.1 新版功能.

Fabric
Fabric

Pythonic remote execution
Pythonic remote execution

Enter search terms or a module, class or function name.
输入相关的术语，模块，类或者函数名称进行搜索

