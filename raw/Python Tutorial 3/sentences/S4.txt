5 Data Structures¶
5 数据结构¶

This chapter describes some things you’ve learned about already in more detail, and adds some new things as well.
本章详细讨论了你已经学过的一些知识，同样也添加了一些新内容

5.1 More on Lists¶
5.1 关于列表更多的内容¶

The list data type has some more methods.
Python 的列表数据类型包含更多的方法

Here are all of the methods of list objects:
这里是所有的列表对象方法：

Add an item to the end of the list.
把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]

Extend the list by appending all the items in the given list.
将一个给定列表中的所有元素都添加到另一个列表中，相当于 a[len(a):] = L

Insert an item at a given position.
在指定位置插入一个元素

The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).
第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x)

Remove the first item from the list whose value is x.
删除列表中值为 x 的第一个元素

It is an error if there is no such item.
如果没有这样的元素，就会返回一个错误

Remove the item at the given position in the list, and return it.
从列表的指定位置删除元素，并将其返回

If no index is specified, a.pop() removes and returns the last item in the list.
如果没有指定索引，a.pop() 返回最后一个元素

(The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position.
元素随即从列表中被删除（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在Python 库参考手册中遇到这样的标记）

Remove all items from the list.
从列表中删除所有元素

Equivalent to del a[:].
相当于 del a[:]

Return the index in the list of the first item whose value is x.
返回列表中第一个值为 x 的元素的索引

It is an error if there is no such item.
如果没有匹配的元素就会返回一个错误

Return the number of times x appears in the list.
返回 x 在列表中出现的次数

Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
对列表中的元素就地进行排序

Reverse the elements of the list in place.
就地倒排列表中的元素

Return a shallow copy of the list.
返回列表的一个浅拷贝

Equivalent to a[:].
等同于 a[:]

An example that uses most of the list methods:
下面这个示例演示了列表的大部分方法:

You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed – they return the default None.
也许大家会发现像 insert， remove 或者 sort 这些修改列表的方法没有打印返回值–它们返回 None

[1] This is a design principle for all mutable data structures in Python.
 [1] 在 python 中对所有可变的数据类型这是统一的设计原则

5.1.1.
5.1.1. 把列表当作堆栈使用¶

The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”).
列表方法使得列表可以很方便的做为一个堆栈来使用，堆栈作为特定的数据结构，最先进入的元素最后一个被释放（后进先出）

To add an item to the top of the stack, use append().
用 append() 方法可以把一个元素添加到堆栈顶

To retrieve an item from the top of the stack, use pop() without an explicit index.
用不指定索引的 pop() 方法可以把一个元素从堆栈顶释放出来

For example:
例如:

5.1.2.
5.1.2. 把列表当作队列使用¶

It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”);
你也可以把列表当做队列使用，队列作为特定的数据结构，最先进入的元素最先释放（先进先出）

however, lists are not efficient for this purpose.
不过，列表这样用效率不高

While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).
相对来说从列表末尾添加和弹出很快

To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends.
要实现队列，使用 collections.deque，它为在首尾两端快速插入和删除而设计

For example:
例如:

5.1.3.
5.1.3. 列表推导式¶

List comprehensions provide a concise way to create lists.
列表推导式为从序列中创建列表提供了一个简单的方法

Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.
普通的应用程式通过将一些操作应用于序列的每个成员并通过返回的元素创建列表，或者通过满足特定条件的元素创建子序列

For example, assume we want to create a list of squares, like:
例如, 假设我们创建一个 squares 列表, 可以像下面方式:

Note that this creates (or overwrites) a variable named x that still exists after the loop completes.
注意这个 for 循环中的被创建(或被重写)的名为 x 的变量在循环完毕后依然存在

We can calculate the list of squares without any side effects using:
使用如下方法，我们可以计算squares的值而不会产生任何的副作用:

or, equivalently:
或者，等价于:

which is more concise and readable.
上面这个方法更加简明且易读.

A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.
列表推导式由包含一个表达式的括号组成，表达式后面跟随一个 for 子句，之后可以有零或多个 for 或 if 子句

The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it.
结果是一个列表，由表达式依据其后面的 for 和 if 子句上下文计算而来的结果构成

For example, this listcomp combines the elements of two lists if they are not equal:
例如，如下的列表推导式结合两个列表的元素，如果元素之间不相等的话:

and it’s equivalent to:
等同于:

Note how the order of the for and if statements is the same in both these snippets.
值得注意的是在上面两个方法中的 for 和 if 语句的顺序

If the expression is a tuple (e.g.
如果想要得到一个元组（例如，上面例子中的 (x, y)），必须要加上括号:

List comprehensions can contain complex expressions and nested functions:
列表推导式可使用复杂的表达式和嵌套函数:

5.1.4.
5.1.4. 嵌套的列表推导式¶

The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.
列表解析中的第一个表达式可以是任何表达式，包括列表解析

Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:
考虑下面由三个长度为 4 的列表组成的 3x4 矩阵:

The following list comprehension will transpose rows and columns:
现在，如果你想交换行和列，可以用嵌套的列表推导式:

As we saw in the previous section, the nested listcomp is evaluated in the context of the for that follows it, so this example is equivalent to:
像前面看到的，嵌套的列表推导式是对 for 后面的内容进行求值，所以上例就等价于:

which, in turn, is the same as:
反过来说，如下也是一样的:

In the real world, you should prefer built-in functions to complex flow statements.
在实际中，你应该更喜欢使用内置函数组成复杂流程语句

The zip() function would do a great job for this use case:
对此种情况 zip() 函数将会做的更好:

See Unpacking Argument Lists for details on the asterisk in this line.
更多关于本行中使用的星号的说明，参考 参数列表的分拆

5.2.
5.2. del 语句¶

There is a way to remove an item from a list given its index instead of its value: the del statement.
有个方法可以从列表中按给定的索引而不是值来删除一个子项： del 语句

This differs from the pop() method which returns a value.
它不同于有返回值的 pop() 方法

The del statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice).
语句 del 还可以从列表中删除切片或清空整个列表（我们以前介绍过一个方法是将空列表赋值给列表的切片）

For example:
例如:

del can also be used to delete entire variables:
del 也可以删除整个变量:

Referencing the name a hereafter is an error (at least until another value is assigned to it).
此后再引用命名 a 会引发错误（直到另一个值赋给它为止）

We’ll find other uses for del later.
我们在后面的内容中可以看到 del 的其它用法

5.3.
5.3. 元组和序列¶

We saw that lists and strings have many common properties, such as indexing and slicing operations.
我们知道列表和字符串有很多通用的属性，例如索引和切割操作

They are two examples of sequence data types (see Sequence Types — list, tuple, range).
它们是 序列 类型（参见 Sequence Types — list, tuple, range ）中的两种

Since Python is an evolving language, other sequence data types may be added.
因为 Python 是一个在不停进化的语言，也可能会加入其它的序列类型，这里介绍另一种标准序列类型： 元组 

A tuple consists of a number of values separated by commas, for instance:
一个元组由数个逗号分隔的值组成，例如:

As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly;
如你所见，元组在输出时总是有括号的，以便于正确表达嵌套结构

they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression).
在输入时可以有或没有括号，不过经常括号都是必须的（如果元组是一个更大的表达式的一部分）

It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists.
不能给元组的一个独立的元素赋值（尽管你可以通过联接和切割来模拟）

Though tuples may seem similar to lists, they are often used in different situations and for different purposes.
虽然元组和列表很类似，它们经常被用来在不同的情况和不同的用途

Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of namedtuples).
元组有很多用途

Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.
例如 (x, y) 坐标对，数据库中的员工记录等等

A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these.
一个特殊的问题是构造包含零个或一个元素的元组：为了适应这种情况，语法上有一些额外的改变

Empty tuples are constructed by an empty pair of parentheses;
一对空的括号可以创建空元组

a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses).
要创建一个单元素元组可以在值后面跟一个逗号（在括号中放入一个单值不够明确）

Ugly, but effective.
丑陋，但是有效

For example:
例如:

The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and 'hello!' are packed together in a tuple.
语句 t = 12345, 54321, 'hello!' 是 元组封装 （tuple packing）的一个例子：值 12345 ， 54321 和 'hello!' 被封装进元组

The reverse operation is also possible:
其逆操作可能是这样:

This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side.
这个调用等号右边可以是任何线性序列，称之为 序列拆封 非常恰当

Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence.
序列拆封要求左侧的变量数目与序列的元素个数相同

Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.
要注意的是可变参数（multiple assignment ）其实只是元组封装和序列拆封的一个结合

5.4.
5.4. 集合¶

Python also includes a data type for sets.
Python 还包含了一个数据类型 —— set （集合）

A set is an unordered collection with no duplicate elements.
集合是一个无序不重复元素的集

Basic uses include membership testing and eliminating duplicate entries.
基本功能包括关系测试和消除重复元素

Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.
集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算

Curly braces or the set() function can be used to create sets.
大括号或 set() 函数可以用来创建集合

Note: to create an empty set you have to use set(), not {};
注意：想要创建空集合，你必须使用 set() 而不是 {}

the latter creates an empty dictionary, a data structure that we discuss in the next section.
后者用于创建空字典，我们在下一节中介绍的一种数据结构

Here is a brief demonstration:
以下是一个简单的演示:

Similarly to list comprehensions, set comprehensions are also supported:
类似 列表推导式，这里有一种集合推导式语法:

5.5.
5.5. 字典¶

Another useful data type built into Python is the dictionary (see Mapping Types — dict).
另一个非常有用的 Python 内建数据类型是 字典 （参见 Mapping Types — dict ）

Dictionaries are sometimes found in other languages as “associative memories” or “associative arrays”.
字典在某些语言中可能称为 联合内存 （ associative memories ）或 联合数组 （ associative arrays ）

Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type;
序列是以连续的整数为索引，与此不同的是，字典以 关键字 为索引，关键字可以是任意不可变类型，通常用字符串或数值

strings and numbers can always be keys.
如果元组中只包含字符串和数字，它可以做为关键字，如果它直接或间接的包含了可变对象，就不能当做关键字

Tuples can be used as keys if they contain only strings, numbers, or tuples;
不能用列表做关键字，因为列表可以用索引、切割或者 append() 和 extend() 等方法改变

It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary).
理解字典的最佳方式是把它看做无序的键： 值对 （key:value 对）集合，键必须是互不相同的（在同一个字典之内）

A pair of braces creates an empty dictionary: {}.
一对大括号创建一个空的字典： {} 

Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary;
初始化列表时，在大括号内放置一组逗号分隔的键：值对，这也是字典输出的方式

The main operations on a dictionary are storing a value with some key and extracting the value given the key.
字典的主要操作是依据键来存储和析取值

It is also possible to delete a key:value pair with del.
也可以用 del 来删除键：值对（key:value）

If you store using a key that is already in use, the old value associated with that key is forgotten.
如果你用一个已经存在的关键字存储值，以前为该关键字分配的值就会被遗忘

It is an error to extract a value using a non-existent key.
试图从一个不存在的键中取值会导致错误

Performing list(d.keys()) on a dictionary returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just use sorted(d.keys()) instead).
对一个字典执行 list(d.keys()) 将返回一个字典中所有关键字组成的无序列表（如果你想要排序，只需使用 sorted(d.keys()) ）

[2] To check whether a single key is in the dictionary, use the in keyword.
[2] 使用 in 关键字（指Python语法）可以检查字典中是否存在某个关键字（指字典）

Here is a small example using a dictionary:
这里是使用字典的一个小示例:

The dict() constructor builds dictionaries directly from sequences of key-value pairs:
dict() 构造函数可以直接从 key-value 对中创建字典:

In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:
此外，字典推导式可以从任意的键值表达式中创建字典:

When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:
如果关键字都是简单的字符串，有时通过关键字参数指定 key-value 对更为方便:

5.6.
5.6. 循环技巧¶

When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the items() method.
在字典中循环时，关键字和对应的值可以使用 items() 方法同时解读出来:

When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the enumerate() function.
在序列中循环时，索引位置和对应值可以使用 enumerate() 函数同时得到:

To loop over two or more sequences at the same time, the entries can be paired with the zip() function.
同时循环两个或更多的序列，可以使用 zip() 整体打包:

To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() function.
需要逆向循环序列的话，先正向定位序列，然后调用 reversed() 函数:

To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving the source unaltered.
要按排序后的顺序循环序列的话，使用 sorted() 函数，它不改动原序列，而是生成一个新的已排序的序列:

It is sometimes tempting to change a list while you are looping over it;
若要在循环内部修改正在遍历的序列（例如复制某些元素），建议您首先制作副本

however, it is often simpler and safer to create a new list instead.
在序列上循环不会隐式地创建副本

5.7.
5.7. 深入条件控制¶

The conditions used in while and if statements can contain any operators, not just comparisons.
while 和 if 语句中使用的条件不仅可以使用比较，而且可以包含任意的操作

The comparison operators in and not in check whether a value occurs (does not occur) in a sequence.
比较操作符 in 和 not in 审核值是否在一个区间之内

The operators is and is not compare whether two objects are really the same object;
操作符 is 和 is not 比较两个对象是否相同

this only matters for mutable objects like lists.
这只和诸如列表这样的可变对象有关

All comparison operators have the same priority, which is lower than that of all numerical operators.
所有的比较操作符具有相同的优先级，低于所有的数值操作

Comparisons can be chained.
比较操作可以传递

For example, a < b == c tests whether a is less than b and moreover b equals c.
例如 a < b == c 审核是否 a 小于 b 并且 b 等于 c

Comparisons may be combined using the Boolean operators and and or, and the outcome of a comparison (or of any other Boolean expression) may be negated with not.
比较操作可以通过逻辑操作符 and 和 or 组合，比较的结果可以用 not 来取反义

These have lower priorities than comparison operators;
这些操作符的优先级又低于比较操作符，在它们之中，not 具有最高的优先级， or 优先级最低，所以 A and not B or C 等于 (A and (notB)) or C

between them, not has the highest priority and or the lowest, so that A and not B or C is equivalent to (A and (not B)) or C.
当然，括号也可以用于比较表达式

The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.
逻辑操作符 and 和 or 也称作短路操作符：它们的参数从左向右解析，一旦结果可以确定就停止

For example, if A and C are true but B is false, A and B and C does not evaluate the expression C.
例如，如果 A 和 C 为真而 B 为假， A and B and C 不会解析 C

When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument.
作用于一个普通的非逻辑值时，短路操作符的返回值通常是最后一个变量

It is possible to assign the result of a comparison or other Boolean expression to a variable.
可以把比较或其它逻辑表达式的返回值赋给一个变量，例如:

Note that in Python, unlike C, assignment cannot occur inside expressions.
需要注意的是 Python 与 C 不同，在表达式内部不能赋值

C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing = in an expression when == was intended.
C 程序员经常对此抱怨，不过它避免了一类在 C 程序中司空见惯的错误：想要在解析式中使 == 时误用了 = 操作符

5.8.
5.8. 比较序列和其它类型¶

Sequence objects may be compared to other objects with the same sequence type.
序列对象可以与相同类型的其它对象比较

The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison;
比较操作按 字典序 进行：首先比较前两个元素，如果不同，就决定了比较的结果

if they are equal, the next two items are compared, and so on, until either sequence is exhausted.
如果相同，就比较后两个元素，依此类推，直到所有序列都完成比较

If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively.
如果两个元素本身就是同样类 型的序列，就递归字典序比较

If all items of two sequences compare equal, the sequences are considered equal.
如果两个序列的所有子项都相等，就认为序列相等

If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.
如果一个序列是另一个序列的初始子序列，较短的一个序列就小于另一个

Lexicographical ordering for strings uses the Unicode code point number to order individual characters.
字符 串的字典序按照单字符的 ASCII 顺序

Some examples of comparisons between sequences of the same type:
下面是同类型序列之间比较的一些例子:

Note that comparing objects of different types with < or > is legal provided that the objects have appropriate comparison methods.
需要注意的是如果通过 < 或者 > 比较的对象只要具有合适的比较方法就是合法的

For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc.
比如，混合数值类型是通过它们的数值进行比较的，所以 0 是等于 0.0 

Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a TypeError exception.
否则解释器将会触发一个 TypeError 异常，而不是提供一个随意的结果

Footnotes
Footnotes

