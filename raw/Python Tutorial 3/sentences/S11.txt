12.1.
12.1. 简介¶

Python applications will often use packages and modules that don’t come as part of the standard library.
Python 应用程序经常会使用一些不属于标准库的包和模块

Applications will sometimes need a specific version of a library, because the application may require that a particular bug has been fixed or the application may be written using an obsolete version of the library’s interface.
应用程序有时候需要某个特定版本的库，因为它需要一个特定的 bug 已得到修复的库或者它是使用了一个过时版本的库的接口编写的

This means it may not be possible for one Python installation to meet the requirements of every application.
这就意味着可能无法安装一个 Python 来满足每个应用程序的要求

If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.
如果应用程序 A 需要一个特定模块的 1.0 版本但是应用程序 B 需要该模块的 2.0 版本，这两个应用程序的要求是冲突的，安装版本 1.0 或者版本 2.0 将会导致其中一个应用程序不能运行

The solution for this problem is to create a virtual environment (often shortened to “virtualenv”), a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.
这个问题的解决方案就是创建一个 虚拟环境 （通常简称为 “virtualenv”），包含一个特定版本的 Python，以及一些附加的包的独立的目录树

Different applications can then use different virtual environments.
不同的应用程序可以使用不同的虚拟环境

To resolve the earlier example of conflicting requirements, application A can have its own virtual environment with version 1.0 installed while application B has another virtualenv with version 2.0.
为了解决前面例子中的冲突，应用程序 A 可以有自己的虚拟环境，其中安装了特定模块的 1.0 版本

If application B requires a library be upgraded to version 3.0, this will not affect application A’s environment.
而应用程序 B 拥有另外一个安装了特定模块 2.0 版本的虚拟环境

12.2.
12.2. 创建虚拟环境¶

The script used to create and manage virtual environments is called pyvenv.
用于创建和管理虚拟环境的脚本叫做 pyvenv

pyvenv will usually install the most recent version of Python that you have available;
pyvenv 通常会安装你可用的 Python 中最新的版本

the script is also installed with a version number, so if you have multiple versions of Python on your system you can select a specific Python version by running pyvenv-3.4 or whichever version you want.
这个脚本也能指定安装一个特定的版本的 Python，因此如果在你的系统中有多个版本的 Python 的话，你可以运行 pyvenv-3.5 或者你想要的任何版本来选择一个指定的 Python 版本

To create a virtualenv, decide upon a directory where you want to place it and run pyvenv with the directory path:
要创建一个 virtualenv，首先决定一个你想要存放的目录接着运行 pyvenv 后面携带着目录名:

This will create the tutorial-env directory if it doesn’t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting files.
如果目录不存在的话，这将会创建一个 tutorial-env 目录，并且也在目录里面创建一个包含 Python 解释器，标准库，以及各种配套文件的 Python “副本”

Once you’ve created a virtual environment, you need to activate it.
一旦你已经创建了一个虚拟环境，你必须激活它

On Windows, run:
在 Windows 上，运行:

On Unix or MacOS, run:
在 Unix 或者 MacOS 上，运行:

(This script is written for the bash shell.
（这个脚本是用 bash shell 编写的

If you use the csh or fish shells, there are alternate activate.csh and activate.fish scripts you should use instead.)
如果你使用 csh 或者 fish shell，你应该使用 activate.csh 和 activate.fish 来替代

Activating the virtualenv will change your shell’s prompt to show what virtualenv you’re using, and modify the environment so that running python will get you that particular version and installation of Python.
激活了虚拟环境会改变你的 shell 提示符，显示你正在使用的虚拟环境，并且修改了环境以致运行 python 将会让你得到了特定的 Python 版本

For example:
例如:

12.3.
12.3. 使用 pip 管理包¶

Once you’ve activated a virtual environment, you can install, upgrade, and remove packages using a program called pip.
一旦你激活了一个虚拟环境，可以使用一个叫做 pip 程序来安装，升级以及删除包

By default pip will install packages from the Python Package Index, <https://pypi.python.org/pypi>.
默认情况下 pip 将会从 Python Package Index，<https://pypi.python.org/pypi>， 中安装包

You can browse the Python Package Index by going to it in your web browser, or you can use pip‘s limited search feature:
你可以通过 web 浏览器浏览它们，或者你也能使用 pip 有限的搜索功能:

pip has a number of subcommands: “search”, “install”, “uninstall”, “freeze”, etc.
pip 有许多子命令：“搜索”，“安装”，“卸载”，“freeze”（译者注：这个词语暂时没有合适的词语来翻译），等等

(Consult the Installing Python Modules guide for complete documentation for pip.)
（请参考 installing-index 指南获取 pip 更多完整的文档

You can install the latest version of a package by specifying a package’s name:
你可以安装一个包最新的版本，通过指定包的名称:

You can also install a specific version of a package by giving the package name followed by == and the version number:
你也能安装一个指定版本的包，通过给出包名后面紧跟着 == 和版本号:

If you re-run this command, pip will notice that the requested version is already installed and do nothing.
如果你重新运行命令（pip install requests==2.6.0），pip 会注意到要求的版本已经安装，不会去做任何事情

You can supply a different version number to get that version, or you can run pip install --upgrade to upgrade the package to the latest version:
你也可以提供一个不同的版本号来安装，或者运行 pip install --upgrade 来升级包到最新版本:

pip uninstall followed by one or more package names will remove the packages from the virtual environment.
pip uninstall 后跟一个或者多个包名将会从虚拟环境中移除这些包

pip show will display information about a particular package:
pip show 将会显示一个指定的包的信息:

pip list will display all of the packages installed in the virtual environment:
pip list 将会列出所有安装在虚拟环境中的包:

pip freeze will produce a similar list of the installed packages, but the output uses the format that pip install expects.
pip freeze 将会生成一个类似需要安装的包的列表，但是输出采用了 pip install 期望的格式

A common convention is to put this list in a requirements.txt file:
常见的做法就是把它们放在一个 requirements.txt 文件:

The requirements.txt can then be committed to version control and shipped as part of an application.
requirements.txt 能够被提交到版本控制中并且作为一个应用程序的一部分

Users can then install all the necessary packages with install -r:
用户们可以使用 install -r 安装所有必须的包:

pip has many more options.
pip 还有更多的选项

Consult the Installing Python Modules guide for complete documentation for pip.
请参考 installing-index 指南获取关于 pip 完整的文档

When you’ve written a package and want to make it available on the Python Package Index, consult the Distributing Python Modules guide.
当你编写一个包并且在 Python Package Index 中也出现的话，请参考 distributing-index 指南

