This second tour covers more advanced modules that support professional programming needs.
第二部分包含了支持专业编程工作所需的更高级的模块，这些模块很少出现在小脚本中

11.1.
11.1. 输出格式¶

The reprlib module provides a version of repr() customized for abbreviated displays of large or deeply nested containers:
reprlib 模块为大型的或深度嵌套的容器缩写显示提供了 :repr() 函数的一个定制版本:

The pprint module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter.
pprint 模块给老手提供了一种解释器可读的方式深入控制内置和用户自定义对象的打印

When the result is longer than one line, the “pretty printer” adds line breaks and indentation to more clearly reveal data structure:
当输出超过一行的时候，“美化打印（pretty printer）”添加断行和标识符，使得数据结构显示的更清晰:

The textwrap module formats paragraphs of text to fit a given screen width:
textwrap 模块格式化文本段落以适应设定的屏宽:

The locale module accesses a database of culture specific data formats.
locale 模块按访问预定好的国家信息数据库

The grouping attribute of locale’s format function provides a direct way of formatting numbers with group separators:
locale 的格式化函数属性集提供了一个直接方式以分组标示格式化数字:

11.2.
11.2. 模板¶

The string module includes a versatile Template class with a simplified syntax suitable for editing by end-users.
string 提供了一个灵活多变的模版类 Template ，使用它最终用户可以用简单的进行编辑

This allows users to customize their applications without having to alter the application.
这使用户可以在不进行改变的情况下定制他们的应用程序

The format uses placeholder names formed by $ with valid Python identifiers (alphanumeric characters and underscores).
格式使用 $ 为开头的 Python 合法标识（数字、字母和下划线）作为占位符

Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces.
占位符外面的大括号使它可以和其它的字符不加空格混在一起

Writing $$ creates a single escaped $:
 $$ 创建一个单独的 $:

The substitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argument.
当一个占位符在字典或关键字参数中没有被提供时，substitute() 方法就会抛出一个 KeyError 异常

For mail-merge style applications, user supplied data may be incomplete and the safe_substitute() method may be more appropriate — it will leave placeholders unchanged if data is missing:
 对于邮件合并风格的应用程序，用户提供的数据可能并不完整，这时使用 safe_substitute() 方法可能更适合 — 如果数据不完整，它就不会改变占位符:

Template subclasses can specify a custom delimiter.
模板子类可以指定一个自定义分隔符

For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:
例如，图像查看器的批量重命名工具可能选择使用百分号作为占位符，像当前日期，图片序列号或文件格式:

Another application for templating is separating program logic from the details of multiple output formats.
模板的另一个应用是把多样的输出格式细节从程序逻辑中分类出来

This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.
这便使得 XML 文件，纯文本报表和 HTML WEB 报表定制模板成为可能

11.3.
11.3. 使用二进制数据记录布局¶

The struct module provides pack() and unpack() functions for working with variable length binary record formats.
struct 模块为使用变长的二进制记录格式提供了 pack() 和 unpack() 函数

The following example shows how to loop through header information in a ZIP file without using the zipfile module.
下面的示例演示了在不使用 zipfile 模块的情况下如何迭代一个 ZIP 文件的头信息

Pack codes "H" and "I" represent two and four byte unsigned numbers respectively.
压缩码 "H" 和 "I" 分别表示2和4字节无符号数字， "<" 表明它们都是标准大小并且按照 little-endian 字节排序

11.4.
11.4. 多线程¶

Threading is a technique for decoupling tasks which are not sequentially dependent.
线程是一个分离无顺序依赖关系任务的技术

Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background.
在某些任务运行于后台的时候应用程序会变得迟缓，线程可以提升其速度

A related use case is running I/O in parallel with computations in another thread.
一个有关的用途是在 I/O 的同时其它线程可以并行计算

The following code shows how the high level threading module can run tasks in background while the main program continues to run:
下面的代码显示了高级模块 threading 如何在主程序运行的同时运行任务:

The principal challenge of multi-threaded applications is coordinating threads that share data or other resources.
多线程应用程序的主要挑战是协调线程，诸如线程间共享数据或其它资源

To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores.
为了达到那个目的，线程模块提供了许多同步化的原生支持，包括：锁，事件，条件变量和信号灯

While those tools are powerful, minor design errors can result in problems that are difficult to reproduce.
尽管这些工具很强大，微小的设计错误也可能造成难以挽回的故障

So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the queue module to feed that thread with requests from other threads.
因此，任务协调的首选方法是把对一个资源的所有访问集中在一个单独的线程中，然后使用 queue 模块用那个线程服务其他线程的请求

Applications using Queue objects for inter-thread communication and coordination are easier to design, more readable, and more reliable.
为内部线程通信和协调而使用 Queue 对象的应用程序更易于设计，更可读，并且更可靠

11.5.
11.5. 日志¶

The logging module offers a full featured and flexible logging system.
logging 模块提供了完整和灵活的日志系统

At its simplest, log messages are sent to a file or to sys.stderr:
它最简单的用法是记录信息并发送到一个文件或 sys.stderr:

This produces the following output:
输出如下:

By default, informational and debugging messages are suppressed and the output is sent to standard error.
默认情况下捕获信息和调试消息并将输出发送到标准错误流

Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server.
其它可选的路由信息方式通过 email，数据报文，socket 或者 HTTP Server

New filters can select different routing based on message priority: DEBUG, INFO, WARNING, ERROR, and CRITICAL.
基于消息属性，新的过滤器可以选择不同的路由： DEBUG， INFO， WARNING， ERROR 和 CRITICAL 

The logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application.
日志系统可以直接在 Python 代码中定制，也可以不经过应用程序直接在一个用户可编辑的配置文件中加载

11.6.
11.6. 弱引用¶

Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles).
Python 自动进行内存管理（对大多数的对象进行引用计数和垃圾回收—— 垃圾回收 ——以循环利用）在最后一个引用消失后，内存会很快释放

This approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else.
这个工作方式对大多数应用程序工作良好，但是偶尔会需要跟踪对象来做一些事

Unfortunately, just tracking them creates a reference that makes them permanent.
不幸的是，仅仅为跟踪它们创建引用也会使其长期存在

The weakref module provides tools for tracking objects without creating a reference.
 weakref 模块提供了不用创建引用的跟踪对象工具，一旦对象不再存在，它自动从弱引用表上删除并触发回调

When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects.
典型的应用包括捕获难以构造的对象:

11.7.
11.7. 列表工具¶

Many data structure needs can be met with the built-in list type.
很多数据结构可能会用到内置列表类型

However, sometimes there is a need for alternative implementations with different performance trade-offs.
然而，有时可能需要不同性能代价的实现

The array module provides an array() object that is like a list that stores only homogeneous data and stores it more compactly.
array 模块提供了一个类似列表的 array() 对象，它仅仅是存储数据，更为紧凑

The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode "H") rather than the usual 16 bytes per entry for regular lists of Python int objects:
以下的示例演示了一个存储双字节无符号整数的数组（类型编码 "H" ）而非存储 16 字节 Python 整数对象的普通正规列表:

The collections module provides a deque() object that is like a list with faster appends and pops from the left side but slower lookups in the middle.
collections 模块提供了类似列表的 deque() 对象，它从左边添加（append）和弹出（pop）更快，但是在内部查询更慢

These objects are well suited for implementing queues and breadth first tree searches:
这些对象更适用于队列实现和广度优先的树搜索:

In addition to alternative list implementations, the library also offers other tools such as the bisect module with functions for manipulating sorted lists:
除了链表的替代实现，该库还提供了 bisect 这样的模块以操作存储链表:

The heapq module provides functions for implementing heaps based on regular lists.
heapq 提供了基于正规链表的堆实现

The lowest valued entry is always kept at position zero.
最小的值总是保持在 0 点

This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort:
这在希望循环访问最小元素但是不想执行完整堆排序的时候非常有用:

11.8.
11.8. 十进制浮点数算法¶

The decimal module offers a Decimal datatype for decimal floating point arithmetic.
decimal 模块提供了一个 Decimal 数据类型用于浮点数计算

Compared to the built-in float implementation of binary floating point, the class is especially helpful for
相比内置的二进制浮点数实现 float，这个类型有助于

For example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point.
金融应用和其它需要精确十进制表达的场合，

The Decimal result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance.
控制精度，

Exact representation enables the Decimal class to perform modulo calculations and equality tests that are unsuitable for binary floating point:
控制舍入以适应法律或者规定要求，

The decimal module provides arithmetic with as much precision as needed:
确保十进制数位精度，

10.
用户希望计算结果与手算相符的场合

