Some versions of the Python interpreter support editing of the current input line and history substitution, similar to facilities found in the Korn shell and the GNU Bash shell.
某些版本的 Python 解释器支持编辑当前的输入行和历史记录，类似于在 Korn shell 和 GNU Bash shell 中看到的功能

This is implemented using the GNU Readline library, which supports various styles of editing.
这是使用 GNU Readline 库实现的，它支持各种编辑风格

This library has its own documentation which we won’t duplicate here.
 这个库有它自己的文档，在这里我们不就重复了

14.1.
14.1. Tab 补全和历史记录¶

Completion of variable and module names is automatically enabled at interpreter startup so that the Tab key invokes the completion function;
变量和模块名的补全在解释器启动时 自动打开 以便 Tab 键调用补全功能

it looks at Python statement names, the current local variables, and the available module names.
它会查看Python语句的名字，当前局部变量以及可以访问的模块名

For dotted expressions such as string.a, it will evaluate the expression up to the final '.' and then suggest completions from the attributes of the resulting object.
对于点分表达式如 string.a，它将求出表达式最后一个 '.' 之前的值，然后根据结果的属性给出补全的建议

Note that this may execute application-defined code if an object with a __getattr__() method is part of the expression.
注意，如果一个具有 __getattr__() 方法的对象是表达式的某部分，这可能执行应用程序定义的代码

The default configuration also saves your history into a file named .python_history in your user directory.
默认的配置同时会把历史记录保存在你的用户目录下一个名为 .python_history 的文件中

The history will be available again during the next interactive interpreter session.
在下次与交互式解释器的会话中，历史记录将还可以访问

14.2.
14.2. 其它交互式解释器¶

This facility is an enormous step forward compared to earlier versions of the interpreter;
与早期版本的解释器相比，现在是向前巨大的进步

however, some wishes are left: It would be nice if the proper indentation were suggested on continuation lines (the parser knows if an indent token is required next).
然而，有些愿望还是没有实现：如果能对连续的行给出正确的建议就更好了（解析器知道下一行是否需要缩进）

The completion mechanism might use the interpreter’s symbol table.
补全机制可以使用解释器的符号表

A command to check (or even suggest) matching parentheses, quotes, etc., would also be useful.
检查（或者只是建议）匹配的括号、 引号的命令等也会非常有用

One alternative enhanced interactive interpreter that has been around for quite some time is IPython, which features tab completion, object exploration and advanced history management.
一个增强的交互式解释器是 IPython，它已经存在相当一段时间，具有 tab 补全、 对象 exploration 和高级的历史记录功能

It can also be thoroughly customized and embedded into other applications.
它也可以彻底定制并嵌入到其他应用程序中

Another similar enhanced interactive environment is bpython.
另一个类似的增强的交互式环境是 bpython

