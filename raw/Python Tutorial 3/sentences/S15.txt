16.1.
16.1. 交互模式¶

16.1.1.
16.1.1. 错误处理¶

When an error occurs, the interpreter prints an error message and a stack trace.
当错误发生时，解释器打印一个错误信息和堆栈跟踪

In interactive mode, it then returns to the primary prompt;
在交互模式下，它返回主提示符

when input came from a file, it exits with a nonzero exit status after printing the stack trace.
当输入来自文件的时候，在打印堆栈跟踪后以非零退出(a nonzero exit)状态退出

(Exceptions handled by an except clause in a try statement are not errors in this context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit;
（在 try 声明中被 except 子句捕捉到的异常在这种情况下不是错误

this applies to internal inconsistencies and some cases of running out of memory.
）有些错误是非常致命的会导致一个非零状态的退出

All error messages are written to the standard error stream;
这也适用于内部错误以及某些情况的内存耗尽

normal output from executed commands is written to standard output.
所有的错误信息都写入到标准错误流

Typing the interrupt character (usually Control-C or Delete) to the primary or secondary prompt cancels the input and returns to the primary prompt.
输入中断符（通常是 Control-C 或者 DEL）到主或者从提示符中会取消输入并且返回到主提示

[1] Typing an interrupt while a command is executing raises the KeyboardInterrupt exception, which may be handled by a try statement.
[1] 当命令执行中输入中断符会引起 KeyboardInterrupt 异常，这个异常能够被一个 try 声明处理

16.1.2.
16.1.2. 可执行 Python 脚本¶

On BSD’ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line
在 BSD’ish Unix 系统上，Python 脚本可直接执行，像 shell 脚本一样，只需要把下面内容加入到

(assuming that the interpreter is on the user’s PATH) at the beginning of the script and giving the file an executable mode.
（假设 python 解释器在用户的 PATH 中）脚本的开头，并给予该文件的可执行模式

The #!
#! 必须是文件的头两个字符

must be the first two characters of the file.
在一些系统上，第一行必须以 Unix-style 的行结束符（'\n'）结束，不能以 Windows 的行结束符（'\r\n'）

On some platforms, this first line must end with a Unix-style line ending ('\n'), not a Windows ('\r\n') line ending.
 注意 '#' 在 Python 中是用于注释的

The script can be given an executable mode, or permission, using the chmod command.
使用 chmod 命令能够给予脚本执行模式或者权限

On Windows systems, there is no notion of an “executable mode”.
在 Windows 系统上，没有一个 “可执行模式” 的概念

The Python installer automatically associates .py files with python.exe so that a double-click on a Python file will run it as a script.
Python 安装器会自动地把 .py 文件和 python.exe 关联起来，因此双击 Python 将会把它当成一个脚本运行

The extension can also be .pyw, in that case, the console window that normally appears is suppressed.
文件扩展名也可以是 .pyw，在这种情况下，运行时不会出现控制台窗口

16.1.3.
16.1.3. 交互式启动文件¶

When you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started.
当你使用交互式 Python 的时候，它常常很方便地执行一些命令在每次解释器启动时

You can do this by setting an environment variable named PYTHONSTARTUP to the name of a file containing your start-up commands.
你可以这样做：设置一个名为 PYTHONSTARTUP 的环境变量为包含你的启动命令的文件名

This is similar to the .profile feature of the Unix shells.
这跟 Unix shells 的 .profile 特点有些类似

This file is only read in interactive sessions, not when Python reads commands from a script, and not when /dev/tty is given as the explicit source of commands (which otherwise behaves like an interactive session).
这个文件在交互式会话中是只读的，在当 Python 从脚本中读取命令，以及在当 /dev/tty 被作为明确的命令源的时候不只是可读的

It is executed in the same namespace where interactive commands are executed, so that objects that it defines or imports can be used without qualification in the interactive session.
该文件在交互式命令被执行的时候在相同的命名空间中能够被执行，因此在交互式会话中定义或者导入的对象能够无需授权就能使用

You can also change the prompts sys.ps1 and sys.ps2 in this file.
你也能在文件中更改提示 sys.ps1 和 sys.ps2

If you want to read an additional start-up file from the current directory, you can program this in the global start-up file using code like if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read()).
如果你想要从当前目录中读取一个附加的启动文件，你可以在全局启动文件中编写代码像这样：if os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read())

If you want to use the startup file in a script, you must do this explicitly in the script:
如果你想要在脚本中使用启动文件的话，你必须在脚本中明确要这么做:

16.1.4.
16.1.4. 定制模块¶

Python provides two hooks to let you customize it: sitecustomize and usercustomize.
Python 提供两个钩子为了让你们定制 sitecustomize 和 usercustomize

To see how it works, you need first to find the location of your user site-packages directory.
为了看看它的工作机制的话，你必须首先找到你的用户 site-packages 目录的位置

Start Python and run this code:
启动 Python 并且运行这段代码:

Now you can create a file named usercustomize.py in that directory and put anything you want in it.
现在你可以创建一个名为 usercustomize.py 的文件在你的用户 site-packages 目录，并且在里面放置你想要的任何内容

It will affect every invocation of Python, unless it is started with the -s option to disable the automatic import.
它会影响 Python 的每一次调用，除非它以 -s （禁用自动导入）选项启动

sitecustomize works in the same way, but is typically created by an administrator of the computer in the global site-packages directory, and is imported before usercustomize.
sitecustomize 以同样地方式工作，但是通常由是机器的管理员创建在全局的 site-packages 目录中，并且是在 usercustomize 之前导入

See the documentation of the site module for more details.
请参阅 site 模块获取更多信息

Footnotes
Footnotes

