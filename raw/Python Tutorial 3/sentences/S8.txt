9 Classes¶
9. 类¶

Compared with other programming languages, Python’s class mechanism adds classes with a minimum of new syntax and semantics.
Python 的类机制通过最小的新语法和语义在语言中实现了类

It is a mixture of the class mechanisms found in C++ and Modula-3.
它是 C++ 或者 Modula-3 语言中类机制的混合

Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.
就像模块一样，Python 的类并没有在用户和定义之间设立绝对的屏障，而是依赖于用户不去“强行闯入定义”的优雅

Objects can contain arbitrary amounts and kinds of data.
另一方面，类的大多数重要特性都被完整的保留下来：类继承机制允许多重继承，派生类可以覆盖（override）基类中的任何方法或类，可以使用相同的方法名称调用基类的方法

As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.
对象可以包含任意数量的私有数据

In C++ terminology, normally class members (including the data members) are public (except see below Private Variables), and all member functions are virtual.
用 C++ 术语来讲，所有的类成员（包括数据成员）都是公有（ public ）的（其它情况见下文 私有变量），所有的成员函数都是虚（ virtual ）的

As in Modula-3, there are no shorthands for referencing the object’s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call.
用 Modula-3 的术语来讲，在成员方法中没有简便的方式引用对象的成员：方法函数在定义时需要以引用的对象做为第一个参数，调用时则会隐式引用对象

As in Smalltalk, classes themselves are objects.
像在 Smalltalk 中一个，类也是对象

This provides semantics for importing and renaming.
这就提供了导入和重命名语义

Unlike C++ and Modula-3, built-in types can be used as base classes for extension by the user.
不像 C++ 和 Modula-3 中那样，大多数带有特殊语法的内置操作符（算法运算符、下标等）都可以针对类的需要重新定义

(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++ terms.
在讨论类时，没有足够的得到共识的术语，我会偶尔从 Smalltalk 和 C++ 借用一些

I would use Modula-3 terms, since its object-oriented semantics are closer to those of Python than C++, but I expect that few readers have heard of it.)
我比较喜欢用 Modula-3 的用语，因为比起 C++，Python 的面向对象语法更像它，但是我想很少有读者听过这个

9.1 A Word About Names and Objects¶
9.1. 术语相关¶

Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object.
对象具有特性，并且多个名称（在多个作用域中）可以绑定在同一个对象上

This is known as aliasing in other languages.
在其它语言中被称为别名

This is usually not appreciated on a first glance at Python, and can be safely ignored when dealing with immutable basic types (numbers, strings, tuples).
在对 Python 的第一印象中这通常会被忽略，并且当处理不可变基础类型（数字，字符串，元组）时可以被放心的忽略

However, aliasing has a possibly surprising effect on the semantics of Python code involving mutable objects such as lists, dictionaries, and most other types.
但是，在调用列表、字典这类可变对象，或者大多数程序外部类型（文件，窗体等）描述实体时，别名对 Python 代码的语义便具有（有意而为）影响

This is usually used to the benefit of the program, since aliases behave like pointers in some respects.
这通常有助于程序的优化，因为在某些方面别名表现的就像是指针

For example, passing an object is cheap since only a pointer is passed by the implementation;
例如，你可以轻易的传递一个对象，因为通过继承只是传递一个指针

and if a function modifies an object passed as an argument, the caller will see the change — this eliminates the need for two different argument passing mechanisms as in Pascal.
并且如果一个方法修改了一个作为参数传递的对象，调用者可以接收这一变化——这消除了两种不同的参数传递机制的需要，像 Pascal 语言

9.2 Python Scopes and Namespaces¶
9.2. Python 作用域和命名空间¶

Before introducing classes, I first have to tell you something about Python’s scope rules.
在介绍类之前，我首先介绍一些有关 Python 作用域的规则

Class definitions play some neat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what’s going on.
类的定义非常巧妙的运用了命名空间，要完全理解接下来的知识，需要先理解作用域和命名空间的工作原理

Incidentally, knowledge about this subject is useful for any advanced Python programmer.
另外，这一切的知识对于任何高级 Python 程序员都非常有用

Let’s begin with some definitions.
让我们从一些定义说起

A namespace is a mapping from names to objects.
命名空间 是从命名到对象的映射

Most namespaces are currently implemented as Python dictionaries, but that’s normally not noticeable in any way (except for performance), and it may change in the future.
当前命名空间主要是通过 Python 字典实现的，不过通常不关心具体的实现方式（除非出于性能考虑），以后也有可能会改变其实现方式

Examples of namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names);
以下有一些命名空间的例子：内置命名（像 abs() 这样的函数，以及内置异常名）集，模块中的全局命名，函数调用中的局部命名

the global names in a module;
某种意义上讲对象的属性集也是一个命名空间

and the local names in a function invocation.
关于命名空间需要了解的一件很重要的事就是不同命名空间中的命名没有任何联系，例如两个不同的模块可能都会定义一个名为 maximize 的函数而不会发生混淆－用户必须以模块名为前缀来引用它们

By the way, I use the word attribute for any name following a dot — for example, in the expression z.real, real is an attribute of the object z.
顺便提一句，我称 Python 中任何一个“.”之后的命名为 属性 －－例如，表达式 z.real 中的 real 是对象 z 的一个属性

Strictly speaking, references to names in modules are attribute references: in the expression modname.funcname, modname is a module object and funcname is an attribute of it.
严格来讲，从模块中引用命名是引用属性：表达式 modname.funcname 中，modname 是一个模块对象，funcname 是它的一个属性

In this case there happens to be a straightforward mapping between the module’s attributes and the global names defined in the module: they share the same namespace!
因此，模块的属性和模块中的全局命名有直接的映射关系：它们共享同一命名空间

[1]
[1]

Attributes may be read-only or writable.
属性可以是只读过或写的

In the latter case, assignment to attributes is possible.
后一种情况下，可以对属性赋值

Module attributes are writable: you can write modname.the_answer = 42.
你可以这样作： modname.the_answer = 42 

Writable attributes may also be deleted with the del statement.
可写的属性也可以用 del 语句删除

For example, del modname.the_answer will remove the attribute the_answer from the object named by modname.
例如： del modname.the_answer 会从 modname 对象中删除 the_answer 属性

Namespaces are created at different moments and have different lifetimes.
不同的命名空间在不同的时刻创建，有不同的生存期

The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.
包含内置命名的命名空间在 Python 解释器启动时创建，会一直保留，不被删除

The global namespace for a module is created when the module definition is read in;
模块的全局命名空间在模块定义被读入时创建，通常，模块命名空间也会一直保存到解释器退出

normally, module namespaces also last until the interpreter quits.
由解释器在最高层调用执行的语句，不管它是从脚本文件中读入还是来自交互式输入，都是 __main__ 模块的一部分，所以它们也拥有自己的命名空间（内置命名也同样被包含在一个模块中，它被称作 builtins ）

The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function.
当调用函数时，就会为它创建一个局部命名空间，并且在函数返回或抛出一个并没有在函数内部处理的异常时被删除

(Actually, forgetting would be a better way to describe what actually happens.) Of course, recursive invocations each have their own local namespace.
（实际上，用遗忘来形容到底发生了什么更为贴切

A scope is a textual region of a Python program where a namespace is directly accessible.
作用域 就是一个 Python 程序可以直接访问命名空间的正文区域

“Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.
这里的直接访问意思是一个对名称的错误引用会尝试在命名空间内查找

Although scopes are determined statically, they are used dynamically.
尽管作用域是静态定义，在使用时他们都是动态的

At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:
每次执行时，至少有三个命名空间可以直接访问的作用域嵌套在一起：

the innermost scope, which is searched first, contains the local names
首先搜索最内层的作用域，它包含局部命名任意函数包含的作用域

the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names
是内层嵌套作用域搜索起点，包含非局部，但是也非全局的命名

the next-to-last scope contains the current module’s global names
接下来的作用域包含当前模块的全局命名

the outermost scope (searched last) is the namespace containing built-in names
最外层的作用域（最后搜索）是包含内置命名的命名空间

If a name is declared global, then all references and assignments go directly to the middle scope containing the module’s global names.
如果一个命名声明为全局的，那么对它的所有引用和赋值会直接搜索包含这个模块全局命名的作用域

To rebind variables found outside of the innermost scope, the nonlocal statement can be used;
如果要重新绑定最里层作用域之外的变量，可以使用 nonlocal 语句

if not declared nonlocal, those variables are read-only (an attempt to write to such a variable will simply create a new local variable in the innermost scope, leaving the identically named outer variable unchanged).
如果不声明为 nonlocal，这些变量将是只读的（对这样的变量赋值会在最里面的作用域创建一个新的局部变量，外部具有相同命名的那个变量不会改变）

Usually, the local scope references the local names of the (textually) current function.
通常，局部作用域引用当前函数的命名

Outside functions, the local scope references the same namespace as the global scope: the module’s namespace.
在函数之外，局部作用域与全局使用域引用同一命名空间：模块命名空间

Class definitions place yet another namespace in the local scope.
类定义也是局部作用域中的另一个命名空间

It is important to realize that scopes are determined textually: the global scope of a function defined in a module is that module’s namespace, no matter from where or by what alias the function is called.
重要的是作用域决定于源程序的意义：一个定义于某模块中的函数的全局作用域是该模块的命名空间，而不是该函数的别名被定义或调用的位置，了解这一点非常重要

On the other hand, the actual search for names is done dynamically, at run time — however, the language definition is evolving towards static name resolution, at “compile” time, so don’t rely on dynamic name resolution!
另一方面，命名的实际搜索过程是动态的，在运行时确定的——然而，Python 语言也在不断发展，以后有可能会成为静态的“编译”时确定，所以不要依赖动态解析

(In fact, local variables are already determined statically.)
（事实上，局部变量已经是静态确定了

A special quirk of Python is that – if no global statement is in effect – assignments to names always go into the innermost scope.
Python 的一个特别之处在于：如果没有使用 global 语法，其赋值操作总是在最里层的作用域

Assignments do not copy data — they just bind names to objects.
赋值不会复制数据，只是将命名绑定到对象

The same is true for deletions: the statement del x removes the binding of x from the namespace referenced by the local scope.
删除也是如此：del x 只是从局部作用域的命名空间中删除命名 x 

In fact, all operations that introduce new names use the local scope: in particular, import statements and function definitions bind the module or function name in the local scope.
事实上，所有引入新命名的操作都作用于局部作用域

The global statement can be used to indicate that particular variables live in the global scope and should be rebound there;
global 语句用以指明某个特定的变量为全局作用域，并重新绑定它

the nonlocal statement indicates that particular variables live in an enclosing scope and should be rebound there.
nonlocal 语句用以指明某个特定的变量为封闭作用域，并重新绑定它

9.2.1 Scopes and Namespaces Example¶
9.2.1. 作用域和命名空间示例¶

This is an example demonstrating how to reference the different scopes and namespaces, and how global and nonlocal affect variable binding:
以下是一个示例，演示了如何引用不同作用域和命名空间，以及 global 和 nonlocal 如何影响变量绑定:

The output of the example code is:
以上示例代码的输出为:

Note how the local assignment (which is default) didn’t change scope_test‘s binding of spam.
注意：local 赋值语句是无法改变 scope_test 的 spam 绑定

The nonlocal assignment changed scope_test‘s binding of spam, and the global assignment changed the module-level binding.
nonlocal 赋值语句改变了 scope_test 的 spam 绑定，并且 global 赋值语句从模块级改变了 spam 绑定

You can also see that there was no previous binding for spam before the global assignment.
你也可以看到在 global 赋值语句之前对 spam 是没有预先绑定的

9.3 A First Look at Classes¶
9.3. 初识类¶

Classes introduce a little bit of new syntax, three new object types, and some new semantics.
类引入了一些新语法：三种新的对象类型和一些新的语义

9.3.1 Class Definition Syntax¶
9.3.1. 类定义语法¶

The simplest form of class definition looks like this:
类定义最简单的形式如下:

Class definitions, like function definitions (def statements) must be executed before they have any effect.
类的定义就像函数定义（ def 语句），要先执行才能生效

(You could conceivably place a class definition in a branch of an if statement, or inside a function.)
（你当然可以把它放进 if 语句的某一分支，或者一个函数的内部

In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful — we’ll come back to this later.
习惯上，类定义语句的内容通常是函数定义，不过其它语句也可以，有时会很有用，后面我们再回过头来讨论

The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods — again, this is explained later.
类中的函数定义通常包括了一个特殊形式的参数列表，用于方法调用约定——同样我们在后面讨论这些

When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace.
进入类定义部分后，会创建出一个新的命名空间，作为局部作用域

In particular, function definitions bind the name of the new function here.
因此，所有的赋值成为这个新命名空间的局部变量

When a class definition is left normally (via the end), a class object is created.
类定义完成时（正常退出），就创建了一个 类对象

This is basically a wrapper around the contents of the namespace created by the class definition;
基本上它是对类定义创建的命名空间进行了一个包装

we’ll learn more about class objects in the next section.
我们在下一节进一步学习类对象的知识

The original local scope (the one in effect just before the class definition was entered) is reinstated, and the class object is bound here to the class name given in the class definition header (ClassName in the example).
原始的局部作用域（类定义引入之前生效的那个）得到恢复，类对象在这里绑定到类定义头部的类名（例子中是 ClassName ）

9.3.2 Class Objects¶
9.3.2. 类对象¶

Class objects support two kinds of operations: attribute references and instantiation.
类对象支持两种操作：属性引用和实例化

Attribute references use the standard syntax used for all attribute references in Python: obj.name.
属性引用 使用和 Python 中所有的属性引用一样的标准语法：obj.name

Valid attribute names are all the names that were in the class’s namespace when the class object was created.
类对象创建后，类命名空间中所有的命名都是有效属性名

So, if the class definition looked like this:
所以如果类定义是这样:

then MyClass.i and MyClass.f are valid attribute references, returning an integer and a function object, respectively.
那么 MyClass.i 和 MyClass.f 是有效的属性引用，分别返回一个整数和一个方法对象

Class attributes can also be assigned to, so you can change the value of MyClass.i by assignment.
也可以对类属性赋值，你可以通过给 MyClass.i 赋值来修改它

__doc__ is also a valid attribute, returning the docstring belonging to the class: "A simple example class".
 __doc__ 也是一个有效的属性，返回类的文档字符串："A simple example class"

Class instantiation uses function notation.
类的 实例化 使用函数符号

Just pretend that the class object is a parameterless function that returns a new instance of the class.
只要将类对象看作是一个返回新的类实例的无参数函数即可

For example (assuming the above class):
例如（假设沿用前面的类）:

creates a new instance of the class and assigns this object to the local variable x.
以上创建了一个新的类 实例 并将该对象赋给局部变量 x

The instantiation operation (“calling” a class object) creates an empty object.
这个实例化操作（“调用”一个类对象）来创建一个空的对象

Many classes like to create objects with instances customized to a specific initial state.
很多类都倾向于将对象创建为有初始状态的

Therefore a class may define a special method named __init__(), like this:
因此类可能会定义一个名为 __init__() 的特殊方法，像下面这样:

When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance.
类定义了 __init__() 方法的话，类的实例化操作会自动为新创建的类实例调用 __init__() 方法

So in this example, a new, initialized instance can be obtained by:
所以在下例中，可以这样创建一个新的实例:

Of course, the __init__() method may have arguments for greater flexibility.
当然，出于弹性的需要，__init__() 方法可以有参数

In that case, arguments given to the class instantiation operator are passed on to __init__().
事实上，参数通过 __init__() 传递到类的实例化操作上

For example,
例如，

9.3.3 Instance Objects¶
9.3.3. 实例对象¶

Now what can we do with instance objects?
现在我们可以用实例对象作什么

The only operations understood by instance objects are attribute references.
实例对象唯一可用的操作就是属性引用

There are two kinds of valid attribute names, data attributes and methods.
有两种有效的属性名

data attributes correspond to “instance variables” in Smalltalk, and to “data members” in C++.
数据属性 相当于 Smalltalk 中的“实例变量”或 C++ 中的“数据成员”

Data attributes need not be declared;
和局部变量一样，数据属性不需要声明，第一次使用时它们就会生成

like local variables, they spring into existence when they are first assigned to.
例如，如果 x 是前面创建的 MyClass 实例，下面这段代码会打印出 16 而在堆栈中留下多余的东西:

The other kind of instance attribute reference is a method.
另一种为实例对象所接受的引用属性是 方法

A method is a function that “belongs to” an object.
方法是“属于”一个对象的函数

(In Python, the term method is not unique to class instances: other object types can have methods as well.
（在 Python 中，方法不止是类实例所独有：其它类型的对象也可有方法

For example, list objects have methods called append, insert, remove, sort, and so on.
例如，链表对象有 append，insert，remove，sort 等等方法

However, in the following discussion, we’ll use the term method exclusively to mean methods of class instance objects, unless explicitly stated otherwise.)
然而，在后面的介绍中，除非特别说明，我们提到的方法特指类方法）

Valid method names of an instance object depend on its class.
实例对象的有效名称依赖于它的类

By definition, all attributes of a class that are function objects define corresponding methods of its instances.
按照定义，类中所有（用户定义）的函数对象对应它的实例中的方法

So in our example, x.f is a valid method reference, since MyClass.f is a function, but x.i is not, since MyClass.i is not.
所以在我们的例子中，x.f 是一个有效的方法引用，因为 MyClass.f 是一个函数

But x.f is not the same thing as MyClass.f — it is a method object, not a function object.
但 x.i 不是，因为 MyClass.i 不是函数

9.3.4 Method Objects¶
9.3.4. 方法对象¶

Usually, a method is called right after it is bound:
通常，方法通过右绑定方式调用:

In the MyClass example, this will return the string 'hello world'.
在 MyClass 示例中，这会返回字符串 'hello world'

However, it is not necessary to call a method right away: x.f is a method object, and can be stored away and called at a later time.
然而，也不是一定要直接调用方法

For example:
 x.f 是一个方法对象，它可以存储起来以后调用

will continue to print hello world until the end of time.
会不断的打印 hello world

What exactly happens when a method is called?
调用方法时发生了什么

You may have noticed that x.f() was called without an argument above, even though the function definition for f() specified an argument.
你可能注意到调用 x.f() 时没有引用前面标出的变量，尽管在 f() 的函数定义中指明了一个参数

What happened to the argument?
这个参数怎么了

Surely Python raises an exception when a function that requires an argument is called without any — even if the argument isn’t actually used...
事实上如果函数调用中缺少参数，Python 会抛出异常－－甚至这个参数实际上没什么用……

Actually, you may have guessed the answer: the special thing about methods is that the object is passed as the first argument of the function.
实际上，你可能已经猜到了答案：方法的特别之处在于实例对象作为函数的第一个参数传给了函数

In our example, the call x.f() is exactly equivalent to MyClass.f(x).
在我们的例子中，调用 x.f() 相当于 MyClass.f(x) 

In general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method’s object before the first argument.
通常，以 n 个参数的列表去调用一个方法就相当于将方法的对象插入到参数列表的最前面后，以这个列表去调用相应的函数

If you still don’t understand how methods work, a look at the implementation can perhaps clarify matters.
如果你还是不理解方法的工作原理，了解一下它的实现也许有帮助

When an instance attribute is referenced that isn’t a data attribute, its class is searched.
引用非数据属性的实例属性时，会搜索它的类

If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object.
如果这个命名确认为一个有效的函数对象类属性，就会将实例对象和函数对象封装进一个抽象对象：这就是方法对象

When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.
以一个参数列表调用方法对象时，它被重新拆封，用实例对象和原始的参数列表构造一个新的参数列表，然后函数对象调用这个新的参数列表

9.3.5 Class and Instance Variables¶
9.3.5. 类和实例变量¶

Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:
一般来说，实例变量用于对每一个实例都是唯一的数据，类变量用于类的所有实例共享的属性和方法:

As discussed in A Word About Names and Objects, shared data can have possibly surprising effects with involving mutable objects such as lists and dictionaries.
正如在 术语相关 讨论的， 可变 对象，例如列表和字典，的共享数据可能带来意外的效果

For example, the tricks list in the following code should not be used as a class variable because just a single list would be shared by all Dog instances:
例如，下面代码中的 tricks 列表不应该用作类变量，因为所有的 Dog 实例将共享同一个列表:

Correct design of the class should use an instance variable instead:
这个类的正确设计应该使用一个实例变量:

9.4 Random Remarks¶
9.4. 一些说明¶

Data attributes override method attributes with the same name;
数据属性会覆盖同名的方法属性

to avoid accidental name conflicts, which may cause hard-to-find bugs in large programs, it is wise to use some kind of convention that minimizes the chance of conflicts.
为了避免意外的名称冲突，这在大型程序中是极难发现的 Bug，使用一些约定来减少冲突的机会是明智的

Possible conventions include capitalizing method names, prefixing data attribute names with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data attributes.
可能的约定包括：大写方法名称的首字母，使用一个唯一的小字符串（也许只是一个下划线）作为数据属性名称的前缀，或者方法使用动词而数据属性使用名词

Data attributes may be referenced by methods as well as by ordinary users (“clients”) of an object.
数据属性可以被方法引用，也可以由一个对象的普通用户（客户）使用

In other words, classes are not usable to implement pure abstract data types.
换句话说，类不能用来实现纯净的数据类型

In fact, nothing in Python makes it possible to enforce data hiding — it is all based upon convention.
事实上，Python 中不可能强制隐藏数据——一切基于约定（如果需要，使用 C 编写的 Python 实现可以完全隐藏实现细节并控制对象的访问

(On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary;
这可以用来通过 C 语言扩展 Python）

Clients should use data attributes with care — clients may mess up invariants maintained by the methods by stamping on their data attributes.
客户应该谨慎的使用数据属性——客户可能通过践踏他们的数据属性而使那些由方法维护的常量变得混乱

Note that clients may add data attributes of their own to an instance object without affecting the validity of the methods, as long as name conflicts are avoided — again, a naming convention can save a lot of headaches here.
注意：只要能避免冲突，客户可以向一个实例对象添加他们自己的数据属性，而不会影响方法的正确性——再次强调，命名约定可以避免很多麻烦

There is no shorthand for referencing data attributes (or other methods!) from within methods.
从方法内部引用数据属性（或其他方法）并没有快捷方式

I find that this actually increases the readability of methods: there is no chance of confusing local variables and instance variables when glancing through a method.
我觉得这实际上增加了方法的可读性：当浏览一个方法时，在局部变量和实例变量之间不会出现令人费解的情况

Often, the first argument of a method is called self.
一般，方法的第一个参数被命名为 self

This is nothing more than a convention: the name self has absolutely no special meaning to Python.
这仅仅是一个约定：对 Python 而言，名称 self 绝对没有任何特殊含义

Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.
（但是请注意：如果不遵循这个约定，对其他的 Python 程序员而言你的代码可读性就会变差，而且有些 类查看器 程序也可能是遵循此约定编写的

Any function object that is a class attribute defines a method for instances of that class.
类属性的任何函数对象都为那个类的实例定义了一个方法

It is not necessary that the function definition is textually enclosed in the class definition: assigning a function object to a local variable in the class is also ok.
函数定义代码不一定非得定义在类中：也可以将一个函数对象赋值给类中的一个局部变量

For example:
例如:

Now f, g and h are all attributes of class C that refer to function objects, and consequently they are all methods of instances of C — h being exactly equivalent to g.
现在 f， g 和 h 都是类 C 的属性，引用的都是函数对象，因此它们都是 C 实例的方法－－ h 严格等于 g 

Note that this practice usually only serves to confuse the reader of a program.
要注意的是这种习惯通常只会迷惑程序的读者

Methods may call other methods by using method attributes of the self argument:
通过 self 参数的方法属性，方法可以调用其它的方法:

Methods may reference global names in the same way as ordinary functions.
方法可以像引用普通的函数那样引用全局命名

The global scope associated with a method is the module containing its definition.
与方法关联的全局作用域是包含类定义的模块

(A class is never used as a global scope.) While one rarely encounters a good reason for using global data in a method, there are many legitimate uses of the global scope: for one thing, functions and modules imported into the global scope can be used by methods, as well as functions and classes defined in it.
（类本身永远不会做为全局作用域使用

Usually, the class containing the method is itself defined in this global scope, and in the next section we’ll find some good reasons why a method would want to reference its own class.
）尽管很少有好的理由在方法 中使用全局数据，全局作用域确有很多合法的用途：其一是方法可以调用导入全局作用域的函数和方法，也可以调用定义在其中的类和函数

Each value is an object, and therefore has a class (also called its type).
每个值都是一个对象，因此每个值都有一个 类( class ) （也称为它的 类型( type ) ），它存储为 object.__class__ 

9.5 Inheritance¶
9.5. 继承¶

Of course, a language feature would not be worthy of the name “class” without supporting inheritance.
当然，如果一种语言不支持继承就，“类”就没有什么意义

The syntax for a derived class definition looks like this:
派生类的定义如下所示:

The name BaseClassName must be defined in a scope containing the derived class definition.
命名 BaseClassName （示例中的基类名）必须与派生类定义在一个作用域内

In place of a base class name, other arbitrary expressions are also allowed.
除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:

Execution of a derived class definition proceeds the same as for a base class.
派生类定义的执行过程和基类是一样的

When the class object is constructed, the base class is remembered.
构造派生类对象时，就记住了基类

This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class.
这在解析属性引用的时候尤其有用：如果在类中找不到请求调用的属性，就搜索基类

This rule is applied recursively if the base class itself is derived from some other class.
如果基类是由别的类派生而来，这个规则会递归的应用上去

There’s nothing special about instantiation of derived classes: DerivedClassName() creates a new instance of the class.
派生类的实例化没有什么特殊之处： DerivedClassName() （示列中的派生类）创建一个新的类实例

Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object.
方法引用按如下规则解析：搜索对应的类属性，必要时沿基类链逐级搜索，如果找到了函数对象这个方法引用就是合法的

Derived classes may override methods of their base classes.
派生类可能会覆盖其基类的方法

Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it.
因为方法调用同一个对象中的其它方法时没有特权，基类的方法调用同一个基类的方法时，可能实际上最终调用了派生类中的覆盖方法

(For C++ programmers: all methods in Python are effectively virtual.)
（对于 C++ 程序员来说，Python 中的所有方法本质上都是 虚 方法

An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name.
派生类中的覆盖方法可能是想要扩充而不是简单的替代基类中的重名方法

There is a simple way to call the base class method directly: just call BaseClassName.methodname(self, arguments).
有一个简单的方法可以直接调用基类方法，只要调用： BaseClassName.methodname(self, arguments)

This is occasionally useful to clients as well.
有时这对于客户也很有用

(Note that this only works if the base class is accessible as BaseClassName in the global scope.)
（要注意只有 BaseClassName 在同一全局作用域定义或导入时才能这样用

Python has two built-in functions that work with inheritance:
Python 有两个用于继承的函数：

Use isinstance() to check an instance’s type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int.
函数 isinstance() 用于检查实例类型： isinstance(obj, int) 只有在 obj.__class__ 是 int 或其它从 int 继承的类型

Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int.
函数 issubclass() 用于检查类继承： issubclass(bool, int) 为 True，因为 bool 是 int 的子类，然而， issubclass(float, int) 为 False，因为 float 不是 int 的子类

9.5.1 Multiple Inheritance¶
9.5.1. 多继承¶

Python supports a form of multiple inheritance as well.
Python 同样有限的支持多继承形式

A class definition with multiple base classes looks like this:
多继承的类定义形如下例:

For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy.
在大多数情况下，在最简单的情况下，你能想到的搜索属性从父类继承的深度优先，左到右，而不是搜索两次在同一个类层次结构中，其中有一个重叠

Thus, if an attribute is not found in DerivedClassName, it is searched for in Base1, then (recursively) in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on.
因此，如果在 DerivedClassName （示例中的派生类）中没有找到某个属性，就会搜索 Base1，然后（递归的）搜索其基类，如果最终没有找到，就搜索 Base2，以此类推

In fact, it is slightly more complex than that;
实际上，super() 可以动态的改变解析顺序

the method resolution order changes dynamically to support cooperative calls to super().
这个方式可见于其它的一些多继承语言，类似 call-next-method，比单继承语言中的 super 更强大 

Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class).
动态调整顺序十分必要的，因为所有的多继承会有一到多个菱形关系（指有至少一个祖先类可以从子类经由多个继承路径到达）

For example, all classes inherit from object, so any case of multiple inheritance provides more than one path to reach object.
例如，所有的 new-style 类继承自 object ，所以任意的多继承总是会有多于一条继承路径到达 object 

To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right ordering specified in each class, that calls each parent only once, and that is monotonic (meaning that a class can be subclassed without affecting the precedence order of its parents).
为了防止重复访问基类，通过动态的线性化算法，每个类都按从左到右的顺序特别指定了顺序，每个祖先类只调用一次，这是单调的（意味着一个类被继承时不会影响它祖先的次序）

Taken together, these properties make it possible to design reliable and extensible classes with multiple inheritance.
总算可以通过这种方式使得设计一个可靠并且可扩展的多继承类成为可能

For more detail, see https://www.python.org/download/releases/2.3/mro/.
进一步的内容请参见 http://www.python.org/download/releases/2.3/mro/ 

9.6 Private Variables¶
9.6. 私有变量¶

“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python.
只能从对像内部访问的“私有”实例变量，在 Python 中不存在

However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g.
然而，也有一个变通的访问用于大多数 Python 代码：以一个下划线开头的命名（例如 _spam ）会被处理为 API 的非公开部分（无论它是一个函数、方法或数据成员）

_spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member).
它会被视为一个实现细节，无需公开

Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called name mangling.
因为有一个正当的类私有成员用途（即避免子类里定义的命名与之冲突），Python 提供了对这种结构的有限支持，称为 name mangling （命名编码） 

Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped.
任何形如 __spam 的标识（前面至少两个下划线，后面至多一个），被替代为 _classname__spam ，去掉前导下划线的 classname 即当前的类名

This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.
此语法不关注标识的位置，只要求在类定义内

Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls.
名称重整是有助于子类重写方法，而不会打破组内的方法调用

For example:
例如:

Note that the mangling rules are designed mostly to avoid accidents;
需要注意的是编码规则设计为尽可能的避免冲突，被认作为私有的变量仍然有可能被访问或修改

it still is possible to access or modify a variable that is considered private.
在特定的场合它也是有用的，比如调试的时候

Notice that code passed to exec() or eval() does not consider the classname of the invoking class to be the current class;
要注意的是代码传入 exec()， eval() 时不考虑所调用的类的类名，视其为当前类，这类似于 global 语句的效应，已经按字节编译的部分也有同样的限制

this is similar to the effect of the global statement, the effect of which is likewise restricted to code that is byte-compiled together.
这也同样作用于 getattr()， setattr() 和 delattr()，像直接引用 __dict__ 一样

9.7 Odds and Ends¶
9.7. 补充¶

Sometimes it is useful to have a data type similar to the Pascal “record” or C “struct”, bundling together a few named data items.
有时类似于 Pascal 中“记录（record）”或 C 中“结构（struct）”的数据类型很有用，它将一组已命名的数据项绑定在一起

An empty class definition will do nicely:
一个空的类定义可以很好的实现它:

A piece of Python code that expects a particular abstract data type can often be passed a class that emulates the methods of that data type instead.
某一段 Python 代码需要一个特殊的抽象数据结构的话，通常可以传入一个类，事实上这模仿了该类的方法

For instance, if you have a function that formats some data from a file object, you can define a class with methods read() and readline() that get the data from a string buffer instead, and pass it as an argument.
例如，如果你有一个用于从文件对象中格式化数据的函数，你可以定义一个带有 read() 和 readline() 方法的类，以此从字符串缓冲读取数据，然后将该类的对象作为参数传入前述的函数

Instance method objects have attributes, too: m.__self__ is the instance object with the method m(), and m.__func__ is the function object corresponding to the method.
实例方法对象也有属性：m.__self__ 是一个实例方法所属的对象，而 m.__func__ 是这个方法对应的函数对象

9.8 Iterators¶
9.8. 迭代器¶

By now you have probably noticed that most container objects can be looped over using a for statement:
现在你可能注意到大多数容器对象都可以用 for 遍历:

This style of access is clear, concise, and convenient.
这种形式的访问清晰、简洁、方便

The use of iterators pervades and unifies Python.
迭代器的用法在 Python 中普遍而且统一

Behind the scenes, the for statement calls iter() on the container object.
在后台， for 语句在容器对象中调用 iter() 

The function returns an iterator object that defines the method __next__() which accesses elements in the container one at a time.
该函数返回一个定义了 __next__() 方法的迭代器对象，它在容器中逐一访问元素

When there are no more elements, __next__() raises a StopIteration exception which tells the for loop to terminate.
没有后续的元素时， __next__() 抛出一个 StopIteration 异常通知 for 语句循环结束

You can call the __next__() method using the next() built-in function;
你可以是用内建的 next() 函数调用 __next__() 方法

this example shows how it all works:
以下是其工作原理的示例:

Having seen the mechanics behind the iterator protocol, it is easy to add iterator behavior to your classes.
了解了迭代器协议的后台机制，就可以很容易的给自己的类添加迭代器行为

Define an __iter__() method which returns an object with a __next__() method.
定义一个 __iter__() 方法，使其返回一个带有 __next__() 方法的对象

If the class defines __next__(), then __iter__() can just return self:
如果这个类已经定义了 __next__() ，那么 __iter__() 只需要返回 self:

9.9 Generators¶
9.10. 生成器¶

Generators are a simple and powerful tool for creating iterators.
Generator 是创建迭代器的简单而强大的工具

They are written like regular functions but use the yield statement whenever they want to return data.
它们写起来就像是正规的函数，需要返回数据的时候使用 yield 语句

Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed).
每次 next() 被调用时，生成器回复它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）

An example shows that generators can be trivially easy to create:
以下示例演示了生成器可以很简单的创建出来:

Anything that can be done with generators can also be done with class-based iterators as described in the previous section.
前一节中描述了基于类的迭代器，它能作的每一件事生成器也能作到

What makes generators so compact is that the __iter__() and __next__() methods are created automatically.
因为自动创建了 __iter__() 和 __next__() 方法，生成器显得如此简洁

Another key feature is that the local variables and execution state are automatically saved between calls.
另一个关键的功能在于两次执行之间，局部变量和执行状态都自动的保存下来

This made the function easier to write and much more clear than an approach using instance variables like self.index and self.data.
这使函数很容易写，而且比使用 self.index 和 self.data 之类的方式更清晰

In addition to automatic method creation and saving program state, when generators terminate, they automatically raise StopIteration.
除了创建和保存程序状态的自动方法，当发生器终结时，还会自动抛出 StopIteration 异常

In combination, these features make it easy to create iterators with no more effort than writing a regular function.
综上所述，这些功能使得编写一个正规函数成为创建迭代器的最简单方法

9.10 Generator Expressions¶
9.11. 生成器表达式¶

Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of brackets.
有时简单的生成器可以用简洁的方式调用，就像不带中括号的链表推导式

These expressions are designed for situations where the generator is used right away by an enclosing function.
这些表达式是为函数调用生成器而设计的

Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions.
生成器表达式比完整的生成器定义更简洁，但是没有那么多变，而且通常比等价的链表推导式更容易记

Examples:
例如:

Footnotes
Footnotes

