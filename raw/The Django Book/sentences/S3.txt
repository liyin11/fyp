In the previous chapter, you may have noticed something peculiar in how we returned the text in our example views.
笨办法学Python

Although this technique was convenient for the purpose of explaining how views work, it’s not a good idea to hard-code HTML directly in your views.
PHP开发手册

For these reasons, it’s much cleaner and more maintainable to separate the design of the page from the Python code itself.
ThinkPHP完全开发手册

Let’s start with a simple example template.
在前一章中，你可能已经注意到我们在例子视图中返回文本的方式有点特别

This Django template describes an HTML page that thanks a person for placing an order with a company.
 也就是说，HTML被直接硬编码在 Python 代码之中

This template is basic HTML with some variables and template tags thrown in.
尽管这种技术便于解释视图是如何工作的，但直接将HTML硬编码到你的视图里却并不是一个好主意

Let’s step through it:
 让我们来看一下为什么：

Any text surrounded by a pair of braces (e.g., {{ person_name }}) is a variable.
对页面设计进行的任何改变都必须对 Python 代码进行相应的修改

This means “insert the value of the variable with the given name.” (How do we specify the values of the variables?
 站点设计的修改往往比底层 Python 代码的修改要频繁得多，因此如果可以在不进行 Python 代码修改的情况下变更设计，那将会方便得多

Any text that’s surrounded by curly braces and percent signs (e.g., {% if ordered_warranty %}) is a template tag.
Python 代码编写和 HTML 设计是两项不同的工作，大多数专业的网站开发环境都将他们分配给不同的人员（甚至不同部门）来完成

The definition of a tag is quite broad: a tag just tells the template system to “do something.”
 设计者和HTML/CSS的编码人员不应该被要求去编辑Python的代码来完成他们的工作

This example template contains a for tag ({% for item in item_list %}) and an if tag ({% if ordered_warranty %}).
基于这些原因，将页面的设计和Python的代码分离开会更干净简洁更容易维护

Finally, the second paragraph of this template contains an example of a filter, which is the most convenient way to alter the formatting of a variable.
让我们从一个简单的例子模板开始

In this example, {{ ship_date|date:"F j, Y" }}, we’re passing the ship_date variable to the date filter, giving the date filter the argument "F j, Y".
 该模板描述了一个向某个与公司签单人员致谢 HTML 页面

The date filter formats dates in a given format, as specified by that argument.
 可将其视为一个格式信函：

Let’s dive into Django’s template system so you can see how it works – but we’re not yet going to integrate it with the views that we created in the previous chapter.
Your warranty information will be included in the packaging.

Here is the most basic way you can use Django’s template system in Python code:
You didn't order a warranty, so you're on your own when the products inevitably stop working.

In code, here’s what that looks like:
Sincerely, {{ company }}

The following sections describe each step in much more detail.
该模板是一段添加了些许变量和模板标签的基础 HTML 

The easiest way to create a Template object is to instantiate it directly.
这个例子中的模板包含一个for标签（ {% for item in item_list %} ）和一个if 标签（{% if ordered_warranty %} ）

From the mysite project directory created by django-admin.py startproject (as covered in Chapter 2), type python manage.py shell to start the interactive interpreter.
for标签类似Python的for语句，可让你循环访问序列里的每一个项目

A special Python prompt
最后，这个模板的第二段中有一个关于_filter_过滤器的例子，它是一种最便捷的转换变量输出格式的方式

If you’ve used Python before, you may be wondering why we’re running python manage.py shell instead of just python.
Django 模板含有很多内置的tags和filters,我们将陆续进行学习. 附录F列出了很多的tags和filters的列表,熟悉这些列表对你来说是个好建议. 你依然可以利用它创建自己的tag和filters

Both commands will start the interactive interpreter, but the manage.py shell command has one key difference: before starting the interpreter, it tells Django which settings file to use.
这些我们在第9章会讲到

When you run python manage.py shell, the command takes care of setting DJANGO_SETTINGS_MODULE for you.
在Python代码中使用Django模板的最基本方式如下：

As you become more familiar with Django, you’ll likely stop using manage.py shell and will set DJANGO_SETTINGS_MODULE manually in your .bash_profile or other shell environment configuration file.
可以用原始的模板代码字符串创建一个 Template 对象， Django同样支持用指定模板文件路径的方式来创建 Template 对象;

Let’s go through some template system basics:
代码如下：

If you’re following along interactively, you’ll see something like this:
以下部分逐步的详细介绍

That 0xb7d5f24c will be different every time, and it isn’t relevant;
创建一个 Template 对象最简单的方法就是直接实例化它

it’s a Python thing (the Python “identity” of the Template object, if you must know).
 Template 类就在 django.template 模块中，构造函数接受一个参数，原始模板代码

When you create a Template object, the template system compiles the raw template code into an internal, optimized form, ready for rendering.
转到project目录（在第二章由 django-admin.py startproject 命令创建）， 输入命令python manage.py shell 启动交互界面

The term “block tag” here refers to {% notatag %}.
一个特殊的Python提示符

The system raises a TemplateSyntaxError exception for any of the following cases:
如果你曾经使用过Python，你一定好奇，为什么我们运行python manage.py shell而不是python

Once you have a Template object, you can pass it data by giving it a context.
随着你越来越熟悉Django，你可能会偏向于废弃使用manage.py shell ，而是在你的配置文件.bash_profile中手动添加 DJANGO_SETTINGS_MODULE这个环境变量

A context is represented in Django by the Context class, which lives in the django.template module.
让我们来了解一些模板系统的基本知识：

One thing we should point out here is that the return value of t.render(c) is a Unicode object – not a normal Python string.
如果你跟我们一起做，你将会看到下面的内容：

Dictionaries and Contexts
0xb7d5f24c 每次都会不一样，这没什么关系

A Python dictionary is a mapping between known keys and variable values.
当你创建一个 Template 对象，模板系统在内部编译这个模板到内部格式，并做优化，做好 渲染的准备

A Context is similar to a dictionary, but a Context provides additional functionality, as covered in Chapter 9.
 如果你的模板语法有错误，那么在调用 Template() 时就会抛出 TemplateSyntaxError 异常：

Variable names must begin with a letter (A-Z or a-z) and may contain more letters, digits, underscores, and dots.
这里，块标签(block tag)指向的是{% notatag %}，块标签与模板标签是同义的

Here’s an example of template compilation and rendering, using a template similar to the example in the beginning of this chapter:
系统会在下面的情形抛出 TemplateSyntaxError 异常：

Let’s step through this code one statement at a time:
无效的tags

First, we import the classes Template and Context, which both live in the module django.template.
标签的参数无效

We save the raw text of our template into the variable raw_template.
无效的过滤器

Next, we create a template object, t, by passing raw_template to the Template class constructor.
过滤器的参数无效

We import the datetime module from Python’s standard library, because we’ll need it in the following statement.
无效的模板语法

Then, we create a Context object, c.
一旦你创建一个 Template 对象，你可以用 context 来传递数据给它

The Context constructor takes a Python dictionary, which maps variable names to values.
 一个context是一系列变量和它们值的集合

Finally, we call the render() method on our template object, passing it the context.
context在Django里表现为 Context 类，在 django.template 模块里

This returns the rendered template – i.e., it replaces template variables with the actual values of the variables, and it executes any template tags.
 她的构造函数带有一个可选的参数： 一个字典映射变量和它们的值

Note that the “You didn’t order a warranty” paragraph was displayed because the ordered_warranty variable evaluated to False.
我们必须指出的一点是，t.render(c)返回的值是一个Unicode对象，不是普通的Python字符串

Also note the date, April 2, 2009, which is displayed according to the format string 'F j, Y'.
 你可以通过字符串前的u来区分

(We’ll explain format strings for the date filter in a little while.)
 在框架中，Django会一直使用Unicode对象而不是普通的字符串

If you’re new to Python, you may wonder why this output includes newline characters ('\n') rather than displaying the line breaks.
字典和Contexts

Those are the fundamentals of using the Django template system: just write a template string, create a Template object, create a Context, and call the render() method.
Python的字典数据类型就是关键字和它们值的一个映射

Once you have a Template object, you can render multiple contexts through it.
Dear {{ person_name }},

Whenever you’re using the same template source to render multiple contexts like this, it’s more efficient to create the Template object once, and then call render() on it multiple times:
Thanks for placing an order from {{ company }}. It's scheduled to ... ship on {{ ship_date|date:"F j, Y" }}.

Django’s template parsing is quite fast.
Your warranty information will be included in the packaging.

In the examples so far, we’ve passed simple values in the contexts – mostly strings, plus a datetime.date example.
Dear John Smith,

The key to traversing complex data structures in Django templates is the dot character (.).
Thanks for placing an order from Outdoor Equipment. It's scheduled to\nship on April 2, 2009.

This is best illustrated with a few examples.
You didn't order a warranty, so you're on your own when\nthe products inevitably stop working.

Similarly, dots also allow access of object attributes.
Sincerely, Outdoor Equipment

This example uses a custom class, demonstrating that variable dots also allow attribute access on arbitrary objects:
让我们逐步来分析下这段代码：

Dots can also refer to methods on objects.
首先我们导入 （import）类 Template 和 Context ，它们都在模块 django.template 里

Note that you do not include parentheses in the method calls.
我们把模板原始文本保存到变量 raw_template 

Also, it’s not possible to pass arguments to the methods;
注意到我们使用了三个引号来 标识这些文本，因为这样可以包含多行

Finally, dots are also used to access list indices, for example:
接下来，我们创建了一个模板对象 t ，把 raw_template 作为 Template 类构造函数的参数

Negative list indices are not allowed.
我们从Python的标准库导入 datetime 模块，以后我们将会使用它

Python Lists
然后，我们创建一个 Context 对象， c 

A reminder: Python lists have 0-based indices.
最后，我们在模板对象上调用 render() 方法，传递 context参数给它

The first item is at index 0, the second is at index 1, and so on.
 这是返回渲染后的模板的方法，它会替换模板变量为真实的值和执行块标签

Dot lookups can be summarized like this: when the template system encounters a dot in a variable name, it tries the following lookups, in this order:
注意，warranty paragraph显示是因为 ordered_warranty 的值为 True . 注意时间的显示， April 2, 2009, 它是按 'F j, Y' 格式显示的

The system uses the first lookup type that works.
如果你是Python初学者，你可能在想为什么输出里有回车换行的字符('\n' )而不是 显示回车换行

It’s short-circuit logic.
 因为这是Python交互解释器的缘故： 调用 t.render(c) 返回字符串， 解释器缺省显示这些字符串的 真实内容呈现 ，而不是打印这个变量的值

Dot lookups can be nested multiple levels deep.
这就是使用Django模板系统的基本规则： 写模板，创建 Template 对象，创建 Context ， 调用 render() 方法

Method calls are slightly more complex than the other lookup types.
一旦有了 模板 对象，你就可以通过它渲染多个context， 例如：

If, during the method lookup, a method raises an exception, the exception will be propagated, unless the exception has an attribute silent_variable_failure whose value is True.
无论何时我们都可以像这样使用同一模板源渲染多个context，只进行 一次模板创建然后多次调用render()方法渲染会更为高效：

A method call will only work if the method has no required arguments.
Django 模板解析非常快捷

Otherwise, the system will move to the next lookup type (list-index lookup).
 大部分的解析工作都是在后台通过对简短正则表达式一次性调用来完成

Obviously, some methods have side effects, and it would be foolish at best, and possibly even a security hole, to allow the template system to access them.
在到目前为止的例子中，我们通过 context 传递的简单参数值主要是字符串，还有一个 datetime.date 范例

Say, for instance, you have a BankAccount object that has a delete() method.
在 Django 模板中遍历复杂数据结构的关键是句点字符 (.)

To prevent this, set the function attribute alters_data on the method:
最好是用几个例子来说明一下

The template system won’t execute any method marked in this way.
同样，也可以通过句点来访问对象的属性

Continuing the above example, if a template includes {{ account.delete }} and the delete() method has the alters_data=True, then the delete() method will not be executed when the template is rendered.
 比方说， Python 的 datetime.date 对象有 year 、 month 和 day几个属性，你同样可以在模板中使用句点来访问这些属性：

By default, if a variable doesn’t exist, the template system renders it as an empty string, failing silently.
这个例子使用了一个自定义的类，演示了通过实例变量加一点(dots)来访问它的属性，这个方法适用于任意的对象

The system fails silently rather than raising an exception because it’s intended to be resilient to human error.
点语法也可以用来引用对象的 方法

In this case, all of the lookups failed because variable names have the wrong case or name.
 例如，每个 Python 字符串都有 upper() 和 isdigit() 方法，你在模板中可以使用同样的句点语法来调用它们：

Most of the time, you’ll instantiate Context objects by passing in a fully populated dictionary to Context().
不允许使用负数列表索引

But you can add and delete items from a Context object once it’s been instantiated, too, using standard Python dictionary syntax:
 像 {{ items.-1 }} 这样的模板变量将会引发TemplateSyntaxError

As we’ve mentioned already, the template system ships with built-in tags and filters.
句点查找规则可概括为： 当模板系统在变量名中遇到点时，按照以下顺序尝试进行查找：

The {% if %} tag evaluates a variable, and if that variable is “True” (i.e., it exists, is not empty, and is not a false Boolean value), the system will display everything between {% if %} and {% endif %}, for example:
方法调用 （比如 foo.bar() )

An {% else %} tag is optional:
系统使用找到的第一个有效类型

Python “Truthiness”
句点查找可以多级深度嵌套

In Python and in the Django template system, these objects evaluate to False in a Boolean context:
方法调用比其他类型的查找略为复杂一点

Everything else evaluates to True.
在方法查找过程中，如果某方法抛出一个异常，除非该异常有一个 silent_variable_failure 属性并且值为 True ，否则的话它将被传播

The {% if %} tag accepts and, or, or not for testing multiple variables, or to negate a given variable.
仅在方法无需传入参数时，其调用才有效

For example:
 否则，系统将会转移到下一个查找类型（列表索引查找）

{% if %} tags don’t allow and and or clauses within the same tag, because the order of logic would be ambiguous.
显然，有些方法是有副作用的，好的情况下允许模板系统访问它们可能只是干件蠢事，坏的情况下甚至会引发安全漏洞

The use of parentheses for controlling order of operations is not supported.
例如，你的一个 BankAccount 对象有一个 delete() 方法

If you find yourself needing parentheses, consider performing logic outside the template and passing the result of that as a dedicated template variable.
 如果某个模板中包含了像{{ account.delete }}这样的标签，其中account 又是BankAccount 的一个实例，请注意在这个模板载入时，account对象将被删除

Multiple uses of the same logical operator are fine, but you can’t combine different operators.
要防止这样的事情发生，必须设置该方法的 alters_data 函数属性：

There is no {% elif %} tag.
模板系统不会执行任何以该方式进行标记的方法

Use nested {% if %} tags to accomplish the same thing:
 接上面的例子，如果模板文件里包含了{{ account.delete }} ，对象又具有 delete()方法，而且delete() 有alters_data=True这个属性，那么在模板载入时， delete()方法将不会被执行

Make sure to close each {% if %} with an {% endif %}.
默认情况下，如果一个变量不存在，模板系统会把它展示为空字符串，不做任何事情来表示失败

Otherwise, Django will throw a TemplateSyntaxError.
 例如：

The {% for %} tag allows you to loop over each item in a sequence.
系统静悄悄地表示失败，而不是引发一个异常，因为这通常是人为错误造成的

As in Python’s for statement, the syntax is for X in Y, where Y is the sequence to loop over and X is the name of the variable to use for a particular cycle of the loop.
 这种情况下，因为变量名有错误的状况或名称， 所有的查询都会失败

Each time through the loop, the template system will render everything between {% for %} and {% endfor %}.
 现实世界中，对于一个web站点来说，如果仅仅因为一个小的模板语法错误而造成无法访问，这是不可接受的

For example, you could use the following to display a list of athletes given a variable athlete_list:
多数时间，你可以通过传递一个完全填充(full populated)的字典给 Context() 来初始化 上下文(Context) 

It’s possible to nest {% for %} tags:
{% if %} 标签检查(evaluate)一个变量，如果这个变量为真（即，变量存在，非空，不是布尔值假），系统会显示在 {% if %} 和 {% endif %} 之间的任何内容，例如：

A common pattern is to check the size of the list before looping over it, and outputting some special text if the list is empty:
Welcome to the weekend!

Because this pattern is so common, the for tag supports an optional {% empty %} clause that lets you define what to output if the list is empty.
{% else %} 标签是可选的：

There is no support for “breaking out” of a loop before the loop is finished.
Welcome to the weekend!

Within each {% for %} loop, you get access to a template variable called forloop.
Get back to work.

forloop.counter is always set to an integer representing the number of times the loop has been entered.
Python 的“真值”

forloop.counter0 is like forloop.counter, except it’s zero-indexed.
在Python和Django模板系统中，以下这些对象相当于布尔值的False

forloop.revcounter is always set to an integer representing the number of remaining items in the loop.
空列表([] )

forloop.revcounter0 is like forloop.revcounter, except it’s zero-indexed.
空元组(() )

forloop.first is a Boolean value set to True if this is the first time through the loop.
空字典({} )

forloop.last is a Boolean value set to True if this is the last time through the loop.
空字符串('' )

The above template code might output something like this:
零值(0 )

Another common use for this is to put a comma between words in a list:
特殊对象None

forloop.parentloop is a reference to the forloop object for the parent loop, in case of nested loops.
对象False（很明显）

The magic forloop variable is only available within loops.
除以上几点以外的所有东西都视为True

Context and the forloop Variable
{% if %} 标签接受 and ， or 或者 not 关键字来对多个变量做判断 ，或者对变量取反（ not )，例如： 例如：

Inside the {% for %} block, the existing variables are moved out of the way to avoid overwriting the magic forloop variable.
{% if %} 标签不允许在同一个标签中同时使用 and 和 or ，因为逻辑上可能模糊的，例如，如下示例是错误的： 比如这样的代码是不合法的：

The Django template system deliberately is not a full-fledged programming language and thus does not allow you to execute arbitrary Python statements.
系统不支持用圆括号来组合比较操作

(More on this idea in the section “Philosophies and Limitations.”) However, it’s quite a common template requirement to compare two values and display something if they’re equal – and Django provides an {% ifequal %} tag for that purpose.
 如果你确实需要用到圆括号来组合表达你的逻辑式，考虑将它移到模板之外处理，然后以模板变量的形式传入结果吧

The {% ifequal %} tag compares two values and displays everything between {% ifequal %} and {% endifequal %} if the values are equal.
多次使用同一个逻辑操作符是没有问题的，但是我们不能把不同的操作符组合起来

This example compares the template variables user and currentuser:
并没有 {% elif %} 标签， 请使用嵌套的{% if %} 标签来达成同样的效果：

The arguments can be hard-coded strings, with either single or double quotes, so the following is valid:
一定要用 {% endif %} 关闭每一个 {% if %} 标签

Just like {% if %}, the {% ifequal %} tag supports an optional {% else %}:
{% for %} 允许我们在一个序列上迭代

Only template variables, strings, integers, and decimal numbers are allowed as arguments to {% ifequal %}.
例如，给定一个运动员列表 athlete_list 变量，我们可以使用下面的代码来显示这个列表：

Any other types of variables, such as Python dictionaries, lists, or Booleans, can’t be hard-coded in {% ifequal %}.
给标签增加一个 reversed 使得该列表被反向迭代：

If you need to test whether something is true or false, use the {% if %} tags instead of {% ifequal %}.
可以嵌套使用 {% for %} 标签：

The comment will not be output when the template is rendered.
{{ athlete.name }}

Comments using this syntax cannot span multiple lines.
There are no athletes. Only computer programmers.

If you want to use multi-line comments, use the {% comment %} template tag, like this:
因为这种做法十分常见，所以for 标签支持一个可选的{% empty %} 分句，通过它我们可以定义当列表为空时的输出内容 下面的例子与之前那个等价：

As explained earlier in this chapter, template filters are simple ways of altering the value of variables before they’re displayed.
Django不支持退出循环操作

Filters use a pipe character, like this:
 如果我们想退出循环，可以改变正在迭代的变量，让其仅仅包含需要迭代的项目

This displays the value of the {{ name }} variable after being filtered through the lower filter, which converts text to lowercase.
在每个{% for %}循环里有一个称为forloop 的模板变量

Filters can be chained – that is, they can be used in tandem such that the output of one filter is applied to the next.
forloop.counter 总是一个表示当前循环的执行次数的整数计数器

Here’s an example that takes the first element in a list and converts it to uppercase:
 这个计数器是从1开始的，所以在第一次循环时 forloop.counter 将会被设置为1

Some filters take arguments.
{{ forloop.counter }}: {{ item }}

This displays the first 30 words of the bio variable.
forloop.counter0 类似于 forloop.counter ，但是它是从0计数的

The following are a few of the most important filters.
forloop.revcounter 是表示循环中剩余项的整型变量

Appendix F covers the rest.
 在循环初次执行时 forloop.revcounter 将被设置为序列中项的总数

addslashes: Adds a backslash before any backslash, single quote, or double quote.
forloop.revcounter0 类似于 forloop.revcounter ，但它以0做为结束索引

This is useful if the produced text is included in a JavaScript string.
 在第一次执行循环时，该变量会被置为序列的项的个数减1

date: Formats a date or datetime object according to a format string given in the parameter, for example:
forloop.first 是一个布尔值，如果该迭代是第一次执行，那么它被置为```` 在下面的情形中这个变量是很有用的：

Format strings are defined in Appendix F.
System Message: WARNING/2 (, line 1071); backlink

length: Returns the length of the value.
Inline literal start-string without end-string.

Now that you’ve gotten a feel for the Django template language, we should point out some of its intentional limitations, along with some philosophies behind why it works the way it works.
另一个常见的用途是为列表的每个单词的加上逗号

More than any other component of Web applications, template syntax is highly subjective, and programmers’ opinions vary wildly.
forloop.parentloop 是一个指向当前循环的上一级循环的 forloop 对象的引用（在嵌套循环的情况下）

The fact that Python alone has dozens, if not hundreds, of open source template-language implementations supports this point.
 例子在此：

With that in mind, you might be interested to know that Django doesn’t require that you use its template language.
forloop 变量仅仅能够在循环中使用

Because Django is intended to be a full-stack Web framework that provides all the pieces necessary for Web developers to be productive, many times it’s more convenient to use Django’s template system than other Python template libraries, but it’s not a strict requirement in any sense.
 在模板解析器碰到{% endfor %}标签后，forloop就不可访问了

Still, it’s clear we have a strong preference for the way Django’s template language works.
Context和forloop变量

Business logic should be separated from presentation logic.
在一个 {% for %} 块中，已存在的变量会被移除，以避免 forloop 变量被覆盖

Django’s developers see a template system as a tool that controls presentation and presentation-related logic – and that’s it.
 Django会把这个变量移动到forloop.parentloop 中

The template system shouldn’t support functionality that goes beyond this basic goal.
通常我们不用担心这个问题，但是一旦我们在模板中定义了 forloop 这个变量（当然我们反对这样做），在 {% for %} 块中它会在 forloop.parentloop 被重新命名

For that reason, it’s impossible to call Python code directly within Django templates.
Django模板系统压根儿就没想过实现一个全功能的编程语言，所以它不允许我们在模板中执行Python的语句（还是那句话，要了解更多请参看理念和限制小节）

All “programming” is fundamentally limited to the scope of what template tags can do.
 但是比较两个变量的值并且显示一些结果实在是个太常见的需求了，所以Django提供了 {% ifequal %} 标签供我们使用

Syntax should be decoupled from HTML/XML.
{% ifequal %} 标签比较两个值，当他们相等时，显示在 {% ifequal %} 和 {% endifequal %} 之中所有的值

Designers are assumed to be comfortable with HTML code.
下面的例子比较两个模板变量 user 和 currentuser :

The goal is not to invent a programming language.
和 {% if %} 类似， {% ifequal %} 支持可选的 {% else%} 标签：

You’ve learned the basics of using the template system;
只有模板变量，字符串，整数和小数可以作为 {% ifequal %} 标签的参数

now let’s use this knowledge to create a view.
下面是合法参数的例子：

Let’s change this view to use Django’s template system.
其他任何类型，例如Python的字典类型、列表类型、布尔类型，不能用在 {% ifequal %} 中

At first, you might think to do something like this:
 下面是些错误的例子：

Sure, that uses the template system, but it doesn’t solve the problems we pointed out in the introduction of this chapter.
如果你需要判断变量是真还是假，请使用 {% if %} 来替代 {% ifequal %} 

You might first consider saving your template somewhere on your filesystem and using Python’s built-in file-opening functionality to read the contents of the template.
就像HTML或者Python，Django模板语言同样提供代码注释

Here’s what that might look like, assuming the template was saved as the file /home/djangouser/templates/mytemplate.html:
 注释使用 {# #} ：

This approach, however, is inelegant for these reasons:
注释的内容不会在模板渲染时输出

To solve these issues, we’ll use template loading and template directories.
用这种语法的注释不能跨越多行

Django provides a convenient and powerful API for loading templates from the filesystem, with the goal of removing redundancy both in your template-loading calls and in your templates themselves.
显示的内容是变量 {{ name }} 被过滤器 lower 处理后的结果，它功能是转换文本为小写

In order to use this template-loading API, first you’ll need to tell the framework where you store your templates.
过滤管道可以被 套接 ，既是说，一个过滤器管道的输出又可以作为下一个管道的输入，如此下去

The place to do this is in your settings file – the settings.py file that we mentioned last chapter, when we introduced the ROOT_URLCONF setting.
 下面的例子实现查找列表的第一个元素并将其转化为大写

If you’re following along, open your settings.py and find the TEMPLATE_DIRS setting.
有些过滤器有参数

By default, it’s an empty tuple, likely containing some auto-generated comments:
 过滤器的参数跟随冒号之后并且总是以双引号包含

This setting tells Django’s template-loading mechanism where to look for templates.
这个将显示变量 bio 的前30个词

There are a few things to note:
以下几个是最为重要的过滤器的一部分

You can specify any directory you want, as long as the directory and templates within that directory are readable by the user account under which your Web server runs.
addslashes : 添加反斜杠到任何反斜杠、单引号或者双引号前面

If you can’t think of an appropriate place to put your templates, we recommend creating a templates directory within your project (i.e., within the mysite directory you created in Chapter 2).
 这在处理包含JavaScript的文本时是非常有用的

If your TEMPLATE_DIRS contains only one directory, don’t forget the comma at the end of the directory string!
date : 按指定的格式字符串参数格式化 date 或者 datetime 对象， 范例：

Bad:
格式参数的定义在附录F中

Good:
length : 返回变量的长度

If you’re on Windows, include your drive letter and use Unix-style forward slashes rather than backslashes, as follows:
相对与其他的网络应用的组件，模板的语法很具主观性，因此可供程序员的选择方案也很广泛

It’s simplest to use absolute paths (i.e., directory paths that start at the root of the filesystem).
明白了这个，你也许有兴趣知道事实上Django并不强制要求你必须使用它的模板语言

If you want to be a bit more flexible and decoupled, though, you can take advantage of the fact that Django settings files are just Python code by constructing the contents of TEMPLATE_DIRS dynamically.
 因为Django 虽然被设计成一个FULL-Stack的Web框架，它提供了开发者所必需的所有组件，而且在大多数情况 使用Django模板系统会比其他的Python模板库要 更方便 一点，但是并不是严格要求你必须使用 它

For example:
 你将在后续的“视图中应用模板”这一章节中看到，你还可以非常容易地在Django中使用其他的模板语言

This example uses the “magic” Python variable __file__, which is automatically set to the file name of the Python module in which the code lives.
虽然如此，很明显，我们对Django模板语言的工作方式有着强烈的偏爱

It gets the name of the directory that contains settings.py (os.path.dirname), then joins that with templates in a cross-platform way (os.path.join), then ensures that everything uses forward slashes instead of backslashes (in case of Windows).
 这个模板语言来源于World Online的开发经验和Django创造者们集体智慧的结晶

While we’re on the topic of dynamic Python code in settings files, we should point out that it’s very important to avoid Python errors in your settings file.
业务逻辑应该和表现逻辑相对分开 

If you introduce a syntax error, or a runtime error, your Django-powered site will likely crash.
我们将模板系统视为控制表现及表现相关逻辑的工具，仅此而已

With TEMPLATE_DIRS set, the next step is to change the view code to use Django’s template-loading functionality rather than hard-coding the template paths.
出于这个原因，在 Django 模板中是不可能直接调用 Python 代码的

Returning to our current_datetime view, let’s change it like so:
 所有的编程工作基本上都被局限于模板标签的能力范围

In this example, we’re using the function django.template.loader.get_template() rather than loading the template from the filesystem manually.
语法不应受到 HTML/XML 的束缚 

The get_template() function takes a template name as its argument, figures out where the template lives on the filesystem, opens that file, and returns a compiled Template object.
尽管 Django 模板系统主要用于生成 HTML，它还是被有意地设计为可生成非 HTML 格式，如纯文本

Our template in this example is current_datetime.html, but there’s nothing special about that .html extension.
假定设计师精通 HTML 编码 

You can give your templates whatever extension makes sense for your application, or you can leave off extensions entirely.
模板系统的设计意图并不是为了让模板一定能够很好地显示在 Dreamweaver 这样的所见即所得编辑器中

To determine the location of the template on your filesystem, get_template() combines your template directories from TEMPLATE_DIRS with the template name that you pass to get_template().
假定设计师不是 Python 程序员 

For example, if your TEMPLATE_DIRS is set to '/home/django/mysite/templates', the above get_template() call would look for the template /home/django/mysite/templates/current_datetime.html.
模板系统开发人员认为：模板通常由设计师而非程序员来编写，因此不应被假定拥有Python开发知识

If get_template() cannot find the template with the given name, it raises a TemplateDoesNotExist exception.
当然，系统同样也特意地提供了对那些 由 Python 程序员进行模板制作的小型团队的支持

To see what that looks like, fire up the Django development server again by running python manage.py runserver within your Django project’s directory.
 它提供了一种工作模式，允许通过编写原生 Python 代码进行系统语法拓展

Then, point your browser at the page that activates the current_datetime view (e.g., http://127.0.0.1:8000/time/).
 （详见第十章）

Figure 4-1: The error page shown when a template cannot be found.
目标并不是要发明一种编程语言 

Moving along, create the current_datetime.html file within your template directory using the following template code:
让我们用 Django 模板系统来修改该视图

Refresh the page in your Web browser, and you should see the fully rendered page.
没错，它确实使用了模板系统，但是并没有解决我们在本章开头所指出的问题

We’ve shown you how to load a template, fill a Context and return an HttpResponse object with the result of the rendered template.
它没有对文件丢失的情况做出处理

We’ve optimized it to use get_template() instead of hard-coding templates and template paths.
 如果文件 mytemplate.html 不存在或者不可读， open() 函数调用将会引发 IOError 异常

This shortcut is a function called render_to_response(), which lives in the module django.shortcuts.
这里对模板文件的位置进行了硬编码

Most of the time, you’ll be using render_to_response() rather than loading templates and creating Context and HttpResponse objects manually – unless your employer judges your work by total lines of code written, that is.
 如果你在每个视图函数都用该技术，就要不断复制这些模板的位置

Here’s the ongoing current_datetime example rewritten to use render_to_response():
为了解决这些问题，我们采用了 模板自加载 跟 模板目录 的技巧.

The first argument to render_to_response() is the name of the template to use.
要使用此模板加载API，首先你必须将模板的保存位置告诉框架

The second argument, if given, should be a dictionary to use in creating a Context for that template.
 设置的保存文件就是我们前一章节讲述ROOT_URLCONF配置的时候提到的 settings.py

Consider our latest incarnation of current_datetime:
下面是一些注意事项：

Many times, as in this example, you’ll find yourself calculating some values, storing them in variables (e.g., now in the preceding code), and sending those variables to the template.
你可以任意指定想要的目录，只要运行 Web 服务器的用户可以读取该目录的子目录和模板文件

Particularly lazy programmers should note that it’s slightly redundant to have to give names for temporary variables and give names for the template variables.
 如果实在想不出合适的位置来放置模板，我们建议在 Django 项目中创建一个 templates 目录（也就是说，如果你一直都按本书的范例操作的话，在第二章创建的 mysite 目录中）

So if you’re one of those lazy programmers and you like keeping code particularly concise, you can take advantage of a built-in Python function called locals().
如果你的 TEMPLATE_DIRS只包含一个目录，别忘了在该目录后加上个逗号

Here, instead of manually specifying the context dictionary as before, we pass the value of locals(), which will include all variables defined at that point in the function’s execution.
Bad:

One thing to watch out for when using locals() is that it includes every local variable, which may comprise more variables than you actually want your template to have access to.
Python 要求单元素元组中必须使用逗号，以此消除与圆括号表达式之间的歧义

In the previous example, locals() will also include request.
 这是新手常犯的错误

It can get unwieldy to store all of your templates in a single directory.
这个例子使用了神奇的 Python 内部变量 file ，该变量被自动设置为代码所在的 Python 模块文件名

You might like to store templates in subdirectories of your template directory, and that’s fine.
 os.path.dirname(__file__) 将会获取自身所在的文件，即settings.py 所在的目录，然后由os.path.join 这个方法将这目录与 templates 进行连接

In fact, we recommend doing so;
如果在windows下，它会智能地选择正确的后向斜杠”“进行连接，而不是前向斜杠”/”

Storing templates in subdirectories of your template directory is easy.
在这里我们面对的是动态语言python代码，我需要提醒你的是，不要在你的设置文件里写入错误的代码，这很重要

In your calls to get_template(), just include the subdirectory name and a slash before the template name, like so:
 如果你在这里引入了语法错误，或运行错误，你的Django-powered站点将很可能就要被崩溃掉

Because render_to_response() is a small wrapper around get_template(), you can do the same thing with the first argument to render_to_response(), like this:
完成 TEMPLATE_DIRS 设置后，下一步就是修改视图代码，让它使用 Django 模板加载功能而不是对模板路径硬编码

There’s no limit to the depth of your subdirectory tree.
此范例中，我们使用了函数 django.template.loader.get_template() ，而不是手动从文件系统加载模板

Feel free to use as many subdirectories as you like.
 该get_template() 函数以模板名称为参数，在文件系统中找出模块的位置，打开文件并返回一个编译好的Template 对象

Note
在这个例子里，我们选择的模板文件是current_datetime.html，但这个与.html后缀没有直接的联系

Windows users, be sure to use forward slashes rather than backslashes.
要确定某个模板文件在你的系统里的位置， get_template()方法会自动为你连接已经设置的 TEMPLATE_DIRS目录和你传入该法的模板名称参数

get_template() assumes a Unix-style file name designation.
比如，你的 TEMPLATE_DIRS目录设置为 '/home/django/mysite/templates'，上面的 get_template()调用就会为你找到 /home/django/mysite/templates/current_datetime.html 这样一个位置

Now that we’ve covered the template-loading mechanism, we can introduce a built-in template tag that takes advantage of it: {% include %}.
该页面与我们在第三章解释过的错误页面相似，只不过多了一块调试信息区： 模板加载器事后检查区

This tag allows you to include the contents of another template.
 该区域显示 Django 要加载哪个模板、每次尝试出错的原因（如：文件不存在等）

The argument to the tag should be the name of the template to include, and the template name can be either a variable or a hard-coded (quoted) string, in either single or double quotes.
 当你尝试调试模板加载错误时，这些信息会非常有帮助

These two examples include the contents of the template nav.html.
接下来，在模板目录中创建包括以下模板代码 current_datetime.html 文件：

This example includes the contents of the template includes/nav.html:
在网页浏览器中刷新该页，你将会看到完整解析后的页面

This example includes the contents of the template whose name is contained in the variable template_name:
我们已经告诉你如何载入一个模板文件，然后用 Context渲染它，最后返回这个处理好的HttpResponse对象给用户

As in get_template(), the file name of the template is determined by adding the template directory from TEMPLATE_DIRS to the requested template name.
该捷径就是位于 django.shortcuts 模块中名为 render_to_response() 的函数

Included templates are evaluated with the context of the template that’s including them.
System Message: WARNING/2 (, line 1736); backlink

If you render mypage.html with a context containing current_section, then the variable will be available in the “included” template, as you would expect.
Inline literal start-string without end-string.

If, in an {% include %} tag, a template with the given name isn’t found, Django will do one of two things:
System Message: WARNING/2 (, line 1736); backlink

Our template examples so far have been tiny HTML snippets, but in the real world, you’ll be using Django’s template system to create entire HTML pages.
Inline literal start-string without end-string.

A classic way of solving this problem is to use server-side includes, directives you can embed within your HTML pages to “include” one Web page inside another.
下面就是使用 render_to_response() 重新编写过的 current_datetime 范例

In essence, template inheritance lets you build a base “skeleton” template that contains all the common parts of your site and defines “blocks” that child templates can override.
大变样了

Let’s see an example of this by creating a more complete template for our current_datetime view, by editing the current_datetime.html file:
我们不再需要导入 get_template 、 Template 、 Context 和 HttpResponse 

That looks just fine, but what happens when we want to create a template for another view – say, the hours_ahead view from Chapter 3?
render_to_response() 的第一个参数必须是要使用的模板名称

If we want again to make a nice, valid, full HTML template, we’d create something like:
 如果要给定第二个参数，那么该参数必须是为该模板创建 Context 时所使用的字典

Clearly, we’ve just duplicated a lot of HTML.
思考一下我们对 current_datetime 的最后一次赋值:

The server-side include solution to this problem is to factor out the common bits in both templates and save them in separate template snippets, which are then included in each template.
很多时候，就像在这个范例中那样，你发现自己一直在计算某个变量，保存结果到变量中（比如前面代码中的 now ），然后将这些变量发送给模板

Perhaps you’d store the top bit of the template in a file called header.html:
 尤其喜欢偷懒的程序员应该注意到了，不断地为临时变量_和_临时模板命名有那么一点点多余

And perhaps you’d store the bottom bit in a file called footer.html:
如果你是个喜欢偷懒的程序员并想让代码看起来更加简明，可以利用 Python 的内建函数 locals() 

With an include-based strategy, headers and footers are easy.
在此，我们没有像之前那样手工指定 context 字典，而是传入了 locals() 的值，它囊括了函数执行到该时间点时所定义的一切变量

It’s the middle ground that’s messy.
 因此，我们将 now 变量重命名为 current_date ，因为那才是模板所预期的变量名称

In this example, both pages feature a title – My helpful timestamp site</h1> – but that title can’t fit into header.html because the  on both pages is different.
 在本例中， locals() 并没有带来多 大 的改进，但是如果有多个模板变量要界定而你又想偷懒，这种技术可以减少一些键盘输入

Django’s template inheritance system solves these problems.
使用 locals() 时要注意是它将包括 所有 的局部变量，它们可能比你想让模板访问的要多

You can think of it as an “inside-out” version of server-side includes.
 在前例中，locals() 还包含了 request 

Instead of defining the snippets that are common, you define the snippets that are different.
对此如何取舍取决你的应用程序

The first step is to define a base template – a skeleton of your page that child templates will later fill in.
把所有的模板都存放在一个目录下可能会让事情变得难以掌控

Here’s a base template for our ongoing example:
 你可能会考虑把模板存放在你模板目录的子目录中，这非常好

This template, which we’ll call base.html, defines a simple HTML skeleton document that we’ll use for all the pages on the site.
把模板存放于模板目录的子目录中是件很轻松的事情

It’s the job of child templates to override, or add to, or leave alone the contents of the blocks.
 只需在调用 get_template() 时，把子目录名和一条斜杠添加到模板名称之前，如：

We’re using a template tag here that you haven’t seen before: the {% block %} tag.
由于 render_to_response() 只是对 get_template() 的简单封装， 你可以对 render_to_response() 的第一个参数做相同处理

Now that we have this base template, we can modify our existing current_datetime.html template to use it:
对子目录树的深度没有限制，你想要多少层都可以

While we’re at it, let’s create a template for the hours_ahead view from Chapter 3.
注意

Isn’t this beautiful?
Windows用户必须使用斜杠而不是反斜杠

Each template contains only the code that’s unique to that template.
 get_template() 假定的是 Unix 风格的文件名符号约定

Here’s how it works.
在讲解了模板加载机制之后，我们再介绍一个利用该机制的内建模板标签： {% include %} 

When you load the template current_datetime.html, the template engine sees the {% extends %} tag, noting that this template is a child template.
该标签允许在（模板中）包含其它的模板的内容

The engine immediately loads the parent template – in this case, base.html.
 标签的参数是所要包含的模板名称，可以是一个变量，也可以是用单/双引号硬编码的字符串

At that point, the template engine notices the three {% block %} tags in base.html and replaces those blocks with the contents of the child template.
下面这两个例子都包含了 nav.html 模板

So, the title we’ve defined in {% block title %} will be used, as will the {% block content %}.
这两个例子是等价的，它们证明单/双引号都是允许的

Note that since the child template doesn’t define the footer block, the template system uses the value from the parent template instead.
下面的例子包含了 includes/nav.html 模板的内容:

Inheritance doesn’t affect the template context.
下面的例子包含了以变量 template_name 的值为名称的模板内容：

You can use as many levels of inheritance as needed.
和在 get_template() 中一样， 对模板的文件名进行判断时会在所调取的模板名称之前加上来自 TEMPLATE_DIRS的模板目录

This approach maximizes code reuse and makes it easy to add items to shared areas, such as section-wide navigation.
所包含的模板执行时的 context 和包含它们的模板是一样的

Many modern Web sites are database-driven: the content of the Web site is stored in a relational database.
解决该问题的传统做法是使用 服务器端的 includes ，你可以在 HTML 页面中使用该指令将一个网页嵌入到另一个中

This allows a clean separation of data and logic (in the same way views and templates allow the separation of logic and display.)
 事实上， Django 通过刚才讲述的 {% include %} 支持了这种方法

The next chapter covers the tools Django gives you to interact with a database.
本质上来说，模板继承就是先构造一个基础框架模板，而后在其子模板中对它所包含站点公用部分和定义块进行重载

© Copyright 2012, Matt Behrens.
让我们通过修改 current_datetime.html 文件，为 current_datetime 创建一个更加完整的模板来体会一下这种做法：

