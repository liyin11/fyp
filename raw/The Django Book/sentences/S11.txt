Chapter 12: Deploying Django¶
第十二章：部署Django

In either case, the the directory /home/user/public_html/ should exist, though the file /home/user/public_html/mysite.fcgi doesn’t actually have to exist.
在这两个例子中， /home/user/public_html/ 目录必须存在，而 /home/user/public_html/mysite.fcgi 文件不一定存在

It’s just a URL used by the Web server internally – a hook for signifying which requests at a URL should be handled by FastCGI.
 它仅仅是一个Web服务器内部使用的接口，这个URL决定了对于哪些URL的请求会被FastCGI处理（下一部分详细讨论）

(More on this in the next section.)
 （下一章将会有更多有关于此的介绍）

The second step is telling Apache to use FastCGI for URLs that match a certain pattern.
第二步是告诉Apache为符合一定模式的URL使用FastCGI

To do this, use the mod_rewrite module and rewrite URLs to mysite.fcgi (or whatever you specified in the FastCGIExternalServer directive, as explained in the previous section).
 为了实现这一点，请使用mod_rewrite 模块，并将这些URL重定向到 mysite.fcgi （或者正如在前文中描述的那样，使用任何在 FastCGIExternalServer 指定的内容）

In this example, we tell Apache to use FastCGI to handle any request that doesn’t represent a file on the filesystem and doesn’t start with /media/.
在这个例子里面，我们告诉Apache使用FastCGI来处理那些在文件系统上不提供文件(译者注：

lighttpd (http://www.djangoproject.com/r/lighttpd/) is a lightweight Web server commonly used for serving static files.
lighttpd (http://www.djangoproject.com/r/lighttpd/) 是一个轻量级的Web服务器，通常被用来提供静态页面的访问

It supports FastCGI natively and thus is also an ideal choice for serving both static and dynamic pages, if your site doesn’t have any Apache-specific needs.
 它天生支持FastCGI，因此除非你的站点需要一些Apache特有的特性，否则，lighttpd对于静态和动态页面来说都是理想的选择

Make sure mod_fastcgi is in your modules list, somewhere after mod_rewrite and mod_access, but not after mod_accesslog.
确保 mod_fastcgi 在模块列表中，它需要出现在 mod_rewrite 和 mod_access ，但是要在 mod_accesslog 之前

Add the following to your lighttpd config file:
将下面的内容添加到你的lighttpd的配置文件中：

lighttpd lets you use “conditional configuration” to allow configuration to be customized per host.
lighttpd允许你使用条件配置来为每个站点分别提供设置

To specify multiple FastCGI sites, just add a conditional block around your FastCGI config for each site:
 为了支持FastCGI的多站点，只需要在FastCGI的配置文件中，为每个站点分别建立条件配置项：

You can also run multiple Django installations on the same site simply by specifying multiple entries in the fastcgi.server directive.
你也可以通过 fastcgi.server 中指定多个入口，在同一个站点上实现多个Django安装

Add one FastCGI host for each.
 请为每一个安装指定一个FastCGI主机

Many shared-hosting providers don’t allow you to run your own server daemons or edit the httpd.conf file.
许多共享主机的服务提供商不允许运行你自己的服务进程，也不允许修改 httpd.conf 文件

In these cases, it’s still possible to run Django using Web server-spawned processes.
 尽管如此，仍然有可能通过Web服务器产生的子进程来运行Django

Note
记录

If you’re using Web server-spawned processes, as explained in this section, there’s no need for you to start the FastCGI server on your own.
如果你要使用服务器的子进程，你没有必要自己去启动FastCGI服务器

Apache will spawn a number of processes, scaling as it needs to.
 Apache会自动产生一些子进程，产生的数量按照需求和配置会有所不同

In your Web root directory, add this to a file named .htaccess
在你的Web根目录下，将下面的内容增加到 .htaccess 文件中：

Then, create a small script that tells Apache how to spawn your FastCGI program.
接着，创建一个脚本，告知Apache如何运行你的FastCGI程序

Create a file, mysite.fcgi, and place it in your Web directory, and be sure to make it executable
 创建一个 mysite.fcgi 文件，并把它放在你的Web目录中，打开可执行权限

If you change any Python code on your site, you’ll need to tell FastCGI the code has changed.
如果你改变了站点上任何的python代码，你需要告知FastCGI

But there’s no need to restart Apache in this case.
 但是，这不需要重启Apache，而只需要重新上传 mysite.fcgi 或者编辑改文件，使得修改时间发生了变化，它会自动帮你重启Django应用

Rather, just reupload mysite.fcgi – or edit the file – so that the timestamp on the file changes.
 你可以重新上传mysite.fcgi或者编辑这个文件以改变该文件的时间戳

When Apache sees the file has been updated, it will restart your Django application for you.
 当阿帕奇服务器发现文档被更新了，它将会为你重启你的Django应用

If you have access to a command shell on a Unix system, you can accomplish this easily by using the touch command:
如果你拥有Unix系统命令行的可执行权限，只需要简单地使用 touch 命令：

Scaling¶
可扩展性

Now that you know how to get Django running on a single server, let’s look at how you can scale out a Django installation.
既然你已经知道如何在一台服务器上运行Django，让我们来研究一下，如何扩展我们的Django安装

This section walks through how a site might scale from a single server to a large-scale cluster that could serve millions of hits an hour.
 这一部分我们将讨论，如何把一台服务器扩展为一个大规模的服务器集群，这样就能满足每小时上百万的点击率

It’s important to note, however, that nearly every large site is large in different ways, so scaling is anything but a one-size-fits-all operation.
有一点很重要，每一个大型的站点大的形式和规模不同，因此可扩展性其实并不是一种千篇一律的行为

The following coverage should suffice to show the general principle, and whenever possible we’ll try to point out where different choices could be made.
 以下部分会涉及到一些通用的原则，并且会指出一些不同选择

First off, we’ll make a pretty big assumption and exclusively talk about scaling under Apache and mod_python.
首先，我们来做一个大的假设，只集中地讨论在Apache和mod_python下的可扩展性问题

Though we know of a number of successful medium- to large-scale FastCGI deployments, we’re much more familiar with Apache.
 尽管我们也知道一些成功的中型和大型的FastCGI策略，但是我们更加熟悉Apache

Most sites start out running on a single server, with an architecture that looks something like Figure 12-1.
大多数的站点一开始都运行在单机服务器上，看起来像图20-1这样的构架

Figure 12-1: a single server Django setup.
图 20-1： 一个单服务器的Django安装

This works just fine for small- to medium-sized sites, and it’s relatively cheap – you can put together a single-server site designed for Django for well under $3,000.
这对于小型和中型的站点来说还不错，并且也很便宜，一般来说，你可以在3000美元以下就搞定一切

However, as traffic increases you’ll quickly run into resource contention between the different pieces of software.
然而，当流量增加的时候，你会迅速陷入不同软件的 资源争夺 之中

Database servers and Web servers love to have the entire server to themselves, so when run on the same server they often end up “fighting” over the same resources (RAM, CPU) that they’d prefer to monopolize.
 数据库服务器和Web服务器都 喜欢 自己拥有整个服务器资源，因此当被安装在单机上时，它们总会争夺相同的资源（RAM, CPU），它们更愿意独享资源

This is solved easily by moving the database server to a second machine, as explained in the following section.
通过把数据库服务器搬移到第二台主机上，可以很容易地解决这个问题

As far as Django is concerned, the process of separating out the database server is extremely easy: you’ll simply need to change the DATABASE_HOST setting to the IP or DNS name of your database server.
对于Django来说，把数据库服务器分离开来很容易： 只需要简单地修改 DATABASE_HOST ，设置为新的数据库服务器的IP地址或者DNS域名

It’s probably a good idea to use the IP if at all possible, as relying on DNS for the connection between your Web server and database server isn’t recommended.
 设置为IP地址总是一个好主意，因为使用DNS域名，还要牵涉到DNS服务器的可靠性连接问题

With a separate database server, our architecture now looks like Figure 12-2.
使用了一个独立的数据库服务器以后，我们的构架变成了图20-2

Figure 12-2: Moving the database onto a dedicated server.
图 20-2： 将数据库移到单独的服务器上

Here we’re starting to move into what’s usually called n-tier architecture.
这里，我们开始步入 n-tier 构架

Don’t be scared by the buzzword – it just refers to the fact that different “tiers” of the Web stack get separated out onto different physical machines.
 不要被这个词所吓坏，它只是说明了Web栈的不同部分，被分离到了不同的物理机器上

At this point, if you anticipate ever needing to grow beyond a single database server, it’s probably a good idea to start thinking about connection pooling and/or database replication.
我们再来看，如果发现需要不止一台的数据库服务器，考虑使用连接池和数据库备份将是一个好主意

Unfortunately, there’s not nearly enough space to do those topics justice in this book, so you’ll need to consult your database’s documentation and/or community for more information.
 不幸的是，本书没有足够的时间来讨论这个问题，所以你参考数据库文档或者向社区求助

We still have a big problem left over from the single-server setup: the serving of media from the same box that handles dynamic content.
使用单机服务器仍然留下了一个大问题： 处理动态内容的媒体资源，也是在同一台机器上完成的

Those two activities perform best under different circumstances, and by smashing them together on the same box you end up with neither performing particularly well.
这两个活动是在不同的条件下进行的，因此把它们强行凑和在同一台机器上，你不可能获得很好的性能

So the next step is to separate out the media – that is, anything not generated by a Django view – onto a dedicated server (see Figure 12-3).
 下一步，我们要把媒体资源（任何 不是 由Django视图产生的东西）分离到别的服务器上（请看图20-3）

Figure 12-3: Separating out the media server.
图 20-3： 分离出媒体服务器

Ideally, this media server should run a stripped-down Web server optimized for static media delivery.
理想的情况是，这个媒体服务器是一个定制的Web服务器，为传送静态媒体资源做了优化

lighttpd and tux (http://www.djangoproject.com/r/tux/) are both excellent choices here, but a heavily stripped down Apache could work, too.
 lighttpd和tux (http://www.djangoproject.com/r/tux/) 都是极佳的选择，当然瘦身的Apache服务器也可以工作的很好

For sites heavy in static content (photos, videos, etc.), moving to a separate media server is doubly important and should likely be the first step in scaling up.
对于拥有大量静态内容（照片、视频等）的站点来说，将媒体服务器分离出去显然有着更加重要的意义，而且应该是扩大规模的时候所要采取的 第一步措施 

This step can be slightly tricky, however.
这一步需要一点点技巧，Django的admin管理接口需要能够获得足够的权限来处理上传的媒体（通过设置MEDIA_ROOT ）

If your application involves file uploads, Django needs to be able to write uploaded media to the media server.
如果媒体资源在另外的一台服务器上，你需要获得通过网络写操作的权限

If media lives on another server, you’ll need to arrange a way for that write to happen across the network.
 如果你的应用牵涉到文件上载，Django需要能够面向媒体服务器撰写上载媒体 如果媒体是在另外一台服务器上的，你需要部署一种方法使得Django可以通过网络去写这些媒体

At this point, we’ve broken things down as much as possible.
现在，我们已经尽可能地进行了分解

This three-server setup should handle a very large amount of traffic – we served around 10 million hits a day from an architecture of this sort – so if you grow further, you’ll need to start adding redundancy.
 这种三台服务器的构架可以承受很大的流量，比如每天1000万的点击率

This is a good thing, actually.
这是个好主意

One glance at Figure 12-3 shows you that if even a single one of your three servers fails, you’ll bring down your entire site.
 请看图 20-3，一旦三个服务器中的任何一个发生了故障，你就得关闭整个站点

So as you add redundant servers, not only do you increase capacity, but you also increase reliability.
 因此在引入冗余备份的时候，你并不只是增加了容量，同时也增加了可靠性

For the sake of this example, let’s assume that the Web server hits capacity first.
我们首先来考虑Web服务器的点击量

It’s relatively easy to get multiple copies of a Django site running on different hardware – just copy all the code onto multiple machines, and start Apache on both of them.
 把同一个Django的站点复制多份，在多台机器上同时运行很容易，我们也只需要同时运行多台机器上的Apache服务器

However, you’ll need another piece of software to distribute traffic over your multiple servers: a load balancer.
你还需要另一个软件来帮助你在多台服务器之间均衡网络流量： 流量均衡器（load balancer） 

You can buy expensive and proprietary hardware load balancers, but there are a few high-quality open source software load balancers out there.
你可以购买昂贵的专有的硬件均衡器，当然也有一些高质量的开源的软件均衡器可供选择

Apache’s mod_proxy is one option, but we’ve found Perlbal (http://www.djangoproject.com/r/perlbal/) to be fantastic.
Apaches 的 mod_proxy 是一个可以考虑的选择，但另一个配置更棒的选择是： memcached是同一个团队的人写的一个负载均衡和反向代理的程序.(见第15章)

Note
记录

If you’re using FastCGI, you can accomplish this same distribution/load balancing step by separating your front-end Web servers and back-end FastCGI processes onto different machines.
如果你使用FastCGI，你同样可以分离前台的web服务器，并在多台其他机器上运行FastCGI服务器来实现相同的负载均衡的功能

The front-end server essentially becomes the load balancer, and the back-end FastCGI processes replace the Apache/mod_python/Django servers.
 前台的服务器就相当于是一个均衡器，而后台的FastCGI服务进程代替了Apache/mod_python/Django服务器

With the Web servers now clustered, our evolving architecture starts to look more complex, as shown in Figure 12-4.
现在我们拥有了服务器集群，我们的构架慢慢演化，越来越复杂，如图20-4

Figure 12-4: A load-balanced, redundant server setup.
图 20-4： 负载均衡的服务器设置

Notice that in the diagram the Web servers are referred to as a “cluster” to indicate that the number of servers is basically variable.
值得一提的是，在图中，Web服务器指的是一个集群，来表示许多数量的服务器

Once you have a load balancer out front, you can easily add and remove back-end Web servers without a second of downtime.
 一旦你拥有了一个前台的均衡器，你就可以很方便地增加和删除后台的Web服务器，而且不会造成任何网站不可用的时间

At this point, the next few steps are pretty much derivatives of the last one:
下面的这些步骤都是上面最后一个的变体：

As you need more database performance, you might want to add replicated database servers.
当你需要更好的数据库性能，你可能需要增加数据库的冗余服务器

MySQL includes built-in replication;
 MySQL内置了备份功能

PostgreSQL users should look into Slony (http://www.djangoproject.com/r/slony/) and pgpool (http://www.djangoproject.com/r/pgpool/) for replication and connection pooling, respectively.
PostgreSQL应该看一下Slony (http://www.djangoproject.com/r/slony/) 和 pgpool (http://www.djangoproject.com/r/pgpool/) ，这两个分别是数据库备份和连接池的工具

If the single load balancer isn’t enough, you can add more load balancer machines out front and distribute among them using round-robin DNS.
如果单个均衡器不能达到要求，你可以增加更多的均衡器，并且使用轮训（round-robin）DNS来实现分布访问

If a single media server doesn’t suffice, you can add more media servers and distribute the load with your load-balancing cluster.
如果单台媒体服务器不够用，你可以增加更多的媒体服务器，并通过集群来分布流量

If you need more cache storage, you can add dedicated cache servers.
如果你需要更多的高速缓存（cache），你可以增加cache服务器

At any stage, if a cluster isn’t performing well, you can add more servers to the cluster.
在任何情况下，只要集群工作性能不好，你都可以往上增加服务器

After a few of these iterations, a large-scale architecture might look like Figure 12-5.
重复了几次以后，一个大规模的构架会像图20-5

Figure 12-5.
图 20-5

An example large-scale Django setup.
 大规模的Django安装

Though we’ve shown only two or three servers at each level, there’s no fundamental limit to how many you can add.
尽管我们只是在每一层上展示了两到三台服务器，你可以在上面随意地增加更多

Performance Tuning¶
性能优化

If you have huge amount of money, you can just keep throwing hardware at scaling problems.
如果你有大笔大笔的钱，遇到扩展性问题时，你可以简单地投资硬件

For the rest of us, though, performance tuning is a must.
 对于剩下的人来说，性能优化就是必须要做的一件事

Note
注意

Incidentally, if anyone with monstrous gobs of cash is actually reading this book, please consider a substantial donation to the Django Foundation.
顺便提一句，谁要是有大笔大笔的钞票，请捐助一点Django项目

We accept uncut diamonds and gold ingots, too.
 我们也接受未切割的钻石和金币

Unfortunately, performance tuning is much more of an art than a science, and it is even more difficult to write about than scaling.
不幸的是，性能优化比起科学来说更像是一种艺术，并且这比扩展性更难描述

If you’re serious about deploying a large-scale Django application, you should spend a great deal of time learning how to tune each piece of your stack.
 如果你真想要构建一个大规模的Django应用，你需要花大量的时间和精力学习如何优化构架中的每一部分

The following sections, though, present a few Django-specific tuning tips we’ve discovered over the years.
以下部分总结了多年以来的经验，是一些专属于Django的优化技巧

Even the really expensive RAM is relatively affordable these days.
最近即使那些昂贵的RAM也相对来说可以负担的起了

Buy as much RAM as you can possibly afford, and then buy a little bit more.
 购买尽可能多的RAM，再在别的上面投资一点点

Faster processors won’t improve performance all that much;
高速的处理器并不会大幅度地提高性能

most Web servers spend up to 90% of their time waiting on disk I/O.
大多数的Web服务器90%的时间都浪费在了硬盘IO上

As soon as you start swapping, performance will just die.
 当硬盘上的数据开始交换，性能就急剧下降

Faster disks might help slightly, but they’re much more expensive than RAM, such that it doesn’t really matter.
 更快速的硬盘可以改善这个问题，但是比起RAM来说，那太贵了

If you have multiple servers, the first place to put your RAM is in the database server.
如果你拥有多台服务器，首要的是要在数据库服务器上增加内存

If you can afford it, get enough RAM to get fit your entire database into memory.
 如果你能负担得起，把你整个数据库都放入到内存中

This shouldn’t be too hard;
 这应该不是很困难，我们已经开发过一个站点上面有多于一百万条报刊文章，这个站点使用了不到2GB的空间

Next, max out the RAM on your Web server.
下一步，最大化Web服务器上的内存

The ideal situation is one where neither server swaps – ever.
 最理想的情况是，没有一台服务器进行磁盘交换

If you get to that point, you should be able to withstand most normal traffic.
 如果你达到了这个水平，你就能应付大多数正常的流量

Keep-Alive is a feature of HTTP that allows multiple HTTP requests to be served over a single TCP connection, avoiding the TCP setup/teardown overhead.
Keep-Alive 是HTTP提供的功能之一，它的目的是允许多个HTTP请求复用一个TCP连接，也就是允许在同一个TCP连接上发起多个HTTP请求，这样有效的避免了每个HTTP请求都重新建立自己的TCP连接的开销

This looks good at first glance, but it can kill the performance of a Django site.
这一眼看上去是好事，但它足以杀死Django站点的性能

If you’re properly serving media from a separate server, each user browsing your site will only request a page from your Django server every ten seconds or so.
 如果你从单独的媒体服务器上向用户提供服务，每个光顾你站点的用户都大约10秒钟左右发出一次请求

This leaves HTTP servers waiting around for the next keep-alive request, and an idle HTTP server just consumes RAM that an active one should be using.
 这就使得HTTP服务器一直在等待下一次keep-alive 的请求，空闲的HTTP服务器和工作时消耗一样多的内存

Although Django supports a number of different cache back-ends, none of them even come close to being as fast as memcached.
尽管Django支持多种不同的cache后台机制，没有一种的性能可以 接近 memcached

If you have a high-traffic site, don’t even bother with the other backends – go straight to memcached.
 如果你有一个高流量的站点，不要犹豫，直接选择memcached

Of course, selecting memcached does you no good if you don’t actually use it.
当然，选择了memcached而不去使用它，你不会从中获得任何性能上的提升

Chapter 15 is your best friend here: learn how to use Django’s cache framework, and use it everywhere possible.
 Chapter 15 is your best friend here: 学习如何使用Django的cache框架，并且尽可能地使用它

Aggressive, preemptive caching is usually the only thing that will keep a site up under major traffic.
 大量的可抢占式的高速缓存通常是一个站点在大流量下正常工作的唯一瓶颈

Each piece of the Django stack – from Linux to Apache to PostgreSQL or MySQL – has an awesome community behind it.
Django相关的每一个部分，从Linux到Apache到PostgreSQL或者MySQL背后，都有一个非常棒的社区支持

If you really want to get that last 1% out of your servers, join the open source communities behind your software and ask for help.
 如果你真想从你的服务器上榨干最后1%的性能，加入开源社区寻求帮助

Most free-software community members will be happy to help.
 多数的自由软件社区成员都会很乐意地提供帮助

And also be sure to join the Django community.
别忘了Django社区

Your humble authors are only two members of an incredibly active, growing group of Django developers.
 这本书谦逊的作者只是Django开发团队中的两位成员

Our community has a huge amount of collective experience to offer.
 我们的社区有大量的经验可以提供

What’s Next?¶
下一章

The remaining chapters focus on other Django features that you may or may not need, depending on your application.
下面的章节集中在其他的一些Django特性上，你是否需要它们取决于你的应用项目

Feel free to read them in any order you choose.
 可以自由选择阅读

© Copyright 2012, Matt Behrens.
www.shoucewang.com. All Rights Reserved. 手册网 版权所有

