Chapter 6: The Django Admin Site¶
第六章：Admin

For a certain class of Web sites, an admin interface is an essential part of the infrastructure.
对于某一类网站， 管理界面 是基础设施中非常重要的一部分

This is a Web-based interface, limited to trusted site administrators, that enables the adding, editing and deletion of site content.
 这是以网页和有限的可信任管理者为基础的界面，它可以让你添加，编辑和删除网站内容

Some common examples: the interface you use to post to your blog, the backend site managers use to moderate user-generated comments, the tool your clients use to update the press releases on the Web site you built for them.
 一些常见的例子： 你可以用这个界面发布博客，后台的网站管理者用它来润色读者提交的内容，你的客户用你给他们建立的界面工具更新新闻并发布在网站上，这些都是使用管理界面的例子

There’s a problem with admin interfaces, though: it’s boring to build them.
但是管理界面有一问题： 创建它太繁琐

Web development is fun when you’re developing public-facing functionality, but building admin interfaces is always the same.
 当你开发对公众的功能时，网页开发是有趣的，但是创建管理界面通常是千篇一律的

You have to authenticate users, display and handle forms, validate input, and so on.
 你必须认证用户，显示并管理表格，验证输入的有效性诸如此类

It’s boring, and it’s repetitive.
 这很繁琐而且是重复劳动

So what’s Django’s approach to these boring, repetitive tasks?
Django 在对这些繁琐和重复的工作进行了哪些改进

It does it all for you – in just a couple of lines of code, no less.
 它用不能再少的代码为你做了所有的一切

With Django, building an admin interface is a solved problem.
 Django 中创建管理界面已经不是问题

This chapter is about Django’s automatic admin interface.
这一章是关于 Django 的自动管理界面

The feature works by reading metadata in your model to provide a powerful and production-ready interface that site administrators can start using immediately.
 这个特性是这样起作用的： 它读取你模式中的元数据，然后提供给你一个强大而且可以使用的界面，网站管理者可以用它立即工作

Note that we recommend reading this chapter even if you don’t intend to use the Django admin site, because we introduce a few concepts that apply to all of Django, regardless of admin-site usage.
请注意我们建议你读这章，即使你不打算用admin

The django.contrib packages¶
django.contrib 包

Django’s automatic admin is part of a larger suite of Django functionality called django.contrib – the part of the Django codebase that contains various useful add-ons to the core framework.
Django自动管理工具是django.contrib的一部分

You can think of django.contrib as Django’s equivalent of the Python standard library – optional, de facto implementations of common patterns.
django.contrib是一套庞大的功能集，它是Django基本代码的组成部分，Django框架就是由众多包含附加组件(add-on)的基本代码构成的

They’re bundled with Django so that you don’t have to reinvent the wheel in your own applications.
 你可以把django.contrib看作是可选的Python标准库或普遍模式的实际实现

The admin site is the first part of django.contrib that we’re covering in this book;
管理工具是本书讲述django.contrib的第一个部分

technically, it’s called django.contrib.admin.
从技术层面上讲，它被称作django.contrib.admin

Other available features in django.contrib include a user authentication system (django.contrib.auth), support for anonymous sessions (django.contrib.sessions) and even a system for user comments (django.contrib.comments).
django.contrib中其它可用的特性，如用户鉴别系统(django.contrib.auth)、支持匿名会话(django.contrib.sessioins)以及用户评注系统(django.contrib.comments)

You’ll get to know the various django.contrib features as you become a Django expert, and we’ll spend some more time discussing them in Chapter 16.
这些，我们将在第十六章详细讨论

For now, just know that Django ships with many nice add-ons, and django.contrib is generally where they live.
在成为一个Django专家以前，你将会知道更多django.contrib的特性

Activating the Admin Interface¶
激活管理界面

The Django admin site is entirely optional, because only certain types of sites need this functionality.
Django管理站点完全是可选择的，因为仅仅某些特殊类型的站点才需要这些功能

That means you’ll need to take a few steps to activate it in your project.
 这意味着你需要在你的项目中花费几个步骤去激活它

First, make a few changes to your settings file:
第一步，对你的settings文件做如下这些改变：

Second, run python manage.py syncdb.
运行 python manage.py syncdb 

This step will install the extra database tables that the admin interface uses.
这一步将生成管理界面使用的额外数据库表

The first time you run syncdb with 'django.contrib.auth' in INSTALLED_APPS, you’ll be asked about creating a superuser.
 当你把'django.contrib.auth'加进INSTALLED_APPS后，第一次运行syncdb命令时, 系统会请你创建一个超级用户

If you don’t do this, you’ll need to run python manage.py createsuperuser separately to create an admin user account;
 如果你不这么作，你需要运行python manage.py createsuperuser来另外创建一个admin的用户帐号，否则你将不能登入admin (提醒一句: 只有当INSTALLED_APPS包含'django.contrib.auth'时，python manage.py createsuperuser这个命令才可用.)

Third, add the admin site to your URLconf (in urls.py, remember).
第三，将admin访问配置在URLconf(记住，在urls.py中). 默认情况下，命令django-admin.py startproject生成的文件urls.py是将Django admin的路径注释掉的，你所要做的就是取消注释

By default, the urls.py generated by django-admin.py startproject contains commented-out code for the Django admin, and all you have to do is uncomment it.
 请注意，以下内容是必须确保存在的：

With that bit of configuration out of the way, now you can see the Django admin site in action.
当这一切都配置好后，现在你将发现Django管理工具可以运行了

Just run the development server (python manage.py runserver, as in previous chapters) and visit http://127.0.0.1:8000/admin/ in your Web browser.
 启动开发服务器(如前：python manage.py runserver )，然后在浏览器中访问：

Using the Admin Site¶
使用管理工具

The admin site is designed to be used by nontechnical users, and as such it should be pretty self-explanatory.
管理界面的设计是针对非技术人员的，所以它应该是自我解释的

Nevertheless, we’ll give you a quick walkthrough of the basic features.
 尽管如此，这里简单介绍一下它的基本特性

The first thing you’ll see is a login screen, as shown in Figure 6-1.
你看到的第一件事是如图6-1所示的登录屏幕

Figure 6-1.
图 6-1. Django的登录截图

Log in with the username and password you set up when you added your superuser.
你要使用你原来设置的超级用户的用户名和密码

If you’re unable to log in, make sure you’ve actually created a superuser – try running python manage.py createsuperuser.
 如果无法登录，请运行python manage.py createsuperuser ，确保你已经创建了一个超级用户

Once you’re logged in, the first thing you’ll see will be the admin home page.
一旦登录了，你将看到管理页面

This page lists all the available types of data that can be edited on the admin site.
 这个页面列出了管理工具中可编辑的所有数据类型

At this point, because we haven’t activated any of our own models yet, the list is sparse: it includes only Groups and Users, which are the two default admin-editable models.
 现在，由于我们还没有创建任何模块，所以这个列表只有寥寥数条类目： 它仅有两个默认的管理-编辑模块：用户组(Groups)和用户(Users)

Figure 6-2.
图 6-2

The Django admin home page
 Django admin的首页

Each type of data in the Django admin site has a change list and an edit form.
在Django管理页面中，每一种数据类型都有一个change list 和edit form 

Change lists show you all the available objects in the database, and edit forms let you add, change or delete particular records in your database.
前者显示数据库中所有的可用对象

Other languages
其它语言

If your primary language is not English and your Web browser is configured to prefer a language other than English, you can make a quick change to see whether the Django admin site has been translated into your language.
如果你的母语不是英语，而你不想用它来配置你的浏览器，你可以做一个快速更改来观察Django管理工具是否被翻译成你想要的语言

Just add 'django.middleware.locale.LocaleMiddleware' to your MIDDLEWARE_CLASSES setting, making sure it appears after 'django.contrib.sessions.middleware.SessionMiddleware'.
 仅需添加‘django.middleware.locale.LocaleMiddleware’ 到MIDDLEWARE_CLASSES 设置中，并确保它在’django.contrib.sessions.middleware.SessionMiddleware’之后 

When you’ve done that, reload the admin index page.
完成后，请刷新页面

If a translation for your language is available, then the various parts of the interface – from the “Change password” and “Log out” links at the top of the page, to the “Groups” and “Users” links in the middle – will appear in your language instead of English.
 如果你设置的语言可用，一系列的链接文字将被显示成这种语言

Django ships with translations for dozens of languages.
这些文字包括页面顶端的Change password和Log out，页面中部的Groups和Users

For much more on Django’s internationalization features, see Chapter 19.
关于Django更多的国际化特性，请参见第十九章

Click the “Change” link in the “Users” row to load the change list page for users.
点击Uers行中的Change链接，引导用户更改列表

Figure 6-3.
图 6-3. 典型的改变列表视图 （见上）

This page displays all users in the database;
这个页面显示了数据库中所有的用户

you can think of it as a prettied-up Web version of a SELECT * FROM auth_user;
你可以将它看作是一个漂亮的网页版查询：SELECT * FROM auth_user; 如果你一直跟着作练习，并且只添加了一个用户，你会在这个页面中看到一个用户

SQL query.
但是如果你添加了多个用户，你会发现页面中还有过滤器、排序和查询框

If you’re following along with our ongoing example, you’ll only see one user here, assuming you’ve added only one, but once you have more users, you’ll probably find the filtering, sorting and searching options useful.
 过滤器在右边

Filtering options are at right, sorting is available by clicking a column header, and the search box at the top lets you search by username.
排序功能可通过点击列头查看

Click the username of the user you created, and you’ll see the edit form for that user.
点击其中一个用户名，你会看见关于这个用户的编辑窗口

Figure 6-4.
图 6-4. 典型的编辑表格 （见上）

This page lets you change the attributes of the user, like the first/last names and various permissions.
这个页面允许你修改用户的属性，如姓名和权限

(Note that to change a user’s password, you should click “change password form” under the password field rather than editing the hashed code.) Another thing to note here is that fields of different types get different widgets – for example, date/time fields have calendar controls, boolean fields have checkboxes, character fields have simple text input fields.
 （如果要更改用户密码，你必须点击密码字段下的change password form，而不是直接更改字段值中的哈西码

You can delete a record by clicking the delete button at the bottom left of its edit form.
你可以通过点击编辑页面下方的删除按钮来删除一条记录

That’ll take you to a confirmation page, which, in some cases, will display any dependent objects that will be deleted, too.
 你会见到一个确认页面

(For example, if you delete a publisher, any book with that publisher will be deleted, too!)
有时候，它会显示有哪些关联的对象将会一并被删除

You can add a record by clicking “Add” in the appropriate column of the admin home page.
你可以通过点击管理主页面中某个对象的Add来添加一条新记录

This will give you an empty version of the edit page, ready for you to fill out.
 一个空白记录的页面将被打开，等待你填充

You’ll also notice that the admin interface also handles input validation for you.
你还能看到管理界面也控制着你输入的有效性

Try leaving a required field blank or putting an invalid date into a date field, and you’ll see those errors when you try to save, as shown in Figure 6-5.
 你可以试试不填必需的栏目或者在时间栏里填错误的时间，你会发现当你要保存时会出现错误信息，如图6-5所示

Figure 6-5.
图6-5. 编辑表格显示错误信息 （见上）

When you edit an existing object, you’ll notice a History link in the upper-right corner of the window.
当你编辑已有的对像时，你在窗口的右上角可以看到一个历史按钮

Every change made through the admin interface is logged, and you can examine this log by clicking the History link (see Figure 6-6).
 通过管理界面做的每一个改变都留有记录，你可以按历史键来检查这个记录（见图6-6）

Figure 6-6.
图6-6. Django 对像历史页面 （见上）

Adding Your Models to the Admin Site¶
将你的Models加入到Admin管理中

There’s one crucial part we haven’t done yet.
有一个关键步骤我们还没做

Let’s add our own models to the admin site, so we can add, change and delete objects in our custom database tables using this nice interface.
 让我们将自己的模块加入管理工具中，这样我们就能够通过这个漂亮的界面添加、修改和删除数据库中的对象了

We’ll continue the books example from Chapter 5, where we defined three models: Publisher, Author and Book.
 我们将继续第五章中的book 例子

Within the books directory (mysite/books), create a file called admin.py, and type in the following lines of code:
在books 目录下(mysite/books )，创建一个文件：admin.py ，然后输入以下代码：

This code tells the Django admin site to offer an interface for each of these models.
这些代码通知管理工具为这些模块逐一提供界面

Once you’ve done this, go to your admin home page in your Web browser (http://127.0.0.1:8000/admin/), and you should see a “Books” section with links for Authors, Books and Publishers.
完成后，打开页面  http://127.0.0.1:8000/admin/ ，你会看到一个Books区域，其中包含Authors、Books和Publishers

(You might have to stop and start the runserver for the changes to take effect.)
  （你可能需要先停止，然后再启动服务(runserver )，才能使其生效

You now have a fully functional admin interface for each of those three models.
现在你拥有一个功能完整的管理界面来管理这三个模块了

That was easy!
 很简单吧

Take some time to add and change records, to populate your database with some data.
花点时间添加和修改记录，以填充数据库

If you followed Chapter 5’s examples of creating Publisher objects (and you didn’t delete them), you’ll already see those records on the publisher change list page.
 如果你跟着第五章的例子一起创建Publisher对象的话（并且没有删除），你会在列表中看到那些记录

One feature worth mentioning here is the admin site’s handling of foreign keys and many-to-many relationships, both of which appear in the Book model.
这里需要提到的一个特性是，管理工具处理外键和多对多关系（这两种关系可以在Book 模块中找到）的方法

As a reminder, here’s what the Book model looks like:
 作为提醒，这里有个Book 模块的例子：

On the Django admin site’s “Add book” page (http://127.0.0.1:8000/admin/books/book/add/), the publisher (a ForeignKey) is represented by a select box, and the authors field (a ManyToManyField) is represented by a multiple-select box.
在Add book页面中（ http://127.0.0.1:8000/admin/books/book/add/ ），外键 publisher用一个选择框显示，多对多 字段author用一个多选框显示

Both fields sit next to a green plus sign icon that lets you add related records of that type.
 点击两个字段后面的绿色加号，可以让你添加相关的记录

For example, if you click the green plus sign next to the “Publisher” field, you’ll get a pop-up window that lets you add a publisher.
 举个例子，如果你点击Publisher后面的加号，你将会得到一个弹出窗口来添加一个publisher

After you successfully create the publisher in the pop-up, the “Add book” form will be updated with the newly created publisher.
 当你在那个窗口中成功创建了一个publisher后，Add book表单会自动把它更新到字段上去 花巧.

How the Admin Site Works¶
Admin是如何工作的

Behind the scenes, how does the admin site work?
在幕后，管理工具是如何工作的呢

It’s pretty straightforward.
 其实很简单

When Django loads your URLconf from urls.py at server startup, it executes the admin.autodiscover() statement that we added as part of activating the admin.
当服务启动时，Django从url.py 引导URLconf，然后执行admin.autodiscover() 语句

This function iterates over your INSTALLED_APPS setting and looks for a file called admin.py in each installed app.
 这个函数遍历INSTALLED_APPS配置，并且寻找相关的 admin.py文件

If an admin.py exists in a given app, it executes the code in that file.
 如果在指定的app目录下找到admin.py，它就执行其中的代码

In the admin.py in our books app, each call to admin.site.register() simply registers the given model with the admin.
在books 应用程序目录下的admin.py 文件中，每次调用admin.site.register() 都将那个模块注册到管理工具中

The admin site will only display an edit/change interface for models that have been explicitly registered.
 管理工具只为那些明确注册了的模块显示一个编辑/修改的界面

The app django.contrib.auth includes its own admin.py, which is why Users and Groups showed up automatically in the admin.
应用程序django.contrib.auth 包含自身的admin.py ，所以Users和Groups能在管理工具中自动显示

Other django.contrib apps, such as django.contrib.redirects, also add themselves to the admin, as do many third-party Django applications you might download from the Web.
 其它的django.contrib应用程序，如django.contrib.redirects，其它从网上下在的第三方Django应用程序一样，都会自行添加到管理工具

Beyond that, the Django admin site is just a Django application, with its own models, templates, views and URLpatterns.
综上所述，管理工具其实就是一个Django应用程序，包含自己的模块、模板、视图和URLpatterns

You add it to your application by hooking it into your URLconf, just as you hook in your own views.
 你要像添加自己的视图一样，把它添加到URLconf里面

You can inspect its templates, views and URLpatterns by poking around in django/contrib/admin in your copy of the Django codebase – but don’t be tempted to change anything directly in there, as there are plenty of hooks for you to customize the way the admin site works.
 你可以在Django基本代码中的django/contrib/admin 目录下，检查它的模板、视图和URLpatterns，但你不要尝试直接修改其中的任何代码，因为里面有很多地方可以让你自定义管理工具的工作方式

(If you do decide to poke around the Django admin application, keep in mind it does some rather complicated things in reading metadata about models, so it would probably take a good amount of time to read and understand the code.)
 （如果你确实想浏览Django管理工具的代码，请谨记它在读取关于模块的元数据过程中做了些不简单的工作，因此最好花些时间阅读和理解那些代码

Making Fields Optional¶
设置字段可选

After you play around with the admin site for a while, you’ll probably notice a limitation – the edit forms require every field to be filled out, whereas in many cases you’d want certain fields to be optional.
在摆弄了一会之后，你或许会发现管理工具有个限制：编辑表单需要你填写每一个字段，然而在有些情况下，你想要某些字段是可选的

Let’s say, for example, that we want our Author model’s email field to be optional – that is, a blank string should be allowed.
 举个例子，我们想要Author模块中的email字段成为可选，即允许不填

In the real world, you might not have an e-mail address on file for every author.
 在现实世界中，你可能没有为每个作者登记邮箱地址

To specify that the email field is optional, edit the Book model (which, as you’ll recall from Chapter 5, lives in mysite/books/models.py).
为了指定email字段为可选，你只要编辑Book模块（回想第五章，它在mysite/books/models.py文件里），在email字段上加上blank=True

Simply add blank=True to the email field, like so:
代码如下：

This tells Django that a blank value is indeed allowed for authors’ e-mail addresses.
这些代码告诉Django，作者的邮箱地址允许输入一个空值

By default, all fields have blank=False, which means blank values are not allowed.
 所有字段都默认blank=False，这使得它们不允许输入空值

There’s something interesting happening here.
这里会发生一些有趣的事情

Until now, with the exception of the __unicode__() method, our models have served as definitions of our database tables – Pythonic expressions of SQL CREATE TABLE statements, essentially.
 直到现在，除了unicode()方法，我们的模块充当数据库中表定义的角色，即本质上是用Python的语法来写CREATE TABLE语句

In adding blank=True, we have begun expanding our model beyond a simple definition of what the database table looks like.
 在添加blank=True过程中，我们已经开始在简单的定义数据表上扩展我们的模块了

Now, our model class is starting to become a richer collection of knowledge about what Author objects are and what they can do.
 现在，我们的模块类开始成为一个富含Author对象属性和行为的集合了

Not only is the email field represented by a VARCHAR column in the database;
 email不但展现为一个数据库中的VARCHAR类型的字段，它还是页面中可选的字段，就像在管理工具中看到的那样

Once you’ve added that blank=True, reload the “Add author” edit form (http://127.0.0.1:8000/admin/books/author/add/), and you’ll notice the field’s label – “Email” – is no longer bolded.
当你添加blank=True以后，刷新页面Add author edit form (http://127.0.0.1:8000/admin/books/author/add/ )，将会发现Email的标签不再是粗体了

This signifies it’s not a required field.
 这意味它不是一个必填字段

You can now add authors without needing to provide e-mail addresses;
 现在你可以添加一个作者而不必输入邮箱地址，即使你为这个字段提交了一个空值，也再不会得到那刺眼的红色信息“This field is required”

A common gotcha related to blank=True has to do with date and numeric fields, but it requires a fair amount of background explanation.
虽然blank=True同样适用于日期型和数字型字段，但是这里需要详细讲解一些背景知识

SQL has its own way of specifying blank values – a special value called NULL.
SQL有指定空值的独特方式，它把空值叫做NULL

NULL could mean “unknown,” or “invalid,” or some other application-specific meaning.
NULL可以表示为未知的、非法的、或其它程序指定的含义

In SQL, a value of NULL is different than an empty string, just as the special Python object None is different than an empty Python string ("").
在SQL中， NULL的值不同于空字符串，就像Python中None不同于空字符串（""）一样

This means it’s possible for a particular character field (e.g., a VARCHAR column) to contain both NULL values and empty string values.
这意味着某个字符型字段（如VARCHAR）的值不可能同时包含NULL和空字符串

This can cause unwanted ambiguity and confusion: “Why does this record have a NULL but this other one has an empty string?
这会引起不必要的歧义或疑惑

Is there a difference, or was the data just entered inconsistently?” And: “How do I get all the records that have a blank value – should I look for both NULL records and empty strings, or do I only select the ones with empty strings?”
 为什么这条记录有个NULL，而那条记录却有个空字符串

To help avoid such ambiguity, Django’s automatically generated CREATE TABLE statements (which were covered in Chapter 5) add an explicit NOT NULL to each column definition.
为了消除歧义，Django生成CREATE TABLE语句自动为每个字段显式加上NOT NULL

For example, here’s the generated statement for our Author model, from Chapter 5:
 这里有个第五章中生成Author模块的例子：

In most cases, this default behavior is optimal for your application and will save you from data-inconsistency headaches.
在大多数情况下，这种默认的行为对你的应用程序来说是最佳的，因为它可以使你不再因数据一致性而头痛

And it works nicely with the rest of Django, such as the Django admin site, which inserts an empty string (not a NULL value) when you leave a character field blank.
 而且它可以和Django的其它部分工作得很好

But there’s an exception with database column types that do not accept empty strings as valid values – such as dates, times and numbers.
但是，其它数据类型有例外：日期型、时间型和数字型字段不接受空字符串

If you try to insert an empty string into a date or integer column, you’ll likely get a database error, depending on which database you’re using.
 如果你尝试将一个空字符串插入日期型或整数型字段，你可能会得到数据库返回的错误，这取决于那个数据库的类型

(PostgreSQL, which is strict, will raise an exception here;
 （PostgreSQL比较严禁，会抛出一个异常

MySQL might accept it or might not, depending on the version you’re using, the time of day and the phase of the moon.) In this case, NULL is the only way to specify an empty value.
MySQL可能会也可能不会接受，这取决于你使用的版本和运气了

In Django models, you can specify that NULL is allowed by adding null=True to a field.
）在这种情况下，NULL是唯一指定空值的方法

So that’s a long way of saying this: if you want to allow blank values in a date field (e.g., DateField, TimeField, DateTimeField) or numeric field (e.g., IntegerField, DecimalField, FloatField), you’ll need to use both null=True and blank=True.
因此，这说起来有点复杂： 如果你想允许一个日期型（DateField、TimeField、DateTimeField）或数字型（IntegerField、DecimalField、FloatField）字段为空，你需要使用null=True 和 blank=True

For sake of example, let’s change our Book model to allow a blank publication_date.
为了举例说明，让我们把Book模块修改成允许 publication_date为空

Here’s the revised code:
修改后的代码如下：

Adding null=True is more complicated than adding blank=True, because null=True changes the semantics of the database – that is, it changes the CREATE TABLE statement to remove the NOT NULL from the publication_date field.
添加null=True比添加blank=True复杂

To complete this change, we’ll need to update the database.
因为null=True改变了数据的语义，即改变了CREATE TABLE语句，把publication_date字段上的NOT NULL删除了

For a number of reasons, Django does not attempt to automate changes to database schemas, so it’s your own responsibility to execute the appropriate ALTER TABLE statement whenever you make such a change to a model.
出于某种原因，Django不会尝试自动更新数据库结构

Recall that you can use manage.py dbshell to enter your database server’s shell.
所以你必须执行ALTER TABLE语句将模块的改动更新至数据库

Here’s how to remove the NOT NULL in this particular case:
 像先前那样，你可以使用manage.py dbshell进入数据库服务环境

(Note that this SQL syntax is specific to PostgreSQL.)
（注意：以下SQL语法是PostgreSQL特有的

We’ll cover schema changes in more depth in Chapter 10.
我们将在第十章详细讲述数据库结构更改

Bringing this back to the admin site, now the “Add book” edit form should allow for empty publication date values.
现在让我们回到管理工具，添加book的编辑页面允许输入一个空的publication date

Customizing Field Labels¶
自定义字段标签

On the admin site’s edit forms, each field’s label is generated from its model field name.
在编辑页面中，每个字段的标签都是从模块的字段名称生成的

The algorithm is simple: Django just replaces underscores with spaces and capitalizes the first character, so, for example, the Book model’s publication_date field has the label “Publication date.”
 规则很简单： 用空格替换下划线

However, field names don’t always lend themselves to nice admin field labels, so in some cases you might want to customize a label.
然而，字段名称并不总是贴切的

You can do this by specifying verbose_name in the appropriate model field.
有些情况下，你可能想自定义一个标签

For example, here’s how we can change the label of the Author.email field to “e-mail,” with a hyphen:
举个例子，说明如何将Author.email的标签改为e-mail，中间有个横线

Make that change and reload the server, and you should see the field’s new label on the author edit form.
修改后重启服务器，你会在author编辑页面中看到这个新标签

Note that you shouldn’t capitalize the first letter of a verbose_name unless it should always be capitalized (e.g., "USA state").
请注意，你不必把verbose_name的首字母大写，除非是连续大写（如："USA state"）

Django will automatically capitalize it when it needs to, and it will use the exact verbose_name value in other places that don’t require capitalization.
Django会自动适时将首字母大写，并且在其它不需要大写的地方使用verbose_name的精确值

Finally, note that you can pass the verbose_name as a positional argument, for a slightly more compact syntax.
最后还需注意的是，为了使语法简洁，你可以把它当作固定位置的参数传递

This example is equivalent to the previous one:
 这个例子与上面那个的效果相同

This won’t work with ManyToManyField or ForeignKey fields, though, because they require the first argument to be a model class.
但这不适用于ManyToManyField 和ForeignKey字段，因为它们第一个参数必须是模块类

In those cases, specifying verbose_name explicitly is the way to go.
 那种情形，必须显式使用verbose_name这个参数名称

Custom ModelAdmin classes¶
自定义ModelAdmi类

The changes we’ve made so far – blank=True, null=True and verbose_name – are really model-level changes, not admin-level changes.
迄今为止，我们做的blank=True、null=True和verbose_name修改其实是模块级别，而不是管理级别的

That is, these changes are fundamentally a part of the model and just so happen to be used by the admin site;
 也就是说，这些修改实质上是构成模块的一部分，并且正好被管理工具使用，而不是专门针对管理工具的

Beyond these, the Django admin site offers a wealth of options that let you customize how the admin site works for a particular model.
除了这些，Django还提供了大量选项让你针对特别的模块自定义管理工具

Such options live in ModelAdmin classes, which are classes that contain configuration for a specific model in a specific admin site instance.
 这些选项都在_ModelAdmin classes_里面，这些类包含了管理工具中针对特别模块的配置

Let’s dive into admin customization by specifying the fields that are displayed on the change list for our Author model.
让我们更深一步：自定义Author模块的列表中的显示字段

By default, the change list displays the result of __unicode__() for each object.
 列表默认地显示查询结果中对象的unicode()

In Chapter 5, we defined the __unicode__() method for Author objects to display the first name and last name together:
 在第五章中，我们定义Author对象的unicode()方法，用以同时显示作者的姓和名

As a result, the change list for Author objects displays each other’s first name and last name together, as you can see in Figure 6-7.
结果正如图6-7所示，列表中显示的是每个作者的姓名

Figure 6-7.
图 6-7. 作者列表

We can improve on this default behavior by adding a few other fields to the change list display.
我们可以在这基础上改进，添加其它字段，从而改变列表的显示

It’d be handy, for example, to see each author’s e-mail address in this list, and it’d be nice to be able to sort by first and last name.
 这个页面应该提供便利，比如说：在这个列表中可以看到作者的邮箱地址

To make this happen, we’ll define a ModelAdmin class for the Author model.
为了达到这个目的，我们将为Author模块定义一个ModelAdmin类

This class is the key to customizing the admin, and one of the most basic things it lets you do is specify the list of fields to display on change list pages.
 这个类是自定义管理工具的关键，其中最基本的一件事情是允许你指定列表中的字段

Edit admin.py to make these changes:
 打开admin.py并修改：

Here’s what we’ve done:
解释一下代码：

We created the class AuthorAdmin.
我们新建了一个类AuthorAdmin，它是从django.contrib.admin.ModelAdmin派生出来的子类，保存着一个类的自定义配置，以供管理工具使用

This class, which subclasses django.contrib.admin.ModelAdmin, holds custom configuration for a specific admin model.
 我们只自定义了一项：list_display， 它是一个字段名称的元组，用于列表显示

We’ve only specified one customization – list_display, which is set to a tuple of field names to display on the change list page.
 当然，这些字段名称必须是模块中有的

We altered the admin.site.register() call to add AuthorAdmin after Author.
我们修改了admin.site.register()调用，在Author后面添加了AuthorAdmin

You can read this as: “Register the Author model with the AuthorAdmin options.”
你可以这样理解： 用AuthorAdmin选项注册Author模块

The admin.site.register() function takes a ModelAdmin subclass as an optional second argument.
admin.site.register()函数接受一个ModelAdmin子类作为第二个参数

If you don’t specify a second argument (as is the case for Publisher and Book), Django will use the default admin options for that model.
 如果你忽略第二个参数，Django将使用默认的选项

With that tweak made, reload the author change list page, and you’ll see it’s now displaying three columns – the first name, last name and e-mail address.
弄好了这个东东，再刷新author列表页面，你会看到列表中有三列：姓氏、名字和邮箱地址

In addition, each of those columns is sortable by clicking on the column header.
 另外，点击每个列的列头可以对那列进行排序

(See Figure 6-8.)
 （参见图 6-8）

Figure 6-8.
图 6-8. 修改后的author列表页面

Next, let’s add a simple search bar.
接下来，让我们添加一个快速查询栏

Add search_fields to the AuthorAdmin, like so:
 向AuthorAdmin追加search_fields，如：

Reload the page in your browser, and you should see a search bar at the top.
刷新浏览器，你会在页面顶端看到一个查询栏

(See Figure 6-9.) We’ve just told the admin change list page to include a search bar that searches against the first_name and last_name fields.
 （见图6-9.）我们刚才所作的修改列表页面，添加了一个根据姓名查询的查询框

As a user might expect, this is case-insensitive and searches both fields, so searching for the string "bar" would find both an author with the first name Barney and an author with the last name Hobarson.
 正如用户所希望的那样，它是大小写敏感，并且对两个字段检索的查询框

Figure 6-9.
图 6-9. 含search_fields的author列表页面

Next, let’s add some date filters to our Book model’s change list page:
接下来，让我们为Book列表页添加一些过滤器

Here, because we’re dealing with a different set of options, we created a separate ModelAdmin class – BookAdmin.
由于我们要处理一系列选项，因此我们创建了一个单独的ModelAdmin类：BookAdmin

First, we defined a list_display just to make the change list look a bit nicer.
首先，我们定义一个list_display，以使得页面好看些

Then, we used list_filter, which is set to a tuple of fields to use to create filters along the right side of the change list page.
 然后，我们用list_filter这个字段元组创建过滤器，它位于列表页面的右边

For date fields, Django provides shortcuts to filter the list to “Today,” “Past 7 days,” “This month” and “This year” – shortcuts that Django’s developers have found hit the common cases for filtering by date.
 Django为日期型字段提供了快捷过滤方式，它包含：今天、过往七天、当月和今年

Figure 6-10 shows what that looks like.
这些是开发人员经常用到的

Figure 6-10.
图 6-10. 含过滤器的book列表页面

list_filter also works on fields of other types, not just DateField.
过滤器 同样适用于其它类型的字段，而不单是日期型 （请在布尔型 和外键 字段上试试）

(Try it with BooleanField and ForeignKey fields, for example.) The filters show up as long as there are at least 2 values to choose from.
当有两个以上值时，过滤器就会显示

Another way to offer date filters is to use the date_hierarchy admin option, like this:
另外一种过滤日期的方式是使用date_hierarchy选项，如：

With this in place, the change list page gets a date drill-down navigation bar at the top of the list, as shown in Figure 6-11.
修改好后，页面中的列表顶端会有一个逐层深入的导航条，效果如图 6-11. 它从可用的年份开始，然后逐层细分到月乃至日

Figure 6-11.
图 6-11. 含date_hierarchy的book列表页面

Note that date_hierarchy takes a string, not a tuple, because only one date field can be used to make the hierarchy.
请注意，date_hierarchy接受的是字符串 ，而不是元组

Finally, let’s change the default ordering so that books on the change list page are always ordered descending by their publication date.
最后，让我们改变默认的排序方式，按publication date降序排列

By default, the change list orders objects according to their model’s ordering within class Meta (which we covered in Chapter 5) – but you haven’t specified this ordering value, then the ordering is undefined.
 列表页面默认按照模块class Meta（详见第五章）中的ordering所指的列排序

This admin ordering option works exactly as the ordering in models’ class Meta, except that it only uses the first field name in the list.
这个ordering选项基本像模块中class Meta的ordering那样工作，除了它只用列表中的第一个字段名

Just pass a list or tuple of field names, and add a minus sign to a field to use descending sort order.
 如果要实现降序，仅需在传入的列表或元组的字段前加上一个减号(-)

Reload the book change list to see this in action.
刷新book列表页面观看实际效果

Note that the “Publication date” header now includes a small arrow that indicates which way the records are sorted.
 注意Publication date列头现在有一个小箭头显示排序

(See Figure 6-12.)
 （见图 6-12.）

Figure 6-12.
图 6-12 含排序的book列表页面

We’ve covered the main change list options here.
我们已经学习了主要的选项

Using these options, you can make a very powerful, production-ready data-editing interface with only a few lines of code.
 通过使用它们，你可以仅需几行代码就能创建一个功能强大、随时上线的数据编辑界面

Just as the change list can be customized, edit forms can be customized in many ways.
正如自定义列表那样，编辑表单多方面也能自定义

First, let’s customize the way fields are ordered.
首先，我们先自定义字段顺序

By default, the order of fields in an edit form corresponds to the order they’re defined in the model.
 默认地，表单中的字段顺序是与模块中定义是一致的

We can change that using the fields option in our ModelAdmin subclass:
 我们可以通过使用ModelAdmin子类中的fields选项来改变它：

After this change, the edit form for books will use the given ordering for fields.
完成之后，编辑表单将按照指定的顺序显示各字段

It’s slightly more natural to have the authors after the book title.
 它看起来自然多了——作者排在书名之后

Of course, the field order should depend on your data-entry workflow.
 字段顺序当然是与数据条目录入顺序有关， 每个表单都不一样

Another useful thing the fields option lets you do is to exclude certain fields from being edited entirely.
通过fields这个选项，你可以排除一些不想被其他人编辑的fields 只要不选上不想被编辑的field(s)即可

Just leave out the field(s) you want to exclude.
 当你的admi用户只是被信任可以更改你的某一部分数据时，或者，你的数据被一些外部的程序自动处理而改变了了，你就可以用这个功能

You might use this if your admin users are only trusted to edit a certain segment of your data, or if part of your fields are changed by some outside, automated process.
 例如，在book数据库中，我们可以隐藏publication_date，以防止它被编辑

As a result, the edit form for books doesn’t offer a way to specify the publication date.
这样，在编辑页面就无法对publication date进行改动

This could be useful, say, if you’re an editor who prefers that his authors not push back publication dates.
 如果你是一个编辑，不希望作者推迟出版日期的话，这个功能就很有用

(This is purely a hypothetical example, of course.)
 （当然，这纯粹是一个假设的例子

When a user uses this incomplete form to add a new book, Django will simply set the publication_date to None – so make sure that field has null=True.
当一个用户用这个不包含完整信息的表单添加一本新书时，Django会简单地将publication_date设置为None，以确保这个字段满足null=True的条件

Another commonly used edit-form customization has to do with many-to-many fields.
另一个常用的编辑页面自定义是针对多对多字段的

As we’ve seen on the edit form for books, the admin site represents each ManyToManyField as a multiple-select boxes, which is the most logical HTML input widget to use – but multiple-select boxes can be difficult to use.
 真如我们在book编辑页面看到的那样，多对多字段 被展现成多选框

If you want to select multiple items, you have to hold down the control key, or command on a Mac, to do so.
虽然多选框在逻辑上是最适合的HTML控件，但它却不那么好用

The admin site helpfully inserts a bit of text that explains this, but, still, it gets unwieldy when your field contains hundreds of options.
 如果你想选择多项，你必须还要按下Ctrl键（苹果机是command键）

The admin site’s solution is filter_horizontal.
更好的办法是使用filter_horizontal

Let’s add that to BookAdmin and see what it does.
让我们把它添加到BookAdmin中，然后看看它的效果

(If you’re following along, note that we’ve also removed the fields option to restore all the fields in the edit form.)
（如果你一着跟着做练习，请注意移除fields选项，以使得编辑页面包含所有字段

Reload the edit form for books, and you’ll see that the “Authors” section now uses a fancy JavaScript filter interface that lets you search through the options dynamically and move specific authors from “Available authors” to the “Chosen authors” box, and vice versa.
刷新book编辑页面，你会看到Author区中有一个精巧的JavaScript过滤器，它允许你检索选项，然后将选中的authors从Available框移到Chosen框，还可以移回来

Figure 6-13.
图 6-13. 含filter_horizontal的book编辑页面

We’d highly recommend using filter_horizontal for any ManyToManyField that has more than 10 items.
我们强烈建议针对那些拥有十个以上选项的多对多字段 使用filter_horizontal

It’s far easier to use than a simple multiple-select widget.
 这比多选框好用多了

Also, note you can use filter_horizontal for multiple fields – just specify each name in the tuple.
 你可以在多个字段上使用filter_horizontal，只需在这个元组中指定每个字段的名字

ModelAdmin classes also support a filter_vertical option.
ModelAdmin类还支持filter_vertical选项

This works exactly as filter_horizontal, but the resulting JavaScript interface stacks the two boxes vertically instead of horizontally.
 它像filter_horizontal那样工作，除了控件都是垂直排列，而不是水平排列的

It’s a matter of personal taste.
 至于使用哪个，只是个人喜好问题

filter_horizontal and filter_vertical only work on ManyToManyField fields, not ForeignKey fields.
filter_horizontal和filter_vertical选项只能用在多对多字段 上, 而不能用于 ForeignKey字段

By default, the admin site uses simple  boxes for ForeignKey fields, but, as for ManyToManyField, sometimes you don’t want to incur the overhead of having to select all the related objects to display in the drop-down.
 默认地，管理工具使用下拉框 来展现外键 字段

For example, if our book database grows to include thousands of publishers, the “Add book” form could take a while to load, because it would have to load every publisher for display in the  box.
但是，正如多对多字段 那样，有时候你不想忍受因装载并显示这些选项而产生的大量开销

The way to fix this is to use an option called raw_id_fields.
解决这个问题的办法是使用raw_id_fields 选项

Set this to a tuple of ForeignKey field names, and those fields will be displayed in the admin with a simple text input box (<input type="text">) instead of a .
它是一个包含外键字段名称的元组，它包含的字段将被展现成文本框 ，而不再是下拉框 

See Figure 6-14.
见图 6-14

Figure 6-14.
图 6-14. 含raw_id_fields的book编辑页面

What do you enter in this input box?
在这个输入框中，你输入什么呢

The database ID of the publisher.
 publisher的数据库ID号

Given that humans don’t normally memorize database IDs, there’s also a magnifying-glass icon that you can click to pull up a pop-up window, from which you can select the publisher to add.
 考虑到人们通常不会记住这些数据库ID，管理工具提供了一个放大镜图标方便你输入

Users, Groups, and Permissions¶
用户、用户组和权限

Because you’re logged in as a superuser, you have access to create, edit, and delete any object.
因为你是用超级用户登录的，你可以创建，编辑和删除任何对像

Naturally, different environments require different permission systems – not everybody can or should be a superuser.
 然而，不同的环境要求有不同的权限，系统不允许所有人都是超级用户

Django’s admin site uses a permissions system that you can use to give specific users access only to the portions of the interface that they need.
 管理工具有一个用户权限系统，通过它你可以根据用户的需要来指定他们的权限，从而达到部分访问系统的目的

These user accounts are meant to be generic enough to be used outside of the admin interface, but we’ll just treat them as admin user accounts for now.
用户帐号应该是通用的、独立于管理界面以外仍可以使用

In Chapter 14, we’ll cover how to integrate user accounts with the rest of your site (i.e., not just the admin site).
但我们现在把它看作是管理界面的一部分

You can edit users and permissions through the admin interface just like any other object.
你通过管理界面编辑用户及其许可就像你编辑别的对象一样

We saw this earlier in this chapter, when we played around with the User and Group sections of the admin.
 我们在本章的前面，浏览用户和用户组区域的时候已经见过这些了

User objects have the standard username, password, e-mail and real name fields you might expect, along with a set of fields that define what the user is allowed to do in the admin interface.
 如你所想，用户对象有标准的用户名、密码、邮箱地址和真实姓名，同时它还有关于使用管理界面的权限定义

First, there’s a set of three boolean flags:
 首先，这有一组三个布尔型标记：

The “active” flag controls whether the user is active at all.
活动标志，它用来控制用户是否已经激活

If this flag is off and the user tries to log in, he won’t be allowed in, even with a valid password.
 如果一个用户帐号的这个标记是关闭状态，而用户又尝试用它登录时，即使密码正确，他也无法登录系统

The “staff” flag controls whether the user is allowed to log in to the admin interface (i.e., whether that user is considered a “staff member” in your organization).
成员标志，它用来控制这个用户是否可以登录管理界面（即：这个用户是不是你们组织里的成员） 由于用户系统可以被用于控制公众页面（即：非管理页面）的访问权限（详见第十四章），这个标志可用来区分公众用户和管理用户

The “superuser” flag gives the user full access to add, create and delete any item in the admin interface.
超级用户标志，它赋予用户在管理界面中添加、修改和删除任何项目的权限

If a user has this flag set, then all regular permissions (or lack thereof) are ignored for that user.
 如果一个用户帐号有这个标志，那么所有权限设置（即使没有）都会被忽略

“Normal” admin users – that is, active, non-superuser staff members – are granted admin access through assigned permissions.
普通的活跃，非超级用户的管理用户可以根据一套设定好的许可进入

Each object editable through the admin interface (e.g., books, authors, publishers) has three permissions: a create permission, an edit permission and a delete permission.
 管理界面中每种可编辑的对象（如：books、authors、publishers）都有三种权限： 创建 许可， 编辑 许可和 删除 许可

Assigning permissions to a user grants the user access to do what is described by those permissions.
 给一个用户授权许可也就表明该用户可以进行许可描述的操作

When you create a user, that user has no permissions, and it’s up to you to give the user specific permissions.
当你创建一个用户时，它没有任何权限，该有什么权限是由你决定的

For example, you can give a user permission to add and change publishers, but not permission to delete them.
 例如，你可以给一个用户添加和修改publishers的权限，而不给他删除的权限

Note that these permissions are defined per-model, not per-object – so they let you say “John can make changes to any book,” but they don’t let you say “John can make changes to any book published by Apress.” The latter functionality, per-object permissions, is a bit more complicated and is outside the scope of this book but is covered in the Django documentation.
 请注意，这些权限是定义在模块级别上，而不是对象级别上的

Note
注释

Access to edit users and permissions is also controlled by this permission system.
权限管理系统也控制编辑用户和权限

If you give someone permission to edit users, she will be able to edit her own permissions, which might not be what you want!
 如果你给某人编辑用户的权限，他可以编辑自己的权限，这种能力可能不是你希望的

Giving a user permission to edit users is essentially turning a user into a superuser.
 赋予一个用户修改用户的权限，本质上说就是把他变成一个超级用户

You can also assign users to groups.
你也可以给组中分配用户

A group is simply a set of permissions to apply to all members of that group.
 一个 组 简化了给组中所有成员应用一套许可的动作

Groups are useful for granting identical permissions to a subset of users.
 组在给大量用户特定权限的时候很有用

When and Why to Use the Admin Interface – And When Not to¶
何时、为什么使用管理界面

After having worked through this chapter, you should have a good idea of how to use Django’s admin site.
经过这一章的学习，你应该对Django管理工具有所认识

But we want to make a point of covering when and why you might want to use it – and when not to use it.
 但是我们需要表明一个观点：什么时候 、为什么 用，以及什么时候又不 用

Django’s admin site especially shines when nontechnical users need to be able to enter data;
Django的管理界面对非技术用户要输入他们的数据时特别有用

that’s the purpose behind the feature, after all.
事实上这个特性就是专门为这个 实现的

At the newspaper where Django was first developed, development of a typical online feature – say, a special report on water quality in the municipal supply – would go something like this:
 在Django最开始开发的新闻报道的行业应用中，有一个典型的在线自来水的水质专题报道 应用，它的实现流程是这样的：

 The reporter responsible for the project meets with one of the developers and describes the available data.
负责这个报道的记者和要处理数据的开发者碰头，提供一些数据给开发者

The developer designs Django models to fit this data and then opens up the admin site to the reporter.
开发者围绕这些数据设计模型然后配置一个管理界面给记者

The reporter inspects the admin site to point out any missing or extraneous fields – better now than later.
记者检查管理界面，尽早指出缺少或多余的字段

The developer changes the models iteratively.
 开发者来回地修改模块

When the models are agreed upon, the reporter begins entering data using the admin site.
当模块认可后，记者就开始用管理界面输入数据

At the same time, the programmer can focus on developing the publicly accessible views/templates (the fun part!).
 同时，程序员可以专注于开发公众访问视图和模板（有趣的部分）

In other words, the raison d’être of Django’s admin interface is facilitating the simultaneous work of content producers and programmers.
换句话说，Django的管理界面为内容输入人员和编程人员都提供了便利的工具

However, beyond these obvious data entry tasks, the admin site is useful in a few other cases:
当然，除了数据输入方面，我们发现管理界面在下面这些情景中也是很有用的：

Inspecting data models: Once you’ve defined a few models, it can be quite useful to call them up in the admin interface and enter some dummy data.
检查模块 ：当你定义好了若干个模块，在管理页面中把他们调出来然后输入一些虚假的数据，这是相当有用的

In some cases, this might reveal data-modeling mistakes or other problems with your models.
 有时候，它能显示数据建模的错误或者模块中其它问题

Managing acquired data: For applications that rely on data coming from external sources (e.g., users or Web crawlers), the admin site gives you an easy way to inspect or edit this data.
管理既得数据 ：如果你的应用程序依赖外部数据（来自用户输入或网络爬虫），管理界面提供了一个便捷的途径，让你检查和编辑那些数据

You can think of it as a less powerful, but more convenient, version of your database’s command-line utility.
 你可以把它看作是一个功能不那么强大，但是很方便的数据库命令行工具

Quick and dirty data-management apps: You can use the admin site to build yourself a very lightweight data management app – say, to keep track of expenses.
临时的数据管理程序 ：你可以用管理工具建立自己的轻量级数据管理程序，比如说开销记录

If you’re just building something for your own needs, not for public consumption, the admin site can take you a long way.
 如果你正在根据自己的，而不是公众的需要开发些什么，那么管理界面可以带给你很大的帮助

In this sense, you can think of it as a beefed up, relational version of a spreadsheet.
 从这个意义上讲，你可以把它看作是一个增强的关系型电子表格

One final point we want to make clear is: the admin site is not an end-all-be-all.
最后一点要澄清的是： 管理界面不是终结者

Over the years, we’ve seen it hacked and chopped up to serve a variety of functions it wasn’t intended to serve.
 过往许多年间，我们看到它被拆分、修改成若干个功能模块，而这些功能不是它所支持的

It’s not intended to be a public interface to data, nor is it intended to allow for sophisticated sorting and searching of your data.
 它不应成为一个公众 数据访问接口，也不应允许对你的数据进行复杂的排序和查询

As we said early in this chapter, it’s for trusted site administrators.
 正如本章开头所说，它仅提供给可信任的管理员

Keeping this sweet spot in mind is the key to effective admin-site usage.
 请记住这一点，它是有效使用管理界面的钥匙

What’s Next?¶
下一章

So far we’ve created a few models and configured a top-notch interface for editing data.
到现在，我们已经创建了一些模块，并且为编辑数据配置了一个优秀的界面

In the next chapter, we’ll move on to the real “meat and potatoes” of Web development: form creation and processing.
 下一章，我们将转入到网站开发中最重要的部分： 表单的创建和处理

© Copyright 2012, Matt Behrens.
www.shoucewang.com. All Rights Reserved. 手册网 版权所有

