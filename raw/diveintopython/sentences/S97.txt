Dive Into Python
深入 Python :Dive Into Python 中文版

Python from novice to pro
Python 从新手到专家 [Dip_5.4b_CPyUG_Release]

Find: 
Find: 

15.2. Handling changing requirements
15.2. 应对需求变化

Despite your best efforts to pin your customers to the ground and extract exact requirements from them on pain of horrible nasty things involving scissors and hot wax, requirements will change.
尽管你竭尽努力地分析你的客户，并点灯熬油地提炼出精确的需求，但需求还是会是不断变化

Most customers don't know what they want until they see it, and even if they do, they aren't that good at articulating what they want precisely enough to be useful.
大部分客户在看到产品前不知道他们想要什么

And even if they do, they'll want more in the next release anyway.
即便知道，也不擅于精确表述出他们的有效需求

So be prepared to update your test cases as requirements change.
即便能表述出来，他们在下一个版本一定会要求更多的功能

Suppose, for instance, that you wanted to expand the range of the Roman numeral conversion functions.
假设你想要扩展罗马数字转换函数的范围

Remember the rule that said that no character could be repeated more than three times?
还记得没有哪个字符可以重复三遍以上这条规则吗

Well, the Romans were willing to make an exception to that rule by having 4 M characters in a row to represent 4000.
呃，现在罗马人希望给这条规则来个例外，用连续出现 4 个 M 字符来表示 4000

If you make this change, you'll be able to expand the range of convertible numbers from 1..3999 to 1..4999.
如果这样改了，你就可以把转换范围从 1..3999 扩展到 1..4999

But first, you need to make some changes to the test cases.
但你先要对测试用例进行修改

This file is available in py/roman/stage7/ in the examples directory.
这个文件可以在例子目录下的 py/roman/stage7/ 目录中找到

If you have not already done so, you can download this and other examples used in this book.
如果您还没有下载本书附带的样例程序, 可以 下载本程序和其他样例程序

Now your test cases are up to date with the new requirements, but your code is not, so you expect several of the test cases to fail.
现在你的测试用例和新需求保持一致了，但是你的程序代码还没有，因此几个测试用例的失败是意料之中的事

Now that you have test cases that fail due to the new requirements, you can think about fixing the code to bring it in line with the test cases.
既然新的需求导致了测试用例的失败，你该考虑修改代码以便它能再次通过测试用例

(One thing that takes some getting used to when you first start coding unit tests is that the code being tested is never “ahead” of the test cases.
(在你开始编写单元测试时要习惯一件事：被测试代码永远不会在编写测试用例“之前”编写

While it's behind, you still have some work to do, and as soon as it catches up to the test cases, you stop coding.)
正因为如此，你还有一些工作要做，一旦可以通过所有的测试用例，停止编码

This file is available in py/roman/stage7/ in the examples directory.
这个文件可以在例子目录下的 py/roman/stage7/ 目录中找到

You may be skeptical that these two small changes are all that you need.
你可能会怀疑只需这两处小改动

Hey, don't take my word for it;
嘿，不相信我的话，你自己看看吧：

Comprehensive unit testing means never having to rely on a programmer who says “Trust me.”
全面的单元测试意味着不必依赖于程序员的一面之词：“相信我

Copyright © 2000, 2001, 2002, 2003, 2004 Mark Pilgrim
Copyright © 2000, 2001, 2002, 2003, 2004 Mark Pilgrim

