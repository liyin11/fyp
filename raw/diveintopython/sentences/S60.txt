Dive Into Python
深入 Python :Dive Into Python 中文版

Python from novice to pro
Python 从新手到专家 [Dip_5.4b_CPyUG_Release]

Find: 
Find: 

9.4. Unicode
9.4. Unicode

Unicode is a system to represent characters from all the world's different languages.
Unicode 是一个系统，用来表示世界上所有不同语言的字符

When Python parses an XML document, all data is stored in memory as unicode.
当 Python 解析一个 XML 文档时，所有的数据都是以unicode的形式保存在内存中的

You'll get to all that in a minute, but first, some background.
一会儿你就会了解，但首先，先看一些背景知识

Historical note. Before unicode, there were separate character encoding systems for each language, each using the same numbers (0-255) to represent that language's characters.
历史注解. 在 unicode 之前，对于每一种语言都存在独立的字符编码系统，每个系统都使用相同的数字(0-255)来表示这种语言的字符

Some languages (like Russian) have multiple conflicting standards about how to represent the same characters;
一些语言 (像俄语) 对于如何表示相同的字符还有几种有冲突的标准

other languages (like Japanese) have so many characters that they require multiple-byte character sets.
另一些语言 (像日语) 拥有太多的字符，需要多个字符集

Exchanging documents between systems was difficult because there was no way for a computer to tell for certain which character encoding scheme the document author had used;
在系统之间进行文档交流是困难的，因为对于一台计算机来说，没有方法可以识别出文档的作者使用了哪种编码模式

the computer only saw numbers, and the numbers could mean different things.
计算机看到的只是数字，并且这些数字可以表示不同的东西

Then think about trying to store these documents in the same place (like in the same database table);
接着考虑到试图将这些 (采用不同编码的) 文档存放到同一个地方 (比如在同一个数据库表中)

you would need to store the character encoding alongside each piece of text, and make sure to pass it around whenever you passed the text around.
你需要在每段文本的旁边保存字符的编码，并且确保在传递文本的同时将编码也进行传递

Then think about multilingual documents, with characters from multiple languages in the same document.
接着考虑多语言文档，即在同一文档中使用了不同语言的字符

(They typically used escape codes to switch modes;
(比较有代表性的是使用转义符来进行模式切换

poof, you're in Russian koi8-r mode, so character 241 means this;
噗，我们处于俄语 koi8-r 模式，所以字符 241 表示这个

poof, now you're in Mac Greek mode, so character 241 means something else.
噗，现在我们处于 Mac 希腊语模式，所以字符 241 表示其它什么

And so on.) These are the problems which unicode was designed to solve.
等等

To solve these problems, unicode represents each character as a 2-byte number, from 0 to 65535.[5] Each 2-byte number represents a unique character used in at least one of the world's languages.
为了解决这些问题，unicode 用一个 2 字节数字表示每个字符，从 0 到 65535

(Characters that are used in multiple languages have the same numeric code.) There is exactly 1 number per character, and exactly 1 character per number.
[8] 每个 2 字节数字表示至少在一种世界语言中使用的一个唯一字符

Unicode data is never ambiguous.
(在多种语言中都使用的字符具有相同的数字码

Of course, there is still the matter of all these legacy encoding systems.
当然，仍然还存在着所有那些遗留的编码系统的情况

-bit ASCII, for instance, which stores English characters as numbers ranging from 0 to 127.
例如，7 位 ASCII，它可以将英文字符存诸为从 0 到 127 的数值

(65 is capital “A”, 97 is lowercase “a”, and so forth.) English has a very simple alphabet, so it can be completely expressed in 7-bit ASCII.
(65 是大写字母 “A”，97 是小写字母 “a”，等等

Western European languages like French, Spanish, and German all use an encoding system called ISO-8859-1 (also called “latin-1”), which uses the 7-bit ASCII characters for the numbers 0 through 127, but then extends into the 128-255 range for characters like n-with-a-tilde-over-it (241), and u-with-two-dots-over-it (252).
) 英语有着非常简单的字母表，所以它可以完全用 7 位 ASCII 来表示

And unicode uses the same characters as 7-bit ASCII for 0 through 127, and the same characters as ISO-8859-1 for 128 through 255, and then extends from there into characters for other languages with the remaining numbers, 256 through 65535.
像法语、西班牙语和德语之类的西欧语言都使用叫做 ISO-8859-1 的编码系统 (也叫做“latin-1”)，它使用 7 位 ASCII 字符表示从 0 到 127 的数字，但接着扩展到了 128-255 的范围来表示像 n 上带有一个波浪线(241)，和 u 上带有两个点(252)的字符

When dealing with unicode data, you may at some point need to convert the data back into one of these other legacy encoding systems.
在处理 unicode 数据时，在某些地方你可能需要将数据转换回这些遗留编码系统之一

For instance, to integrate with some other computer system which expects its data in a specific 1-byte encoding scheme, or to print it to a non-unicode-aware terminal or printer.
例如，为了同其它一些计算机系统集成，这些系统期望它的数据使用一种特定的单字节编码模式，或将数据打印输出到一个不识别 unicode 的终端或打印机

Or to store it in an XML document which explicitly specifies the encoding scheme.
或将数据保存到一个明确指定编码模式的 XML 文档中

And on that note, let's get back to Python.
在了解这个注解之后，让我们回到 Python上来

Python has had unicode support throughout the language since version 2.0.
从 2.0 版开始，Python 整个语言都已经支持 unicode

The XML package uses unicode to store all parsed XML data, but you can use unicode anywhere.
XML 包使用 unicode 来保存所有解析了的 XML 数据，而且你可以在任何地方使用 unicode

Remember I said Python usually converted unicode to ASCII whenever it needed to make a regular string out of a unicode string?
还记得我说过：需要从一个 unicode 得到一个正常字符串时，Python 通常默认将 unicode 转换成 ASCII 吗

Well, this default encoding scheme is an option which you can customize.
嗯，这个默认编码模式是一个可以定制的选项

If you are going to be storing non-ASCII strings within your Python code, you'll need to specify the encoding of each individual .py file by putting an encoding declaration at the top of each file.
如果你打算在你的 Python 代码中保存非 ASCII 字符串，你需要在每个文件的顶端加入编码声明来指定每个 .py 文件的编码

This declaration defines the .py file to be UTF-8:
这个声明定义了 .py 文件的编码为 UTF-8：

Now, what about XML?
现在，想想 XML 中的编码应该是怎样的呢

Well, every XML document is in a specific encoding.
不错，每一个 XML 文档都有指定的编码

Again, ISO-8859-1 is a popular encoding for data in Western European languages.
重复一下，ISO-8859-1 是西欧语言存放数据的流行编码方式

KOI8-R is popular for Russian texts.
KOI8-R 是俄语流行的编码方式

The encoding, if specified, is in the header of the XML document.
编码――如果指定了的话――都在 XML 文档的首部

To sum up, unicode itself is a bit intimidating if you've never seen it before, but unicode data is really very easy to handle in Python.
总结一下，如果你以前从没有看到过 unicode，倒是有些唬人，但是在 Python 处理 unicode 数据真是非常容易

If your XML documents are all 7-bit ASCII (like the examples in this chapter), you will literally never think about unicode.
如果你的 XML 文档都是 7 位的 ASCII (像本章中的例子)，你差不多永远都不用考虑 unicode

Python will convert the ASCII data in the XML documents into unicode while parsing, and auto-coerce it back to ASCII whenever necessary, and you'll never even notice.
Python 在进行解析时会将 XML 文档中的 ASCII 数据转换为 unicode，在任何需要的时候强制转换回为 ASCII，你甚至永远都不用注意

But if you need to deal with that in other languages, Python is ready.
但是如果你要处理其它语言的数据，Python 已经准备好了

[5] This, sadly, is still an oversimplification.
[8] 这一点，很不幸仍然 过分简单了

Unicode now has been extended to handle ancient Chinese, Korean, and Japanese texts, which had so many different characters that the 2-byte unicode system could not represent them all.
现在 unicode 已经扩展用来处理古老的汉字、韩文和日文文本，它们有太多不同的字符，以至于 2 字节的 unicode 系统不能全部表示

But Python doesn't currently support that out of the box, and I don't know if there is a project afoot to add it.
但当前 Python 不支持超出范围的编码，并且我不知道是否有正在计划进行解决的项目

You've reached the limits of my expertise, sorry.
对不起，你已经到了我经验的极限了

Copyright © 2000, 2001, 2002, 2003, 2004 Mark Pilgrim
Copyright © 2000, 2001, 2002, 2003, 2004 Mark Pilgrim

