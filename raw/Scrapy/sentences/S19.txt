Debugging Spiders¶
调试(Debugging)Spiders¶

This document explains the most common techniques for debugging spiders.
本篇介绍了调试spider的常用技术

Consider the following scrapy spider below:
 考虑下面的spider:

Basically this is a simple spider which parses two pages of items (the start_urls).
简单地说，该spider分析了两个包含item的页面(start_urls)

Items also have a details page with additional information, so we use the meta functionality of Request to pass a partially populated item.
Item有详情页面， 所以我们使用 Request 的 meta 功能来传递已经部分获取的item

Parse Command¶
Parse命令¶

The most basic way of checking the output of your spider is to use the parse command.
检查spier输出的最基本方法是使用 parse 命令

It allows to check the behaviour of different parts of the spider at the method level.
这能让你在函数层(method level)上检查spider 各个部分的效果

It has the advantage of being flexible and simple to use, but does not allow debugging code inside a method.
其十分灵活并且易用，不过不能在代码中调试

In order to see the item scraped from a specific url:
查看特定url爬取到的item:

Using the --verbose or -v option we can see the status at each depth level:
使用 --verbose 或 -v 选项，查看各个层次的状态:

Checking items scraped from a single start_url, can also be easily achieved using:
检查从单个start_url爬取到的item也是很简单的:

Scrapy Shell¶
Scrapy终端(Shell)¶

While the parse command is very useful for checking behaviour of a spider, it is of little help to check what happens inside a callback, besides showing the response received and the output.
尽管 parse 命令对检查spider的效果十分有用，但除了显示收到的response及输出外， 其对检查回调函数内部的过程并没有提供什么便利

How to debug the situation when parse_details sometimes receives no item?
 如何调试 parse_detail 没有收到item的情况呢

Fortunately, the shell is your bread and butter in this case (see Invoking the shell from spiders to inspect responses):
幸运的是，救世主 shell 出现了(参考 在spider中启动shell来查看response):

See also: Invoking the shell from spiders to inspect responses.
参考 在spider中启动shell来查看response 

Open in browser¶
在浏览器中打开¶

Sometimes you just want to see how a certain response looks in a browser, you can use the open_in_browser function for that.
有时候您想查看某个response在浏览器中显示的效果，这是可以使用 open_in_browser 功能

Here is an example of how you would use it:
下面是使用的例子:

open_in_browser will open a browser with the response received by Scrapy at that point, adjusting the base tag so that images and styles are displayed properly.
open_in_browser 将会使用Scrapy获取到的response来打开浏览器，并且调整 base tag 使得图片及样式(style)能正常显示

Logging¶
Logging¶

Logging is another useful option for getting information about your spider run.
记录(logging)是另一个获取到spider运行信息的方法

Although not as convenient, it comes with the advantage that the logs will be available in all future runs should they be necessary again:
虽然不是那么方便， 但好处是log的内容在以后的运行中也可以看到:

For more information, check the Logging section.
更多内容请参见 Logging 部分

