Items¶
Items¶

The main goal in scraping is to extract structured data from unstructured sources, typically, web pages.
爬取的主要目标就是从非结构性的数据源提取结构性数据，例如网页

Scrapy spiders can return the extracted data as Python dicts.
 Scrapy提供 Item 类来满足这样的需求

To define common output data format Scrapy provides the Item class.
Item 对象是种简单的容器，保存了爬取到得数据

Item objects are simple containers used to collect the scraped data.
 其提供了 类似于词典(dictionary-like) 的API以及用于声明可用字段的简单语法

Declaring Items¶
声明Item¶

Items are declared using a simple class definition syntax and Field objects.
Item使用简单的class定义语法以及 Field 对象来声明

Here is an example:
例如:

Note
注解

Those familiar with Django will notice that Scrapy Items are declared similar to Django Models, except that Scrapy Items are much simpler as there is no concept of different field types.
熟悉 Django 的朋友一定会注意到Scrapy Item定义方式与 Django Models 很类似, 不过没有那么多不同的字段类型(Field type)，更为简单

Item Fields¶
Item字段(Item Fields)¶

Field objects are used to specify metadata for each field.
Field 对象指明了每个字段的元数据(metadata)

For example, the serializer function for the last_updated field illustrated in the example above.
例如下面例子中 last_updated 中指明了该字段的序列化函数

You can specify any kind of metadata for each field.
您可以为每个字段指明任何类型的元数据

There is no restriction on the values accepted by Field objects.
 Field 对象对接受的值没有任何限制

For this same reason, there is no reference list of all available metadata keys.
也正是因为这个原因，文档也无法提供所有可用的元数据的键(key)参考列表

Each key defined in Field objects could be used by a different component, and only those components know about it.
 Field 对象中保存的每个键可以由多个组件使用，并且只有这些组件知道这个键的存在

You can also define and use any other Field key in your project too, for your own needs.
您可以根据自己的需求，定义使用其他的 Field 键

The main goal of Field objects is to provide a way to define all field metadata in one place.
 设置 Field 对象的主要目的就是在一个地方定义好所有的元数据

Typically, those components whose behaviour depends on each field use certain field keys to configure that behaviour.
 一般来说，那些依赖某个字段的组件肯定使用了特定的键(key)

You must refer to their documentation to see which metadata keys are used by each component.
您必须查看组件相关的文档，查看其用了哪些元数据键(metadata key)

It’s important to note that the Field objects used to declare the item do not stay assigned as class attributes.
需要注意的是，用来声明item的 Field 对象并没有被赋值为class的属性

Instead, they can be accessed through the Item.fields attribute.
 不过您可以通过 Item.fields 属性进行访问

Working with Items¶
与Item配合¶

Here are some examples of common tasks performed with items, using the Product item declared above.
接下来以 下边声明 的 Product item来演示一些item的操作

You will notice the API is very similar to the dict API.
您会发现API和 dict API 非常相似

Creating items¶
创建item¶

Getting field values¶
获取字段的值¶

Setting field values¶
设置字段的值¶

Accessing all populated values¶
获取所有获取到的值¶

To access all populated values, just use the typical dict API:
您可以使用 dict API 来获取所有的值:

Other common tasks¶
其他任务¶

Copying items:
复制item:

Creating dicts from items:
根据item创建字典(dict):

Creating items from dicts:
根据字典(dict)创建item:

Extending Items¶
扩展Item¶

You can extend Items (to add more fields or to change some metadata for some fields) by declaring a subclass of your original Item.
您可以通过继承原始的Item来扩展item(添加更多的字段或者修改某些字段的元数据)

For example:
例如:

You can also extend field metadata by using the previous field metadata and appending more values, or changing existing values, like this:
您也可以通过使用原字段的元数据,添加新的值或修改原来的值来扩展字段的元数据:

That adds (or replaces) the serializer metadata key for the name field, keeping all the previously existing metadata values.
这段代码在保留所有原来的元数据值的情况下添加(或者覆盖)了 name 字段的 serializer 

Item objects¶
Item对象¶

Return a new Item optionally initialized from the given argument.
返回一个根据给定的参数可选初始化的item

Items replicate the standard dict API, including its constructor.
Item复制了标准的 dict API 

The only additional attribute provided by Items is:
包括初始化函数也相同

A dictionary containing all declared fields for this Item, not only those populated.
一个包含了item所有声明的字段的字典，而不仅仅是获取到的字段

The keys are the field names and the values are the Field objects used in the Item declaration.
该字典的key是字段(field)的名字，值是 Item声明 中使用到的 Field 对象

Field objects¶
字段(Field)对象¶

The Field class is just an alias to the built-in dict class and doesn’t provide any extra functionality or attributes.
Field 仅仅是内置的 dict 类的一个别名，并没有提供额外的方法或者属性

In other words, Field objects are plain-old Python dicts.
换句话说， Field 对象完完全全就是Python字典(dict)

A separate class is used to support the item declaration syntax based on class attributes.
被用来基于类属性(class attribute)的方法来支持 item声明语法 

© Copyright 2008-2016, Scrapy developers.
© 版权所有 2008-2014, written by Scrapy developers, translated by Summer&Friends. Revision 5ed032cf.

