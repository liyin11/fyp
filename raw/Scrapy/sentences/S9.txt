Item Loaders¶
Item Loaders¶

Item Loaders provide a convenient mechanism for populating scraped Items.
Item Loaders提供了一种便捷的方式填充抓取到的 :Items 

Even though Items can be populated using their own dictionary-like API, Item Loaders provide a much more convenient API for populating them from a scraping process, by automating some common tasks like parsing the raw extracted data before assigning it.
 虽然Items可以使用自带的类字典形式API填充，但是Items Loaders提供了更便捷的API， 可以分析原始数据并对Item进行赋值

In other words, Items provide the container of scraped data, while Item Loaders provide the mechanism for populating that container.
从另一方面来说， Items 提供保存抓取数据的 容器 ， 而 Item Loaders提供的是 填充 容器的机制

Item Loaders are designed to provide a flexible, efficient and easy mechanism for extending and overriding different field parsing rules, either by spider, or by source format (HTML, XML, etc) without becoming a nightmare to maintain.
Item Loaders提供的是一种灵活，高效的机制，可以更方便的被spider或source format (HTML, XML, etc)扩展，并override更易于维护的、不同的内容分析规则

Using Item Loaders to populate items¶
Using Item Loaders to populate items¶

To use an Item Loader, you must first instantiate it.
要使用Item Loader, 你必须先将它实例化. 你可以使用类似字典的对象(例如: Item or dict)来进行实例化, 或者不使用对象也可以, 当不用对象进行实例化的时候,Item会自动使用 ItemLoader.default_item_class 属性中指定的Item 类在Item Loader constructor中实例化.

Then, you start collecting values into the Item Loader, typically using Selectors.
然后,你开始收集数值到Item Loader时,通常使用 Selectors. 你可以在同一个item field 里面添加多个数值;Item Loader将知道如何用合适的处理函数来“添加”这些数值.

Here is a typical Item Loader usage in a Spider, using the Product item declared in the Items chapter:
下面是在 Spider 中典型的Item Loader的用法, 使用 Items chapter 中声明的 Product item:

By quickly looking at that code, we can see the name field is being extracted from two different XPath locations in the page:
快速查看这些代码之后,我们可以看到发现 name 字段被从页面中两个不同的XPath位置提取:

In other words, data is being collected by extracting it from two XPath locations, using the add_xpath() method.
换言之,数据通过用 add_xpath() 的方法,把从两个不同的XPath位置提取的数据收集起来. 这是将在以后分配给 name 字段中的数据｡

Afterwards, similar calls are used for price and stock fields (the latter using a CSS selector with the add_css() method), and finally the last_update field is populated directly with a literal value (today) using a different method: add_value().
之后,类似的请求被用于 price 和 stock 字段 (后者使用 CSS selector 和 add_css() 方法), 最后使用不同的方法 add_value() 对 last_update 填充文本值( today ).

Finally, when all data is collected, the ItemLoader.load_item() method is called which actually returns the item populated with the data previously extracted and collected with the add_xpath(), add_css(), and add_value() calls.
最终, 当所有数据被收集起来之后, 调用 ItemLoader.load_item() 方法, 实际上填充并且返回了之前通过调用 add_xpath(), add_css(), and add_value() 所提取和收集到的数据的Item.

Input and Output processors¶
Input and Output processors¶

An Item Loader contains one input processor and one output processor for each (item) field.
Item Loader在每个(Item)字段中都包含了一个输入处理器和一个输出处理器｡ 输入处理器收到数据时立刻提取数据 (通过 add_xpath(), add_css() 或者 add_value() 方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内. 收集到所有的数据后, 调用 ItemLoader.load_item() 方法来填充,并得到填充后的 Item 对象. 这是当输出处理器被和之前收集到的数据(和用输入处理器处理的)被调用.输出处理器的结果是被分配到Item的最终值｡

Let’s see an example to illustrate how the input and output processors are called for a particular field (the same applies for any other field):
让我们看一个例子来说明如何输入和输出处理器被一个特定的字段调用(同样适用于其他field)::

So what happens is:
发生了这些事情:

It’s worth noticing that processors are just callable objects, which are called with the data to be parsed, and return a parsed value.
需要注意的是，输入和输出处理器都是可调用对象，调用时传入需要被分析的数据， 处理后返回分析得到的值

So you can use any function as input or output processor.
因此你可以使用任意函数作为输入、输出处理器

The only requirement is that they must accept one (and only one) positional argument, which will be an iterator.
 唯一需注意的是它们必须接收一个（并且只是一个）迭代器性质的positional参数

Note
注解

Both input and output processors must receive an iterator as their first argument.
Both input and output processors must receive an iterator as their first argument. The output of those functions can be anything. The result of input processors will be appended to an internal list (in the Loader) containing the collected values (for that field). The result of the output processors is the value that will be finally assigned to the item.

The other thing you need to keep in mind is that the values returned by input processors are collected internally (in lists) and then passed to output processors to populate the fields.
The other thing you need to keep in mind is that the values returned by input processors are collected internally (in lists) and then passed to output processors to populate the fields.

Last, but not least, Scrapy comes with some commonly used processors built-in for convenience.
Last, but not least, Scrapy comes with some commonly used processors built-in for convenience.

Declaring Item Loaders¶
Declaring Item Loaders¶

Item Loaders are declared like Items, by using a class definition syntax.
Item Loaders are declared like Items, by using a class definition syntax. Here is an example:

As you can see, input processors are declared using the _in suffix while output processors are declared using the _out suffix.
As you can see, input processors are declared using the _in suffix while output processors are declared using the _out suffix. And you can also declare a default input/output processors using the ItemLoader.default_input_processor and ItemLoader.default_output_processor attributes.

Declaring Input and Output Processors¶
Declaring Input and Output Processors¶

As seen in the previous section, input and output processors can be declared in the Item Loader definition, and it’s very common to declare input processors this way.
As seen in the previous section, input and output processors can be declared in the Item Loader definition, and it’s very common to declare input processors this way. However, there is one more place where you can specify the input and output processors to use: in the Item Field metadata. Here is an example:

The precedence order, for both input and output processors, is as follows:
The precedence order, for both input and output processors, is as follows:

See also: Reusing and extending Item Loaders.
See also: Reusing and extending Item Loaders.

Item Loader Context¶
Item Loader Context¶

The Item Loader Context is a dict of arbitrary key/values which is shared among all input and output processors in the Item Loader.
The Item Loader Context is a dict of arbitrary key/values which is shared among all input and output processors in the Item Loader. It can be passed when declaring, instantiating or using Item Loader. They are used to modify the behaviour of the input/output processors.

For example, suppose you have a function parse_length which receives a text value and extracts a length from it:
For example, suppose you have a function parse_length which receives a text value and extracts a length from it:

By accepting a loader_context argument the function is explicitly telling the Item Loader that it’s able to receive an Item Loader context, so the Item Loader passes the currently active context when calling it, and the processor function (parse_length in this case) can thus use them.
By accepting a loader_context argument the function is explicitly telling the Item Loader that it’s able to receive an Item Loader context, so the Item Loader passes the currently active context when calling it, and the processor function (parse_length in this case) can thus use them.

There are several ways to modify Item Loader context values:
There are several ways to modify Item Loader context values:

By modifying the currently active Item Loader context (context attribute):
By modifying the currently active Item Loader context (context attribute):

On Item Loader instantiation (the keyword arguments of Item Loader constructor are stored in the Item Loader context):
On Item Loader instantiation (the keyword arguments of Item Loader constructor are stored in the Item Loader context):

On Item Loader declaration, for those input/output processors that support instantiating them with an Item Loader context.
On Item Loader declaration, for those input/output processors that support instantiating them with an Item Loader context. MapCompose is one of them:

ItemLoader objects¶
ItemLoader objects¶

Return a new Item Loader for populating the given Item.
Return a new Item Loader for populating the given Item. If no item is given, one is instantiated automatically using the class in default_item_class.

When instantiated with a selector or a response parameters the ItemLoader class provides convenient mechanisms for extracting data from web pages using selectors.
When instantiated with a selector or a response parameters the ItemLoader class provides convenient mechanisms for extracting data from web pages using selectors.

The item, selector, response and the remaining keyword arguments are assigned to the Loader context (accessible through the context attribute).
The item, selector, response and the remaining keyword arguments are assigned to the Loader context (accessible through the context attribute).

ItemLoader instances have the following methods:
ItemLoader instances have the following methods:

Process the given value by the given processors and keyword arguments.
Process the given value by the given processors and keyword arguments.

Available keyword arguments:
Available keyword arguments:

Examples:
Examples:

Process and then add the given value for the given field.
Process and then add the given value for the given field.

The value is first passed through get_value() by giving the processors and kwargs, and then passed through the field input processor and its result appended to the data collected for that field.
The value is first passed through get_value() by giving the processors and kwargs, and then passed through the field input processor and its result appended to the data collected for that field. If the field already contains collected data, the new data is added.

The given field_name can be None, in which case values for multiple fields may be added.
The given field_name can be None, in which case values for multiple fields may be added. And the processed value should be a dict with field_name mapped to values.

Examples:
Examples:

Similar to add_value() but replaces the collected data with the new value instead of adding it.
Similar to add_value() but replaces the collected data with the new value instead of adding it.

Similar to ItemLoader.get_value() but receives an XPath instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.
Similar to ItemLoader.get_value() but receives an XPath instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.

Examples:
Examples:

Similar to ItemLoader.add_value() but receives an XPath instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.
Similar to ItemLoader.add_value() but receives an XPath instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.

See get_xpath() for kwargs.
See get_xpath() for kwargs.

Examples:
Examples:

Similar to add_xpath() but replaces collected data instead of adding it.
Similar to add_xpath() but replaces collected data instead of adding it.

Similar to ItemLoader.get_value() but receives a CSS selector instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.
Similar to ItemLoader.get_value() but receives a CSS selector instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.

Examples:
Examples:

Similar to ItemLoader.add_value() but receives a CSS selector instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.
Similar to ItemLoader.add_value() but receives a CSS selector instead of a value, which is used to extract a list of unicode strings from the selector associated with this ItemLoader.

See get_css() for kwargs.
See get_css() for kwargs.

Examples:
Examples:

Similar to add_css() but replaces collected data instead of adding it.
Similar to add_css() but replaces collected data instead of adding it.

Populate the item with the data collected so far, and return it.
Populate the item with the data collected so far, and return it. The data collected is first passed through the output processors to get the final value to assign to each item field.

Create a nested loader with an xpath selector.
Return the collected values for the given field.

Create a nested loader with a css selector.
Return the collected values parsed using the output processor, for the given field. This method doesn’t populate or modify the item at all.

Return the collected values for the given field.
Return the input processor for the given field.

Return the collected values parsed using the output processor, for the given field.
Return the output processor for the given field.

Return the input processor for the given field.
ItemLoader instances have the following attributes:

Return the output processor for the given field.
The Item object being parsed by this Item Loader.

ItemLoader instances have the following attributes:
The currently active Context of this Item Loader.

The Item object being parsed by this Item Loader.
An Item class (or factory), used to instantiate items when not given in the constructor.

The currently active Context of this Item Loader.
The default input processor to use for those fields which don’t specify one.

An Item class (or factory), used to instantiate items when not given in the constructor.
The default output processor to use for those fields which don’t specify one.

The default input processor to use for those fields which don’t specify one.
The class used to construct the selector of this ItemLoader, if only a response is given in the constructor. If a selector is given in the constructor this attribute is ignored. This attribute is sometimes overridden in subclasses.

The default output processor to use for those fields which don’t specify one.
The Selector object to extract data from. It’s either the selector given in the constructor or one created from the response given in the constructor using the default_selector_class. This attribute is meant to be read-only.

Example:
Item Loaders are designed to ease the maintenance burden of parsing rules, without losing flexibility and, at the same time, providing a convenient mechanism for extending and overriding them. For this reason Item Loaders support traditional Python class inheritance for dealing with differences of specific spiders (or groups of spiders).

Without nested loaders, you need to specify the full xpath (or css) for each value that you wish to extract.
Suppose, for example, that some particular site encloses their product names in three dashes (e.g. ---Plasma TV---) and you don’t want to end up scraping those dashes in the final product names.

Example:
Here’s how you can remove those dashes by reusing and extending the default Product Item Loader (ProductLoader):

Instead, you can create a nested loader with the footer selector and add values relative to the footer.
Another case where extending Item Loaders can be very helpful is when you have multiple source formats, for example XML and HTML. In the XML version you may want to remove CDATA occurrences. Here’s an example of how to do it:

Example:
And that’s how you typically extend input processors.

You can nest loaders arbitrarily and they work with either xpath or css selectors.
As for output processors, it is more common to declare them in the field metadata, as they usually depend only on the field and not on each specific site parsing rule (as input processors do). See also: Declaring Input and Output Processors.

Here’s how you can remove those dashes by reusing and extending the default Product Item Loader (ProductLoader):
Even though you can use any callable function as input and output processors, Scrapy provides some commonly used processors, which are described below. Some of them, like the MapCompose (which is typically used as input processor) compose the output of several functions executed in order, to produce the final parsed value.

Another case where extending Item Loaders can be very helpful is when you have multiple source formats, for example XML and HTML.
Here is a list of all built-in processors:

And that’s how you typically extend input processors.
The simplest processor, which doesn’t do anything. It returns the original values unchanged. It doesn’t receive any constructor arguments nor accepts Loader contexts.

As for output processors, it is more common to declare them in the field metadata, as they usually depend only on the field and not on each specific site parsing rule (as input processors do).
Example:

There are many other possible ways to extend, inherit and override your Item Loaders, and different Item Loaders hierarchies may fit better for different projects.
Returns the first non-null/non-empty value from the values received, so it’s typically used as an output processor to single-valued fields. It doesn’t receive any constructor arguments, nor accept Loader contexts.

Here is a list of all built-in processors:
Returns the values joined with the separator given in the constructor, which defaults to u' '. It doesn’t accept Loader contexts.

The simplest processor, which doesn’t do anything.
When using the default separator, this processor is equivalent to the function: u' '.join

Example:
Examples:

Returns the first non-null/non-empty value from the values received, so it’s typically used as an output processor to single-valued fields.
A processor which is constructed from the composition of the given functions. This means that each input value of this processor is passed to the first function, and the result of that function is passed to the second function, and so on, until the last function returns the output value of this processor.

Example:
By default, stop process on None value. This behaviour can be changed by passing keyword argument stop_on_none=False.

Returns the values joined with the separator given in the constructor, which defaults to u' '.
Example:

When using the default separator, this processor is equivalent to the function: u' '.join
Each function can optionally receive a loader_context parameter. For those which do, this processor will pass the currently active Loader context through that parameter.

Examples:
The keyword arguments passed in the constructor are used as the default Loader context values passed to each function call. However, the final Loader context values passed to functions are overridden with the currently active Loader context accessible through the ItemLoader.context() attribute.

A processor which is constructed from the composition of the given functions.
A processor which is constructed from the composition of the given functions, similar to the Compose processor. The difference with this processor is the way internal results are passed among functions, which is as follows:

By default, stop process on None value.
The input value of this processor is iterated and the first function is applied to each element. The results of these function calls (one for each element) are concatenated to construct a new iterable, which is then used to apply the second function, and so on, until the last function is applied to each value of the list of values collected so far. The output values of the last function are concatenated together to produce the output of this processor.

Example:
Each particular function can return a value or a list of values, which is flattened with the list of values returned by the same function applied to the other input values. The functions can also return None in which case the output of that function is ignored for further processing over the chain.

