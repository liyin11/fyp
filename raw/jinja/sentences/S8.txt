Navigation
Navigation

Frequently Asked Questions¶
常见问题¶

This page answers some of the often asked questions about Jinja.
本页回答了一些关于 Jinja 的常见问题

Why is it called Jinja?¶
为什么叫做 Jinja 

The name Jinja was chosen because it’s the name of a Japanese temple and temple and template share a similar pronunciation.
选择 Jinja 作为名字是因为 Jinja 是日本寺庙的名称，并且 temple 和 template 的发音类似

It is not named after the city in Uganda.
它并不是以乌干达的金贾市（Jinja）命名的

How fast is it?¶
它有多快

We really hate benchmarks especially since they don’t reflect much.
我们相当厌烦基准测试，尤其是因为它们并不能影响什么

The performance of a template depends on many factors and you would have to benchmark different engines in different situations.
一个模板的性能取决于许多因 素，而你可能需要在不同环境中对不同的引擎做基准测试

The benchmarks from the testsuite show that Jinja2 has a similar performance to Mako and is between 10 and 20 times faster than Django’s template engine or Genshi.
测试套件中的基准测试表明， Jinja2 与 Mako 的性能相近，比 Django 的模板引擎或 Genshi 快 10 到 20 倍

These numbers should be taken with tons of salt as the benchmarks that took these numbers only test a few performance related situations such as looping.
这 些数字应该相当有刺激性，因为基准测试只测试一些性能相关的场景，比如循环，来获取 这些数字

Generally speaking the performance of a template engine doesn’t matter much as the usual bottleneck in a web application is either the database or the application code.
大体上，一个模板引擎的性能几乎不会成为一个 web 应用的瓶颈，而应该是 数据库或应用的代码

How Compatible is Jinja2 with Django?¶
Jinja2 与 Django 兼容性如何

The default syntax of Jinja2 matches Django syntax in many ways.
Jinja2 的语法与 Django 的语法很多都匹配

However this similarity doesn’t mean that you can use a Django template unmodified in Jinja2.
但这并不意味着你可以直接在 Jinja2 中原封不动地使用 Django 模板

For example filter arguments use a function call syntax rather than a colon to separate filter name and arguments.
例如过滤器参数使用函数调用语法而不是用冒号分 隔过滤器名和参数

Additionally the extension interface in Jinja is fundamentally different from the Django one which means that your custom tags won’t work any longer.
此外， Jinja 中的扩展接口与 Django 的有根本区别，这意味着 你的自定义标签不能再正常工作

Generally speaking you will use much less custom extensions as the Jinja template system allows you to use a certain subset of Python expressions which can replace most Django extensions.
总体而言，因为 Jinja 模板系统允许你使用一个 Python 表达式的特定子集，你 会使用相当少的自定义扩展，且可以替代大多数的 Django 扩展

For example instead of using something like this:
例如，不是用下 面的这样:

You will most likely provide an object with attributes to retrieve comments from the database:
你会更可能提供一个对象，用属性来检索数据库中的评论:

Or directly provide the model for quick testing:
或直接为快速测试提供模型:

Please keep in mind that even though you may put such things into templates it still isn’t a good idea.
请记住即使你能在模板中放置这样的东西，这也不是一个好主意

Queries should go into the view code and not the template!
查询应该在视图代 码中执行，而不是模板中

Isn’t it a terrible idea to put Logic into Templates?¶
把逻辑放在模板里是不是个可怕的主意

Without a doubt you should try to remove as much logic from templates as possible.
毫无疑问，你应该尽可能把逻辑从模板中移除

But templates without any logic mean that you have to do all the processing in the code which is boring and stupid.
但没有逻辑的模板意味着你不得不 在代码中做所有的处理，而这是无趣和愚蠢的

A template engine that does that is shipped with Python and called string.Template.
一个如此做的支持 Python 的模板引 擎名为 string.Template ，它没有循环和 if 条件，且是迄今为止你可以在 Python 中使用的最快的模板引擎

So some amount of logic is required in templates to keep everyone happy.
所以模板中某种数量的逻辑会让你愉悦

And Jinja leaves it pretty much to you how much logic you want to put into templates.
而且 Jinja 把要在模板中放置多少逻辑的问 题几乎都留给你了

There are some restrictions in what you can do and what not.
这里有一些你可以做和不可以做的限制

Jinja2 neither allows you to put arbitrary Python code into templates nor does it allow all Python expressions.
Jinaja2 不允许你在模板中放置任意的 Python 代码，也不允许全部的 Python 表达 式

The operators are limited to the most common ones and more advanced expressions such as list comprehensions and generator expressions are not supported.
操作符限定为最常用的那些，且不支持诸如列表推导式和生成器表达式等高级表 达式

This keeps the template engine easier to maintain and templates more readable.
这使得模板引擎易于维护，并且模板有更好的可读性

Why is Autoescaping not the Default?¶
为什么自动转义不默认开启

There are multiple reasons why automatic escaping is not the default mode and also not the recommended one.
之所以自动转义不是默认的模式，且不是推荐的模式有许多原因

While automatic escaping of variables means that you will less likely have an XSS problem it also causes a huge amount of extra processing in the template engine which can cause serious performance problems.
自动转义变量意 味着你不再会面临 XSS 问题，它也导致在模板引擎中导致巨大规模的额外处理和严 重的性能问题

As Python doesn’t provide a way to mark strings as unsafe Jinja has to hack around that limitation by providing a custom string class (the Markup string) that safely interacts with safe and unsafe strings.
因为 Python 不提供标记字符串为不安全的方式， Jinja 提供了一 个自定义的字符串类（ Markup 字符串）hack 这个限制来与安全和不安 全的字符串交互

With explicit escaping however the template engine doesn’t have to perform any safety checks on variables.
在显式的转义中，无论如何模板引擎都不需要运行对变量的任何安全检查

Also a human knows not to escape integers or strings that may never contain characters one has to escape or already HTML markup.
同样，一 个自然人知道不去转义永远不会包含需要转义的或先前的 HTML 标记的整数和字符串

For example when iterating over a list over a table of integers and floats for a table of statistics the template designer can omit the escaping because he knows that integers or floats don’t contain any unsafe parameters.
 例如，当在一个整数和浮点数的表中迭代时，根据表的状况，模板设计者可以略过转 义，因为他知道整数和浮点数不包含任何不安全的参数

Additionally Jinja2 is a general purpose template engine and not only used for HTML/XML generation.
此外， Jinja2 是一个通用模板引擎，且不只用于 HTML/XML 生成

For example you may generate LaTeX, emails, CSS, JavaScript, or configuration files.
例如你会生成 LaTeX 、 邮件 、 CSS 、 JavaScript 或是配置文件

Why is the Context immutable?¶
为什么上下文是不可修改的

When writing a contextfunction() or something similar you may have noticed that the context tries to stop you from modifying it.
当写 contextfunction() 或类似的东西时，你可能会注意到上下文试图阻止 你修改它

If you have managed to modify the context by using an internal context API you may have noticed that changes in the context don’t seem to be visible in the template.
如果你已经设法用内部的上下文 API 修改了上下文，你会注意到上下文 上发生的修改在模板中是不可见的

The reason for this is that Jinja uses the context only as primary data source for template variables for performance reasons.
这个的原因是 Jinja 为性能因素，只把上下文 作为模板变量的主要数据源

If you want to modify the context write a function that returns a variable instead that one can assign to a variable by using set:
如果你想要修改上下文，写一个函数返回一个变量，并用 set 赋值:

My tracebacks look weird.
我的回溯看起来很怪异

What’s happening?¶
发生了什么

If the debugsupport module is not compiled and you are using a Python installation without ctypes (Python 2.4 without ctypes, Jython or Google’s AppEngine) Jinja2 is unable to provide correct debugging information and the traceback may be incomplete.
如果没有编译调试支持模块并且你在使用一个没有 ctypes 的 Python 安装（ Python 2.4 没有 ctypes ， Jython 或 Google 的 AppEngine ） Jinja2 不能提供 正确的调试信息，且回溯可能是不完整的

There is currently no good workaround for Jython or the AppEngine as ctypes is unavailable there and it’s not possible to use the debugsupport extension.
这也是为什么现在不能与 Jython 或是 AppEngine 良好工作的原因，没有 ctypes 就不可能使用调试支持扩展

If you are working in the Google AppEngine development server you can whitelist the ctypes module to restore the tracebacks.
如果你在 Google Appengine 开发服务器上工作，你可以把 ctypes 模块添加到 白名单来恢复回溯

This however won’t work in production environments:
这无论如何都不能用于生产环境:

Credit for this snippet goes to Thomas Johansson
这个片段的声誉见 Thomas Johansson

Why is there no Python 2.3/2.4/2.5/3.1/3.2 support?¶
为什么没有 Python 2.3 支持

Python 2.3 is missing a lot of features that are used heavily in Jinja2.
Python 2.3 中缺少许多在 Jinja2 中大量使用的特性

This decision was made as with the upcoming Python 2.6 and 3.0 versions it becomes harder to maintain the code for older Python versions.
做出这个艰难的决定是因为使用即 将到来的 Python 2.6 和 3.0 版本，再为老版本 Python 维护代码更加困难

If you really need Python 2.3 support you either have to use Jinja 1 or other templating engines that still support 2.3.
如果你确实 需要 Python 2.3 支持，你可以使用 Jinja 1 或其它仍然支持 2.3 的模板引擎

My Macros are overridden by something¶
我的宏被什么东西给覆盖了¶

In some situations the Jinja scoping appears arbitrary:
在某些情况下， Jinja 的作用域会是任意的:

This will print LAYOUT in Jinja2.
这在 Jinja2 中会打印 LAYOUT 

This is a side effect of having the parent template evaluated after the child one.
这是父模板在子模板之后求值的副作用

This allows child templates passing information to the parent template.
 这允许子模板传递信息到父模板

To avoid this issue rename the macro or variable in the parent template to have an uncommon prefix.
要避免这个问题，重命名父模板中的变量或宏 让它们有不同的前缀

