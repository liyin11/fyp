Django 1.5 documentation
Django 1.5 documentation

Writing your first Django app, part 2¶
编写你的第一个 Django 程序 第2部分¶

This tutorial begins where Tutorial 1 left off.
本教程上接 教程 第1部分 

We’re continuing the Web-poll application and will focus on Django’s automatically-generated admin site.
 我们将继续开发 Web-poll 应用，并且专注在 Django 的 自动生成的管理网站上

Philosophy
哲理

Generating admin sites for your staff or clients to add, change and delete content is tedious work that doesn’t require much creativity.
为你的员工或客户生成添加、修改和删除内容的管理性网站是个单调乏味的工作

For that reason, Django entirely automates creation of admin interfaces for models.
 出于这个原因，Django 根据模型完全自动化创建管理界面

Django was written in a newsroom environment, with a very clear separation between “content publishers” and the “public” site.
Django 是在新闻编辑室环境下编写的，“内容发表者”和“公共”网站之间有 非常明显的界线

Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site.
网站管理员使用这个系统来添加新闻、事件、体育成绩等等， 而这些内容会在公共网站上显示出来

Django solves the problem of creating a unified interface for site administrators to edit content.
Django 解决了为网站管理员创建统一 的管理界面用以编辑内容的问题

The admin isn’t intended to be used by site visitors.
管理界面不是让网站访问者使用的

It’s for site managers.
它是为网站管理员准备的

Activate the admin site¶
启用管理网站¶

The Django admin site is not activated by default – it’s an opt-in thing.
默认情况下 Django 管理网站是不启用的 – 它是可选的

To activate the admin site for your installation, do these three things:
 要启用管理网站，需要做三件事：

Uncomment "django.contrib.admin" in the INSTALLED_APPS setting.
在 INSTALLED_APPS 设置中取消 "django.contrib.admin" 的注释

Run python manage.py syncdb.
运行 python manage.py syncdb 命令

Since you have added a new application to INSTALLED_APPS, the database tables need to be updated.
既然你添加了新应用到 INSTALLED_APPS 中，数据库表就需要更新

Edit your mysite/urls.py file and uncomment the lines that reference the admin – there are three lines in total to uncomment.
编辑你的 mysite/urls.py 文件并且将有关管理的行取消注释 – 共有三行取消了注释

This file is a URLconf;
该文件是 URLconf 

we’ll dig into URLconfs in the next tutorial.
我们将在下一个教程中深入探讨 URLconfs 

For now, all you need to know is that it maps URL roots to applications.
现在，你需要知道的是它将 URL 映射到应用

In the end, you should have a urls.py file that looks like this:
最后你拥有的 urls.py 文件看起来像这样:

(The bold lines are the ones that needed to be uncommented.)
( 粗体显示的行就是那些需要取消注释的行

Start the development server¶
启动开发服务器¶

Let’s start the development server and explore the admin site.
让我们启动开发服务器并浏览管理网站

Recall from Tutorial 1 that you start the development server like so:
回想下教程的第一部分，像如下所示启动你的开发服务器：

Now, open a Web browser and go to “/admin/” on your local domain – e.g., http://127.0.0.1:8000/admin/.
现在，打开一个浏览器并在本地域名上访问 “/admin/” – 例如 http://127.0.0.1:8000/admin/ 

You should see the admin’s login screen:
你将看到管理员的登录界面：

Doesn’t match what you see?
和你看到的不一样

If at this point, instead of the above login page, you get an error page reporting something like:
如果看到这，而不是上面的登录界面，那你应该得到一个类似如下所示的错误页面报告：

then you’re probably using a version of Django that doesn’t match this tutorial version.
那么你很可能使用的 Django 版本不符合本教程的版本

You’ll want to either switch to the older tutorial or the newer Django version.
 你可以切换到对应的旧版本教程去或者更新到较新的 Django 版本

Enter the admin site¶
进入管理网站¶

Now, try logging in.
现在尝试登录进去

(You created a superuser account in the first part of this tutorial, remember?
（还记得吗

If you didn’t create one or forgot the password you can create another one.) You should see the Django admin index page:
在本教程的第一部分时你创建过一个超级用户的帐号

You should see a few types of editable content, including groups, users and sites.
你将看到一些可编辑的内容，包括 groups ，users 和 sites 

These are core features Django ships with by default.
这些都是 Django 默认情况下自带的核心功能

Make the poll app modifiable in the admin¶
使 poll 应用的数据在管理网站中可编辑¶

But where’s our poll app?
但是 poll 应用在哪

It’s not displayed on the admin index page.
 它可是没有在管理网站的首页上显示啊

Just one thing to do: We need to tell the admin that Poll objects have an admin interface.
只需要做一件事：我们需要告诉管理网站 Poll 对象要有一个管理界面

To do this, create a file called admin.py in your polls directory, and edit it to look like this:
为此，我们在你的 polls 目录下创建一个名为 admin.py 的文件，并添加如下内容：:

You’ll need to restart the development server to see your changes.
你需要重启开发服务器才能看到变化

Normally, the server auto-reloads code every time you modify a file, but the action of creating a new file doesn’t trigger the auto-reloading logic.
通常情况下，你每次修改过一个文件后开发 服务器都会自动载入，但是创建一个新文件却不会触发自动载入的逻辑

Explore the free admin functionality¶
探索管理功能¶

Now that we’ve registered Poll, Django knows that it should be displayed on the admin index page:
现在我们已经注册了 Poll ，那 Django 就知道了要在管理网站的首页上显示出来：

Click “Polls.” Now you’re at the “change list” page for polls.
点击 “Polls” 

This page displays all the polls in the database and lets you choose one to change it.
现在你在 polls 的 “更改列表” 页

There’s the “What’s up?” poll we created in the first tutorial:
该页 显示了数据库中所有的 polls 可让你选中一个进行编辑

Click the “What’s up?” poll to edit it:
点击这个”What’s up

Things to note here:
这有些注意事项：

The bottom part of the page gives you a couple of options:
在页面的底部还为你提供了几个选项：

If the value of “Date published” doesn’t match the time when you created the poll in Tutorial 1, it probably means you forgot to set the correct value for the TIME_ZONE setting.
如果 “Date published” 的值与你在第一部分教程时创建的 poll 的时间不符，这可能 意味着你忘记了将 TIME_ZONE 设置成正确的值了

Change it, reload the page and check that the correct value appears.
修改正确后再重启载入页面 来检查值是否正确

Change the “Date published” by clicking the “Today” and “Now” shortcuts.
分别点击 “Today” 和 “Now” 快捷方式来修改 “Date published” 的值

Then click “Save and continue editing.” Then click “History” in the upper right.
 然后点击 “Save and continue editing” 

You’ll see a page listing all changes made to this object via the Django admin, with the timestamp and username of the person who made the change:
最后点击右上角的 “History” 

Customize the admin form¶
自定义管理表单¶

Take a few minutes to marvel at all the code you didn’t have to write.
花些时间感叹一下吧，你没写什么代码就拥有了这一切

By registering the Poll model with admin.site.register(Poll), Django was able to construct a default form representation.
通过 admin.site.register(Poll) 注册了 Poll 模型，Django 就能构造一个默认的 表单

Often, you’ll want to customize how the admin form looks and works.
通常情况下，你将要自定义管理表单的外观和功能

You’ll do this by telling Django the options you want when you register the object.
这样的话你就需要在注册对象 时告诉 Django 对应的配置

Let’s see how this works by re-ordering the fields on the edit form.
让我们来看看如何在编辑表单上给字段重新排序

Replace the admin.site.register(Poll) line with:
将 admin.site.register(Poll) 这行替换成：:

You’ll follow this pattern – create a model admin object, then pass it as the second argument to admin.site.register() – any time you need to change the admin options for an object.
你将遵循这个模式 – 创建一个模型的管理对象，将它作为 admin.site.register() 方法的第二个参数传入 – 当你需要为一个对象做管理界面配置的时候

This particular change above makes the “Publication date” come before the “Question” field:
上面那特定的更改使得 “Publication date” 字段在 “Question” 字段之前:

This isn’t impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail.
仅有两个字段不会令你印象深刻，但是对于有许多字段的管理表单时，选择一个直观 的排序方式是一个重要的实用细节

And speaking of forms with dozens of fields, you might want to split the form up into fieldsets:
刚才所说的有许多字段的表单，你可能想将表单中的字段分割成 fieldsets ：:

The first element of each tuple in fieldsets is the title of the fieldset.
在 fieldsets 中每一个 tuple 的第一个元素就是 fieldset 的标题

Here’s what our form looks like now:
 下面是我们表单现在的样子：

You can assign arbitrary HTML classes to each fieldset.
你可以为每个 fieldset 指定 THML 样式类

Django provides a "collapse" class that displays a particular fieldset initially collapsed.
Django 提供了一个 "collapse" 样式类用于显示初始时是收缩的 fieldset 

This is useful when you have a long form that contains a number of fields that aren’t commonly used:
 当你有一个包含一些不常用的长窗体时这是非常有用的

Adding related objects¶
添加关联对象¶

OK, we have our Poll admin page.
Ok，现在我们有了 Poll 的管理页面

But a Poll has multiple Choices, and the admin page doesn’t display choices.
但是一个 Poll 拥有多个 Choices ，而 该管理页面并没有显示对应的 choices 

Yet.
是的

There are two ways to solve this problem.
我们有两种方法来解决这个问题

The first is to register Choice with the admin just as we did with Poll.
第一种就像刚才 Poll 那样在管理网站上 注册 Choice 

That’s easy:
这很简单：

Now “Choices” is an available option in the Django admin.
现在 “Choices” 在 Django 管理网站上是一个可用的选项了

The “Add choice” form looks like this:
”Add choice” 表单 看起来像这样：

In that form, the “Poll” field is a select box containing every poll in the database.
该表单中，``Poll`` 字段是一个包含了数据库中每个 poll 的选择框

Django knows that a ForeignKey should be represented in the admin as a  box.
 Django 知道 ForeignKey 在管理网站中以  框显示

In our case, only one poll exists at this point.
在本例中，选择框中仅存在一个 poll 

Also note the “Add Another” link next to “Poll.” Every object with a ForeignKey relationship to another gets this for free.
另外请注意 Poll 旁边的 “Add Another” 链接

When you click “Add Another,” you’ll get a popup window with the “Add poll” form.
每个有 ForeignKey 的对象关联到其他对象都会得到这个链接

If you add a poll in that window and click “Save,” Django will save the poll to the database and dynamically add it as the selected choice on the “Add choice” form you’re looking at.
 当点击 “Add Another” 时，你将会获得一个 “Add poll” 表单的弹出窗口

But, really, this is an inefficient way of adding Choice objects to the system.
但是，这真是一个低效的将 Choice 对象添加进系统的方式

It’d be better if you could add a bunch of Choices directly when you create the Poll object.
 如果在创建 Poll 对象时能够直接添加一批 Choices 那会更好

Let’s make that happen.
 让我们这样做吧

Remove the register() call for the Choice model.
移除对 Choice 模型的 register() 方法调用 

Then, edit the Poll registration code to read:
然后，将 Poll 的注册代码 编辑为如下所示：

This tells Django: “Choice objects are edited on the Poll admin page.
这将告诉 Django: “Choice 对象在 Poll 管理页面中被编辑

By default, provide enough fields for 3 choices.”
 默认情况下，提供 3 个 choices 的字段空间

Load the “Add poll” page to see how that looks, you may need to restart your development server:
载入 “Add poll” 页面来看看，你可能需要重启你的开发服务器：

It works like this: There are three slots for related Choices – as specified by extra – and each time you come back to the “Change” page for an already-created object, you get another three extra slots.
它看起来像这样：多了三个为关联 Choices 提供的输入插槽 – 由 extra 指定 – 并且每次你在 “Change” 页修改已经创建的对象时，都会另外获得三个额外插槽

One small problem, though.
在现有的三个插槽的底部，你会发现一个 “Add another Choice” 链接

It takes a lot of screen space to display all the fields for entering related Choice objects.
 如果你点击它，一个新的插槽会被添加

For that reason, Django offers a tabular way of displaying inline related objects;
如果想移除添加的插槽， 你可以点击所添加的插槽的右上方的 X 

you just need to change the ChoiceInline declaration to read:
注意你不能移除原有的三个插槽

With that TabularInline (instead of StackedInline), the related objects are displayed in a more compact, table-based format:
还有个小问题

Note that there is an extra “Delete?” column that allows removing rows added using the “Add Another Choice” button and rows that have already been saved.
使用了 TabularInline 后(而不是 StackedInline) ，基于表的格式下相关 对象被显示的更紧凑了：

Now that the Poll admin page is looking good, let’s make some tweaks to the “change list” page – the one that displays all the polls in the system.
现在 Poll 的管理界面看起来不错了，让我们给 “chang list” 页面做些调整 – 显示系统中所有 polls 的页面

Here’s what it looks like at this point:
下面是现在的样子：

By default, Django displays the str() of each object.
默认情况下， Django 显示的是每个对象 str() 的结果

But sometimes it’d be more helpful if we could display individual fields.
但是若是我们能够 显示每个字段的话有时会更有帮助的

To do that, use the list_display admin option, which is a tuple of field names to display, as columns, on the change list page for the object:
要做到这一点，需要使用 list_display 管理选项，这是一个 tuple ，包含了要显示的字段名， 将会以列的形式在该对象的 chang lsit 页上列出来：:

Just for good measure, let’s also include the was_published_recently custom method from Tutorial 1:
效果再好的点话，让我们把在第一部分教程中自定义的方法 was_published_recently 也包括进来:

Now the poll change list page looks like this:
现在 poll 的变更列表页看起来像这样：

You can click on the column headers to sort by those values – except in the case of the was_published_recently header, because sorting by the output of an arbitrary method is not supported.
你可以点击列的标题对这些值进行排序 – 除了 was_published_recently 这一列，因为不支持根据方法输出的内容的排序

Also note that the column header for was_published_recently is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output.
还要注意的是默认情况下列的标题是 was_published_recently ，就是方法名（将下划线替换为空格），并且每一行以字符串形式输出

You can improve that by giving that method (in models.py) a few attributes, as follows:
你可以通过给该方法 （在 models.py 内 ） 添加一些属性来改善显示效果，如下所示：:

Edit your admin.py file again and add an improvement to the Poll change list page: Filters.
再次编辑你的 admin.py 文件并添加一个改进 Poll 的 change list 页面效果的功能： 筛选 ( Filters ) 

Add the following line to PollAdmin:
在 PollAdmin 内添加一行如下所示的代码：:

That adds a “Filter” sidebar that lets people filter the change list by the pub_date field:
这就增加了一个 “筛选” 的侧边栏，让人们通过 pub_date 字段的值来筛选 change list 显示的内容：

The type of filter displayed depends on the type of field you’re filtering on.
显示筛选的类型取决于你需要筛选的字段类型

Because pub_date is a DateTimeField, Django knows to give appropriate filter options: “Any date,” “Today,” “Past 7 days,” “This month,” “This year.”
 因为 pub_date 是一个 DateTimeField 的实例，Django 知道提供对应的筛选选项：”Any date,” “Today,” “Past 7 days,” “This month,” “This year.”

This is shaping up well.
为了效果更好

Let’s add some search capability:
让我们来加上搜索功能：:

That adds a search box at the top of the change list.
在 chang list 页的顶部增加了一个搜索框

When somebody enters search terms, Django will search the question field.
当有人输入了搜索条件， Django 将搜索 question 字段

You can use as many fields as you’d like – although because it uses a LIKE query behind the scenes, keep it reasonable, to keep your database happy.
 虽然你可以使用任意数量的字段，如你希望的那样 – 但是因为它在后台用 LIKE 查询，为了保持数据库的性能请合理使用

Finally, because Poll objects have dates, it’d be convenient to be able to drill down by date.
最后，因为 Poll 对象有日期字段，根据日期来向下钻取记录将会很方便

Add this line:
 添加下面这一行代码：:

That adds hierarchical navigation, by date, to the top of the change list page.
这会在 change list 页的顶部增加了基于日期的分层导航功能

At top level, it displays all available years.
 在最顶层，显示所有可用年份

Then it drills down to months and, ultimately, days.
然后可钻取到月份，最终到天

Now’s also a good time to note that change lists give you free pagination.
现在又是一个好时机，请注意 change lists 页面提供了分页功能

The default is to display 100 items per page.
默认情况下每一页显示 100 条记录

Change-list pagination, search boxes, filters, date-hierarchies and column-header-ordering all work together like you think they should.
 Change-list 分页，搜索框，筛选，日期分层和列标题排序如你所原地在一起运行了

Customize the admin look and feel¶
自定义管理界面的外观¶

Clearly, having “Django administration” at the top of each admin page is ridiculous.
显而易见，在每一个管理页面顶部有 “Django administration” 是无语的

It’s just placeholder text.
虽然它仅仅是个占位符

That’s easy to change, though, using Django’s template system.
不过使用 Django 的模板系统是很容易改变的

The Django admin is powered by Django itself, and its interfaces use Django’s own template system.
Django 管理网站有 Django 框架自身的功能，可以通过 Django 自身的模板系统来修改界面

By default, TEMPLATE_DIRS is empty.
默认情况下，:setting:TEMPLATE_DIRS 值是空的

So, let’s add a line to it, to tell Django where our templates live:
因此，让我们添加一行代码，来告诉 Django 我们的模板在哪里：:

Now copy the template admin/base_site.html from within the default Django admin template directory in the source code of Django itself (django/contrib/admin/templates) into an admin subdirectory of whichever directory you’re using in TEMPLATE_DIRS.
现在从 Django 源代码中自带的默认 Django 管理模板的目录 (django/contrib/admin/templates) 下复制 admin/base_site.html 模板到你正在使用的 TEMPLATE_DIRS 中任何目录的子目录 admin 下

For example, if your TEMPLATE_DIRS includes '/home/my_username/mytemplates', as above, then copy django/contrib/admin/templates/admin/base_site.html to /home/my_username/mytemplates/admin/base_site.html.
例如：如果你的 TEMPLATE_DIRS 中包含 '/path/to/mysite/templates' 目录， 如上所述，复制 django/contrib/admin/templates/admin/base_site.html 模板到 /path/to/mysite/templates/admin/base_site.html 

Don’t forget that admin subdirectory.
不要忘了是 admin 子目录

Where are the Django source files?
Django 的源代码在哪里

If you have difficulty finding where the Django source files are located on your system, run the following command:
如果在你的文件系统中很难找到 Django 源代码，可以运行如下命令：

Then, just edit the file and replace the generic Django text with your own site’s name as you see fit.
然后，只需要编辑该文件并将通用的 Djangot 文字替换为你认为适合的属于你自己的网站名

This template file contains lots of text like {% block branding %} and {{ title }}.
该模板包含了大量的文字，比如 {% block branding %} 和 {{ title }}``

The {% and {{ tags are part of Django’s template language.
``{% 和 {{ 标记是 Django 模板语言的一部分

When Django renders admin/base_site.html, this template language will be evaluated to produce the final HTML page.
 当 Django 呈现 admin/base_site.html 时，根据模板语言生成最终的 HTML 页面

Don’t worry if you can’t make any sense of the template right now – we’ll delve into Django’s templating language in Tutorial 3.
 Don’t worry if you can’t make any sense of the template right now – 如果你现在不能理解模板的含义先不用担心 – 我们将在教程 3 中深入探讨 Django’ 的模板语言

Note that any of Django’s default admin templates can be overridden.
请注意 Django 默认的管理网站中的任何模板都是可覆盖的

To override a template, just do the same thing you did with base_site.html – copy it from the default directory into your custom directory, and make changes.
 要覆盖一个模板，只需要像刚才处理 base_site.html 一样 – 从默认的目录下复制到你的自定义目录下，并修改它

By default, it displays all the apps in INSTALLED_APPS that have been registered with the admin application, in alphabetical order.
默认情况下，首页会显示在 INSTALLED_APPS 中所有注册了管理功能的应用， 并按字母排序

You may want to make significant changes to the layout.
你可能想在页面布局上做大修改

After all, the index is probably the most important page of the admin, and it should be easy to use.
总之，首页可能是管理网站中最重要的页面， 因此它应该很容易使用

The template to customize is admin/index.html.
你需要自定义的模板是 admin/index.html 

(Do the same as with admin/base_site.html in the previous section – copy it from the default directory to your custom template directory.) Edit the file, and you’ll see it uses a template variable called app_list.
 （同先前处理 admin/base_site.html 一样 – 从默认目录下复制到你自定义的模板目录下

That variable contains every installed Django app.
） 编辑这个文件，你将看到一个名为 app_list 的模板变量

Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best.
这个变量包含了每一个 已安装的 Django 应用

Again, don’t worry if you can’t understand the template language – we’ll cover that in more detail in Tutorial 3.
你可以通过你认为最好的方法硬编码链接到特定对象的管理页面，而不是使用默认模板

When you’re comfortable with the admin site, read part 3 of this tutorial to start working on public poll views.
当你熟悉了管理网站的功能后，阅读 教程 第3部分 开始开发公共 poll 界面

Table Of Contents
Table Of Contents

Browse
Browse

You are here:
You are here:

This Page
This Page

Quick search
Quick search

Enter search terms or a module, class or function name.
Enter search terms or a module, class or function name.

Last update:
Last update:

Oct 30, 2013
Dec 02, 2013

